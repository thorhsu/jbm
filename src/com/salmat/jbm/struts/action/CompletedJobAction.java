/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.salmat.jbm.struts.action;

import java.sql.Connection;
import java.sql.DriverManager;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.mlw.vlh.ValueList;
import net.mlw.vlh.ValueListInfo;
import net.mlw.vlh.web.ValueListRequestUtil;
import net.sf.json.JSONArray;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.beanutils.ConvertUtils;
import org.apache.commons.beanutils.converters.DateConverter;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.action.DynaActionForm;
import org.apache.struts.actions.DispatchAction;
import org.hibernate.Transaction;

import com.salmat.jbm.bean.LpinfoJSON;
import com.salmat.jbm.hibernate.*;
import com.salmat.jbm.service.*;
import com.salmat.jbm.struts.form.*;
import com.salmat.jbm.hibernate.HibernateSessionFactory;
import com.painter.util.Global;
import com.painter.util.SessionUtil;
import com.painter.util.Util;

import net.sf.jasperreports.engine.*;
import net.sf.jasperreports.engine.export.*;
import java.util.*;



/**
 * MyEclipse Struts Creation date: 02-23-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action parameter="fid" validate="true"
 * @struts.action-forward name="init" path=".findUserAccount"
 */
public class CompletedJobAction extends DispatchAction {
    /*
     * Generated Methods
     */
	private static final LPInfoService lpinfoService = LPInfoService.getInstance();
	private static final MPInfoService mpinfoService = MPInfoService.getInstance();
	private static final PSInfoService psinfoService = PSInfoService.getInstance();
	private static final LGInfoService lginfoService = LGInfoService.getInstance();
	private static final ReturnInfoService returninfoService = ReturnInfoService.getInstance();
	private static final LCInfoService lcinfoService = LCInfoService.getInstance();
	private static final JobCodeService jobcodeService = JobCodeService.getInstance();
    private static final JobBagService jobbagService = JobBagService.getInstance();
	private static final JobBagSpliteService jobbagSpliteService = JobBagSpliteService.getInstance();    
    private static final CustomerService customerService = CustomerService.getInstance();
    private static final CodeService codeService = CodeService.getInstance();
    private static ValueListService valueListService = ValueListService.getInstance();    
    private static Logger log = Logger.getLogger(CompletedJobAction.class);
    private static final EmployeeService employeeService = EmployeeService.getInstance();
    private static final SyslogService syslogService = SyslogService.getInstance();

    /**
     * Method execute
     * 
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    protected ActionForward unspecified(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) {

        return mapping.findForward("homepage");
    }

    //
    public ActionForward selectUser(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        CompletedJobForm myForm = (CompletedJobForm) form;


        try {
        	Employee employee = SessionUtil.getAccount(request.getSession());
    		List lpmpStaffList = employeeService.getLPMPEmployees(); //LP_Staff List
            request.setAttribute("employee", employee);
            request.setAttribute("lpmpStaffList", lpmpStaffList);

        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("selectUser");
    }    
    
    public ActionForward deleteSplites(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response){
    	ActionMessages messages = new ActionMessages();
        CompletedJobForm myForm = (CompletedJobForm) form;
        String jobBagSpliteNo = myForm.getJobBagSpliteNo();
        String deptType = myForm.getDeptType();
        HibernateSessionFactory.getSession().clear();
    	HibernateSessionFactory.getSession().getTransaction().begin();
        JobBagSplite jobbagSplite = jobbagSpliteService.findById(jobBagSpliteNo);
        JobBag jobBag = jobbagSplite.getJobBag();
        jobBag = jobbagService.findById(jobBag.getJobBagNo());
        Set<JobBagSplite> jobBagSplites = jobBag.getJobBagSplites();
        int delCounter = 0;
        int counter = 0;
        for(JobBagSplite jobBagSplite : jobBagSplites){
        	counter ++;
        	if("LP".equals(deptType) && jobBagSplite.getLpCompletedDateByUser() == null){
        		jobbagSpliteService.delete(jobBagSplite);
        		delCounter++;
        	}else if("MP".equals(deptType) && jobBagSplite.getMpCompletedDateByUser() == null){        		
        		jobbagSpliteService.delete(jobBagSplite);
        		delCounter++;
        	}
        }        
        
        jobBag.setSpliteCount(counter - delCounter);
        String status = jobBag.getJobBagStatus();
        if("LP".equals(deptType) && !"COMPLETED_LG".equals(status) && !"ACCOUNTING_LOCKED".equals(status) && !"COMPLETED_MP".equals(status) 
				&& !"NON_LP".equals(status) && !"PRINTED_LG_FORM".equals(status) && !"EDD".equals(status) && !"ACCOUNTING_EP1".equals(status) 
				&& !"ACCT_DN_GENERATED".equals(status) && !"ACCOUNTING_EP1".equals(status))
		     jobBag.setJobBagStatus("COMPLETED_LP"); //JOB_BAG 列印作業已完成
        else if("MP".equals(deptType) && !"COMPLETED_LG".equals(status) && !"ACCOUNTING_LOCKED".equals(status)  
				&& !"NON_LP".equals(status) && !"PRINTED_LG_FORM".equals(status) && !"EDD".equals(status) && !"ACCOUNTING_EP1".equals(status) 
				&& !"ACCT_DN_GENERATED".equals(status) && !"ACCOUNTING_EP1".equals(status))
		     jobBag.setJobBagStatus("COMPLETED_MP"); //JOB_BAG 裝封作業已完成
        if(!"ACCT_DN_GENERATED".equals(status) && !"ACCOUNTING_EP1".equals(status)) //此兩個狀態會在notes中記載被那支debit note鎖定，所以不能重設notes
           jobBag.setNotes("");
        jobbagService.save(jobBag);
        HibernateSessionFactory.getSession().getTransaction().commit();
        if("LP".equals(deptType)){
        	myForm.setJobBagSpliteNo(jobBagSpliteNo + "L");
        }else if("MP".equals(deptType)){
        	myForm.setJobBagSpliteNo(jobBagSpliteNo + "M");
        }        
        request.setAttribute("message", jobBagSpliteNo + "完成回報且刪除其它未通報完成的分檔批次共" + delCounter + "個");
        SysLog syslog = new SysLog();
		syslog.setLogType("Del_Job_Splite");
		syslog.setSubject("刪除工單分檔");
		syslog.setMessageBody(myForm.getJobBagSpliteNo() + "完成回報且刪除其它未通報完成的分檔批次共" + delCounter + "個");
	    syslog.setCreateDate(new Date());
		syslogService.save(syslog);
        
    	return reportStatusInit(mapping, myForm, request, response);
    }
    
    public ActionForward reportStatusInit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        CompletedJobForm myForm = (CompletedJobForm) form;
        String jobBagSpliteNo = myForm.getJobBagSpliteNo();
        String empNo  = myForm.getEmpNo();
        String empMgrNo = myForm.getEmpManagerNo();
        String deptType = "";
 
        try {
        	JobBag jobbag = null;
        	if (null!= jobBagSpliteNo && jobBagSpliteNo.length() > 0) {
        		if(jobBagSpliteNo.length() <= 4){
        			request.setAttribute("message", "錯誤的工單號碼+批號");
                    return mapping.findForward("message"); 
        		}
        	    
        		JobBagSplite jobbagSplite = jobbagSpliteService.findById(jobBagSpliteNo.substring(0 , jobBagSpliteNo.length()-1));
        		if (null == jobbagSplite) { 
                    request.setAttribute("message", "錯誤的工單號碼+批號");
                    return mapping.findForward("message"); 
            	}
        		request.setAttribute("message", jobBagSpliteNo);
        		String jobbagNo = jobbagSplite.getJobBag().getJobBagNo();
        		jobbag = jobbagService.findById(jobbagNo);
        		if(jobbag.getIsDeleted() != null && jobbag.getIsDeleted() == true){
        			request.setAttribute("message", jobbagNo + "此工單已被標記刪除，不能再被完成記錄");
                    return mapping.findForward("message");
        		}
        	    int finishedPages = 0;
        	    int finishedAccounts = 0;
        	    Set<JobBagSplite> jobBagSplites = jobbag.getJobBagSplites();
        	    for(JobBagSplite splite: jobBagSplites){
        	    	int accounts = splite.getLpAccountSeqDiff() == null? 0 : splite.getLpAccountSeqDiff();
        	    	int pages = splite.getLpPagesSeqDiff() == null? 0 : splite.getLpPagesSeqDiff() ;
        	    	finishedPages += pages;
        	    	finishedAccounts += accounts;
        	    }
        	    //計算其它批次共完多少accounts及pages
        	    finishedPages = finishedPages - (jobbagSplite.getLpPagesSeqDiff() == null? 0: jobbagSplite.getLpPagesSeqDiff());
        	    finishedAccounts = finishedAccounts - (jobbagSplite.getLpAccountSeqDiff() == null? 0: jobbagSplite.getLpAccountSeqDiff());
        		
        		
            	
            	String status = jobbag.getJobBagStatus();
            	
            	if("ACCOUNTING_LOCKED".equals(status) || "ACCOUNTING_EP1".equals(status) || "ACCT_DN_GENERATED".equals(status)){
            		request.setAttribute("message", jobbagNo + "此工單已進入會計立帳程序，不能再被完成記錄");
                    return mapping.findForward("message");
            	}
            	
            	deptType = jobBagSpliteNo.substring(jobBagSpliteNo.length()-1, jobBagSpliteNo.length());
                if (deptType.equalsIgnoreCase("L")) 
                	deptType = "LP";
                else if (deptType.equalsIgnoreCase("M")) 
                	deptType = "MP";
                else if (deptType.equalsIgnoreCase("I")) 
                	deptType = "LG";
                else {
                    request.setAttribute("message", jobBagSpliteNo + "：錯誤的尾碼, 尾碼必須為 (L:Laser/ M:Mail/ I:Logistic)");
                    return mapping.findForward("message");        	
                }            	
            	
        		//request.setAttribute("jobbag", jobbag);
        		request.setAttribute("jobbagSplite", jobbagSplite);
        		request.setAttribute("deptType", deptType);
        		request.setAttribute("finishedPages", finishedPages);
        		request.setAttribute("finishedAccounts", finishedAccounts);
        	}
        	else { 
        		//JobBag jobbag = new JobBag();
        		JobBagSplite jobbagSplite = new JobBagSplite();
        		//request.setAttribute("jobbag", jobbag);
        		request.setAttribute("jobbagSplite", jobbagSplite);
        	}
        	if(jobbag == null){
        		jobbag = new JobBag();
        	}
        	request.setAttribute("jobbag", jobbag);
        	Employee employee = new Employee();
        	Employee employeeMgr = new Employee();

        	if (null!= empNo && empNo.length() >0)
        		employee = employeeService.findById(empNo);
        	
        	if (null!= empMgrNo && empMgrNo.length() >0)
        		employeeMgr = employeeService.findById(empMgrNo);  

    		request.setAttribute("employee", employee);
    		request.setAttribute("employeeMgr", employeeMgr);
    		
            request.setAttribute("ACTION_MODE", "VIEW");
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("reportStatusInit");
    }    
    
    //記錄完成工作
    public ActionForward reportStatusSubmit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        CompletedJobForm myForm = (CompletedJobForm) form;
        String jobBagSpliteNo = myForm.getJobBagSpliteNo();
        jobBagSpliteNo = jobBagSpliteNo.toUpperCase();
        String deptType = myForm.getDeptType();

        String empNo  = myForm.getEmpNo();
        String empMgrNo = myForm.getEmpManagerNo();
        JobBagSplite jobBagSplite = null;
        JobBag rootJobBag = null;
        
        
        try {        	
        	HibernateSessionFactory.getSession().clear();
        	HibernateSessionFactory.getSession().getTransaction().begin();
        	jobBagSplite = jobbagSpliteService.findById(jobBagSpliteNo);
        	if(jobBagSplite == null){
    			request.setAttribute("message", "錯誤的工單號碼+批號" + jobBagSpliteNo);
    			return mapping.findForward("reportStatusInit");
        	}else if(jobBagSplite.getJobBag() == null){
        		if(jobBagSpliteNo != null && jobBagSpliteNo.length() > 4){
        		   String jobbagNo = jobBagSpliteNo.substring(0 , jobBagSpliteNo.length()-3);
        		   JobBag jobbag = jobbagService.findById(jobbagNo);
        		   if(jobbag != null)
        			   jobBagSplite.setJobBag(jobbag);
        		}else{
        		   request.setAttribute("message", jobBagSpliteNo + "找不到對應的原始工單");
    			   return mapping.findForward("reportStatusInit");
        		}
        	}
        	String jobbagNo = jobBagSplite.getJobBag().getJobBagNo();
        	//雙面或單面
        	Code code = jobBagSplite.getJobBag().getCodeByLpCodePrintType();
        	if("true".equals(myForm.getChangeSubmit())){
        	   Employee employee = SessionUtil.getAccount(request.getSession());
         	   SysLog syslog = new SysLog();
     		   syslog.setLogType("Mod_Job_Bag");
     		   syslog.setSubject("修改工單內容");     		   
     		   syslog.setMessageBody(employee.getEName() + "修改" + jobBagSplite.getJobBagSpliteNo() + ": accounts from " +  jobBagSplite.getJobBag().getAccounts() + " to " + myForm.getAccountsHidden() + ". " + 
     				  "pages from " +  jobBagSplite.getJobBag().getPages() + " to " + myForm.getPagesHidden() + ". " +
     				  "sheets from " +  jobBagSplite.getJobBag().getSheets() + " to " + myForm.getSheetsHidden() + ". ");
     	       syslog.setCreateDate(new Date());
     		   syslogService.save(syslog);
         	}
        	
        	if(myForm.getSheetsHidden() != null && myForm.getSheetsHidden() > 0)
        	   jobBagSplite.getJobBag().setSheets(myForm.getSheetsHidden());
        	if(myForm.getAccountsHidden() != null && myForm.getAccountsHidden() > 0)
        	   jobBagSplite.getJobBag().setAccounts(myForm.getAccountsHidden());
        	if(myForm.getPagesHidden() != null && myForm.getPagesHidden() > 0)
        	   jobBagSplite.getJobBag().setPages(myForm.getPagesHidden());
        	
        	
        	jobbagService.save(jobBagSplite.getJobBag());
        	
        	Employee employee = new Employee();
        	Employee employeeMgr = new Employee();

        	if (null!= empNo && empNo.length() >0)
        		employee = employeeService.findById(empNo);
        	
        	if (null!= empMgrNo && empMgrNo.length() >0)
        		employeeMgr = employeeService.findById(empMgrNo);        	
        		
    		//取得系統時間
			Calendar calendar = Calendar.getInstance();
			Date now = new Date();
			calendar.setTime(now);   
			
        	if (null!=deptType && deptType.equalsIgnoreCase("LP")) {
        		
        		//壓上  完成帳號/日期 
        		if (null!= employee ) {
            		jobBagSplite.setLpCompletedDateByUser(calendar.getTime());
        			jobBagSplite.setLpCompletedUser(employee.getUserId());
        		}
        		if (null!= employeeMgr ) {
        			jobBagSplite.setLpCompletedDateByManager(calendar.getTime());        			
        			jobBagSplite.setLpCompletedManager(employeeMgr.getUserId());
        		}

        		Integer lpZipCodeBegin = myForm.getLpZipCodeBegin();
        		Integer lpZipCodeEnd = myForm.getLpZipCodeEnd();
        		Integer lpZipCodeDiff = myForm.getLpZipCodeDiff(); 
        		
        		Integer lpBlankBegin = myForm.getLpBlankBegin();
        		Integer lpBlankEnd = myForm.getLpBlankEnd();
        		Integer lpBlankDiff = myForm.getLpBlankDiff();    
        		
        		Integer lpPaperBegin = myForm.getLpPaperBegin();
        		Integer lpPaperEnd = myForm.getLpPaperEnd();     
        		Integer lpPaperDiff = myForm.getLpPaperDiff();        
        		
        		Integer lpPagesSeqBegin = myForm.getLpPagesSeqBegin();
        		Integer lpPagesSeqEnd = myForm.getLpPagesSeqEnd();    
        		Integer lpPagesSeqDiff = myForm.getLpPagesSeqDiff();
        		Integer lpPagesSeqExtra = myForm.getLpPagesSeqExtra();
        		
        		Integer lpAccountSeqBegin = myForm.getLpAccountSeqBegin();
        		Integer lpAccountSeqEnd = myForm.getLpAccountSeqEnd();  
        		Integer lpAccountSeqDiff = myForm.getLpAccountSeqDiff();          		
        		
        		jobBagSplite.setLpZipCodeBegin(lpZipCodeBegin);        		
        		jobBagSplite.setLpZipCodeEnd(lpZipCodeEnd);
        		jobBagSplite.setLpZipCodeDiff(lpZipCodeDiff);  
        		
        		jobBagSplite.setLpBlankBegin(lpBlankBegin);        		
        		jobBagSplite.setLpBlankEnd(lpBlankEnd);
        		jobBagSplite.setLpBlankDiff(lpBlankDiff);   
        		
        		jobBagSplite.setLpPaperBegin(lpPaperBegin);
        		jobBagSplite.setLpPaperEnd(lpPaperEnd);
        		jobBagSplite.setLpPaperDiff(lpPaperDiff);    
        		
        		jobBagSplite.setLpPagesSeqBegin(lpPagesSeqBegin);
        		jobBagSplite.setLpPagesSeqEnd(lpPagesSeqEnd);
        		jobBagSplite.setLpPagesSeqDiff(lpPagesSeqDiff);
        		jobBagSplite.setLpPagesSeqExtra(lpPagesSeqExtra);
        		
        		jobBagSplite.setLpAccountSeqBegin(lpAccountSeqBegin);
        		jobBagSplite.setLpAccountSeqEnd(lpAccountSeqEnd);
        		jobBagSplite.setLpAccountSeqDiff(lpAccountSeqDiff);        		
        		
        		String lpMachineName = myForm.getLpMachineName();
        		jobBagSplite.setLpMachineName(lpMachineName);
        		
        		jobbagSpliteService.save(jobBagSplite);
        		
//            	HibernateSessionFactory.getSession().getTransaction().commit();
            	
            	
  //          	HibernateSessionFactory.getSession().clear();
    //        	HibernateSessionFactory.getSession().getTransaction().begin();
        		
            	//檢查是否全部的批號 都完成 
        		JobBag jobbag = jobbagService.findById(jobbagNo);
        		Set<JobBagSplite> splites = jobbag.getJobBagSplites();
        		Iterator iterator = splites.iterator();
        		Boolean allCompleted = true;
        		Integer totalPages=0;
        		Integer totalAccounts=0;
        		Integer spliteCounter=0;
        		int completedTotalAccounts = 0; //已列印完成的accounts
        		int completedTotalPages = 0;  //已列印完成的pages
        		
        		while (iterator.hasNext()) {
        			JobBagSplite splite =  (JobBagSplite)iterator.next();

        			if (null!= splite.getLpAccountSeqDiff() )
        				totalAccounts += splite.getLpAccountSeqDiff();
        			
        			if (null!= splite.getLpPagesSeqDiff())
        				totalPages += splite.getLpPagesSeqDiff();
        			
	    	    	if (null==splite.getLpCompletedDateByUser() ) { //若有 LpCompletedDateByUser, 表示這張批號, 有人回覆
	    	    		allCompleted = false;
	    	    	}else {
	    	    		completedTotalAccounts += (splite.getLpAccountSeqDiff() == null) ? 0 : splite.getLpAccountSeqDiff();
        		    	completedTotalPages += (splite.getLpPagesSeqDiff() == null)? 0 : splite.getLpPagesSeqDiff();
	        			spliteCounter = spliteCounter + 1; 
	    	    	}	    	    	
        		}    
        		String notes = jobbag.getNotes();
        		String lpNotes = "";
        		String mpNotes = "";
        		int blankIndex = 0;
        		//間隔字元為全形空白
        		if(notes != null && (blankIndex = notes.indexOf("　")) > 0){        			
        			lpNotes = notes.substring(0, blankIndex);
        			mpNotes = notes.substring(blankIndex + 1);        			
        		}
        		String status = jobbag.getJobBagStatus();
    	    	if (allCompleted)  {    	    		
    	    		if(!"COMPLETED_LG".equals(status) && !"ACCOUNTING_LOCKED".equals(status) && !"COMPLETED_MP".equals(status) 
    	    				&& !"NON_LP".equals(status) && !"PRINTED_LG_FORM".equals(status) && !"EDD".equals(status) && !"ACCOUNTING_EP1".equals(status) 
    	    				&& !"ACCT_DN_GENERATED".equals(status) && !"ACCOUNTING_EP1".equals(status))
    	    		     jobbag.setJobBagStatus("COMPLETED_LP"); //JOB_BAG 列印作業已完成
    	    		//當全部 batch 回覆後, 若原始工單 無accounts, 以回覆的accounts 回壓 
            		if ((jobbag.getAccounts() == null || jobbag.getAccounts().compareTo(0) ==0) && totalAccounts > 0) {
            			jobbag.setAccounts(totalAccounts);
            		}     
            		//當全部 batch 回覆後, 若原始工單 無pages, 以回覆的pages 回壓 
            		if ((jobbag.getPages() == null || jobbag.getPages().compareTo(0) ==0) && totalPages > 0) {
            			jobbag.setPages(totalPages);
            			if(null== jobbag.getSheets() || jobbag.getSheets() == 0){
            			   if(code != null && code.getCodeValueTw() != null && code.getCodeValueTw().indexOf("雙面") >= 0){
            				   jobbag.setSheets(totalPages / 2);
            				   if(totalPages % 2 == 1)
            					   jobbag.setSheets(totalPages / 2 + 1);
            			   }
            			   if(code != null && code.getCodeValueTw() != null && code.getCodeValueTw().indexOf("單面") >= 0)
            				   jobbag.setSheets(totalPages );
            			}
            		}    	    	
            		//全部完成lpNotes要變成空字串
            		if(!"ACCT_DN_GENERATED".equals(status) && !"ACCOUNTING_EP1".equals(status)){
            		   if(!"".equals(mpNotes))
            		      jobbag.setNotes("　" + mpNotes);
            		   else
            		      jobbag.setNotes("");
            		}            		

    	    		jobbagService.save(jobbag);
    	    	}else{
        			int pages = jobbag.getPages() == null ? 0 : jobbag.getPages();
        			int accounts = jobbag.getAccounts() == null ? 0 : jobbag.getAccounts();
        			int pagesDiff = pages - completedTotalPages;
        			int accountsDiff = accounts - completedTotalAccounts;
        			if(!"ACCT_DN_GENERATED".equals(status) && !"ACCOUNTING_EP1".equals(status))
        			    jobbag.setNotes("已列印完成的pages為 " + completedTotalPages + "(差：" + pagesDiff 
        					   + ")，Accounts為" + completedTotalAccounts + "(差：" + accountsDiff + ")　" + mpNotes );
        			
        			if(pagesDiff == 0 && accountsDiff == 0 && accounts != 0 && pages != 0){
        				request.setAttribute("accountsEqual", "LP_ALL_Completed");
        			}
        			if((pagesDiff < 0 || accountsDiff < 0) && accounts != 0 && pages != 0){
        				request.setAttribute("accountsEqual", "LP_ALL_OVER");
        			}
        			jobbagService.save(jobbag);
        		}
        		
        		//當全部 batch 回覆後, 檢查accounts/ pages 必須跟 從logs 抓到的值相同
        		if (allCompleted && null!= jobbag.getAccounts() && jobbag.getAccounts().compareTo(0) >0 && jobbag.getSpliteCount().compareTo(spliteCounter) ==0) {
        			if (totalAccounts.compareTo(jobBagSplite.getJobBag().getAccounts()) != 0) {
        	            HibernateSessionFactory.getSession().getTransaction().rollback();
        				request.setAttribute("message", "accounts 數 跟 原始資料不合 !! ");
        				return mapping.findForward("message");        				
        			}
        		}
        		if (allCompleted && null!= jobbag.getPages() && jobbag.getPages().compareTo(0) >0 && jobbag.getSpliteCount().compareTo(spliteCounter) ==0) {
        			if (totalPages.compareTo(jobBagSplite.getJobBag().getPages()) != 0) {
        	            HibernateSessionFactory.getSession().getTransaction().rollback();
        				request.setAttribute("message", "pages 數 跟 原始資料不合 !! ");
        				return mapping.findForward("message");        				
        			}
        		}     
        		rootJobBag = jobbag;
        		/*        		        
        		if(allCompleted){
	    		    jobbagService.save(jobbag);
        		}
        		*/
        		
        	} else if (null!=deptType && deptType.equalsIgnoreCase("MP")) {
        		//壓上  完成帳號/日期 
        		if (null!= employee ) {
        			jobBagSplite.setMpCompletedUser(employee.getUserId());        			
            		jobBagSplite.setMpCompletedDateByUser(calendar.getTime());

        		}
        		if (null!= employeeMgr ) {
        			jobBagSplite.setMpCompletedManager(employeeMgr.getUserId());
        			jobBagSplite.setMpCompletedDateByManager(calendar.getTime());
        		}
        		Integer lpPagesSeqBegin = myForm.getLpPagesSeqBegin();
        		Integer lpPagesSeqEnd = myForm.getLpPagesSeqEnd();    
        		Integer lpPagesSeqDiff = myForm.getLpPagesSeqDiff();
        		Integer lpPagesSeqExtra = myForm.getLpPagesSeqExtra();
        		
        		Integer lpAccountSeqBegin = myForm.getLpAccountSeqBegin();
        		Integer lpAccountSeqEnd = myForm.getLpAccountSeqEnd();  
        		Integer lpAccountSeqDiff = myForm.getLpAccountSeqDiff();	
        		
            	//Thor add修改交寄日期 2011/10/20
        		jobBagSplite.setLpPagesSeqBegin(lpPagesSeqBegin);
        		jobBagSplite.setLpPagesSeqEnd(lpPagesSeqEnd);
        		jobBagSplite.setLpPagesSeqDiff(lpPagesSeqDiff);
        		jobBagSplite.setLpPagesSeqExtra(lpPagesSeqExtra);
        		
        		jobBagSplite.setLpAccountSeqBegin(lpAccountSeqBegin);
        		jobBagSplite.setLpAccountSeqEnd(lpAccountSeqEnd);
        		jobBagSplite.setLpAccountSeqDiff(lpAccountSeqDiff);     
        		
        		
        		// MachineName, Damage
        		String mpMachineName = myForm.getMpMachineName();
        		Boolean mpHasDamage = myForm.getMpHasDamage();
        		jobBagSplite.setMpMachineName(mpMachineName);
        		jobBagSplite.setMpHasDamage(mpHasDamage);
        		
        		//若jobBagSplite 有 Damage, 原工單也要押上 Damage
        		if (null!= mpHasDamage && mpHasDamage) {
        			jobBagSplite.getJobBag().setHasDamage(true);
        			jobbagService.save(jobBagSplite.getJobBag());
        		}
        		
        		jobbagSpliteService.save(jobBagSplite);
            	//HibernateSessionFactory.getSession().getTransaction().commit();
            	
            	
            	//HibernateSessionFactory.getSession().clear();
            	//HibernateSessionFactory.getSession().getTransaction().begin();
            	//檢查是否全部的批號 都完成 
                 
        		JobBag jobbag = jobbagService.findById(jobbagNo);
        		
        		Set<JobBagSplite> splites = jobbag.getJobBagSplites();
        		
        		Iterator iterator = splites.iterator();
        		Boolean allCompleted = true;
        		int totalAccounts = 0;
        		int totalPages = 0;
        		int completedTotalAccounts = 0; //已裝封完成的accounts
        		int completedTotalPages = 0;  //已裝封完成的pages
        		
        		String notes = jobbag.getNotes();
        		String lpNotes = "";
        		String mpNotes = "";
        		int blankIndex = 0;
        		if(notes != null && (blankIndex = notes.indexOf("　")) > 0){        			
        			lpNotes = notes.substring(0, blankIndex);
        			mpNotes = notes.substring(blankIndex + 1);        			
        		}

        		while (iterator.hasNext()) {
        			JobBagSplite splite =  (JobBagSplite)iterator.next();
        			if (null!= splite.getLpAccountSeqDiff() )
        				totalAccounts += splite.getLpAccountSeqDiff();
        			
        			if (null!= splite.getLpPagesSeqDiff())
        				totalPages += splite.getLpPagesSeqDiff();
        			
	    	    	if (null==splite.getMpCompletedDateByUser() ){
	    	    		allCompleted = false;
        		    }else{        		    	
        		    	completedTotalAccounts += (splite.getLpAccountSeqDiff() == null) ? 0 : splite.getLpAccountSeqDiff();
        		    	completedTotalPages += (splite.getLpPagesSeqDiff() == null)? 0 : splite.getLpPagesSeqDiff();
	    	    	}
        		}
	    	    if (allCompleted)  {
	    	    	
	    	    	
	    	    	//回覆的accounts 回壓 
	    	    	if((jobbag.getAccounts() == null || jobbag.getAccounts() == 0) && totalAccounts > 0)
	            	   jobbag.setAccounts(totalAccounts);
	            		     
	            	//以回覆的pages 回壓 
	    	    	if((jobbag.getPages() == null || jobbag.getPages() == 0) && totalPages > 0)
	            	   jobbag.setPages(totalPages);     
	            	
                    if(jobbag.getIsLp() != null && jobbag.getIsLp()){
                    	//有列印時需判斷是雙面或單面，在沒有設定張數時，才寫入張數
                    	if((null == jobbag.getSheets() || jobbag.getSheets() == 0 ) && totalPages > 0){
                    	   if(code != null && code.getCodeValueTw() != null && code.getCodeValueTw().indexOf("雙面") >= 0){
            				   jobbag.setSheets(totalPages / 2);
            				   if(totalPages % 2 == 1)
            					   jobbag.setSheets(totalPages / 2 + 1);
                    	   }
            			   if(code != null && code.getCodeValueTw() != null && code.getCodeValueTw().indexOf("單面") >= 0)
            				   jobbag.setSheets(totalPages );
                    	}
        			}else{
        				//無列印直接壓 pages數
        				if((null== jobbag.getSheets() || jobbag.getSheets() == 0) && totalPages > 0)
        				   jobbag.setSheets(totalPages);
        			}
	            	
	    	    	String status = jobbag.getJobBagStatus();
	    	    	if(!"ACCT_DN_GENERATED".equals(status) && !"ACCOUNTING_EP1".equals(status)){
		    	    	if("".equals(lpNotes))
		    	    	   jobbag.setNotes("");
		    	    	else
		    	    	   jobbag.setNotes(lpNotes + "　");
	    	    	}
	    	    	
	    	    	if(!"COMPLETED_LG".equals(status) && !"ACCOUNTING_LOCKED".equals(status) && !"NON_MP".equals(status) && 
	    	    			!"PRINTED_LG_FORM".equals(status) && !"EDD".equals(status) && !"ACCOUNTING_EP1".equals(status) 
    	    				&& !"ACCT_DN_GENERATED".equals(status) && !"ACCOUNTING_EP1".equals(status)){
	    	    	    jobbag.setJobBagStatus("COMPLETED_MP"); //裝封作業已完成
	    	    	}
	    	    	jobbagService.save(jobbag);
	    	    }else{
        			int pages = jobbag.getPages() == null ? 0 : jobbag.getPages();
        			int accounts = jobbag.getAccounts() == null ? 0 : jobbag.getAccounts();
        			int pagesDiff = pages - completedTotalPages;
        			int accountsDiff = accounts - completedTotalAccounts;
        			
        			
        			//裝封判斷要不要刪除多餘splite
        			String status = jobbag.getJobBagStatus();
        			if(!"ACCT_DN_GENERATED".equals(status) && !"ACCOUNTING_EP1".equals(status)){
        			     jobbag.setNotes(lpNotes + "　已裝封完成的pages為 " + completedTotalPages + "(差：" + pagesDiff 
        					   + ")，Accounts為" + completedTotalAccounts + "(差：" + accountsDiff + ")");
        			}
        			if(pagesDiff == 0 && accountsDiff == 0 && accounts != 0 && pages != 0){
        				request.setAttribute("accountsEqual", "MP_ALL_Completed");
        			}
        			if((pagesDiff < 0 || accountsDiff < 0) && accounts != 0 && pages != 0){
        				request.setAttribute("accountsEqual", "MP_ALL_OVER");
        			}       
        			 			
        			jobbagService.save(jobbag);
        			
        		}	    	    
	    	    rootJobBag = jobbag;
        		        		
        	} else if (null!=deptType && deptType.equalsIgnoreCase("LG")) {
        		//壓上  完成帳號/日期 
        		if (null!= employee ) {
            		jobBagSplite.setLgCompletedDateByUser(calendar.getTime());
        			jobBagSplite.setLgCompletedUser(employee.getUserId());
        		}
        		if (null!= employeeMgr ) {
        			jobBagSplite.setLgCompletedManager(employeeMgr.getUserId());
        			jobBagSplite.setLgCompletedDateByManager(calendar.getTime());
        		}		
        		
        		// 回壓 LP 紀錄資訊
        		Integer lpZipCodeBegin = myForm.getLpZipCodeBegin();
        		Integer lpZipCodeEnd = myForm.getLpZipCodeEnd();
        		Integer lpZipCodeDiff = myForm.getLpZipCodeDiff();           		
        		Integer lpBlankBegin = myForm.getLpBlankBegin();
        		Integer lpBlankEnd = myForm.getLpBlankEnd();
        		Integer lpBlankDiff = myForm.getLpBlankDiff();        		
        		Integer lpPaperBegin = myForm.getLpPaperBegin();
        		Integer lpPaperEnd = myForm.getLpPaperEnd();     
        		Integer lpPaperDiff = myForm.getLpPaperDiff();          		
        		Integer lpPagesSeqBegin = myForm.getLpPagesSeqBegin();
        		Integer lpPagesSeqEnd = myForm.getLpPagesSeqEnd();    
        		Integer lpPagesSeqDiff = myForm.getLpPagesSeqDiff();
        		Integer lpPagesSeqExtra = myForm.getLpPagesSeqExtra();
        		Integer lpAccountSeqBegin = myForm.getLpAccountSeqBegin();
        		Integer lpAccountSeqEnd = myForm.getLpAccountSeqEnd();  
        		Integer lpAccountSeqDiff = myForm.getLpAccountSeqDiff();          		
        		
        		jobBagSplite.setLpZipCodeBegin(lpZipCodeBegin);        		
        		jobBagSplite.setLpZipCodeEnd(lpZipCodeEnd);
        		jobBagSplite.setLpZipCodeDiff(lpZipCodeDiff);  
        		
        		jobBagSplite.setLpBlankBegin(lpBlankBegin);        		
        		jobBagSplite.setLpBlankEnd(lpBlankEnd);
        		jobBagSplite.setLpBlankDiff(lpBlankDiff);   
        		
        		jobBagSplite.setLpPaperBegin(lpPaperBegin);
        		jobBagSplite.setLpPaperEnd(lpPaperEnd);
        		jobBagSplite.setLpPaperDiff(lpPaperDiff);    
        		
        		jobBagSplite.setLpPagesSeqBegin(lpPagesSeqBegin);
        		jobBagSplite.setLpPagesSeqEnd(lpPagesSeqEnd);
        		jobBagSplite.setLpPagesSeqDiff(lpPagesSeqDiff);
        		jobBagSplite.setLpPagesSeqExtra(lpPagesSeqExtra);
        		
        		jobBagSplite.setLpAccountSeqBegin(lpAccountSeqBegin);
        		jobBagSplite.setLpAccountSeqEnd(lpAccountSeqEnd);
        		jobBagSplite.setLpAccountSeqDiff(lpAccountSeqDiff);        		
        		
        		String lpMachineName = myForm.getLpMachineName();
        		jobBagSplite.setLpMachineName(lpMachineName);
        		
        		
        		// 回壓 MP 紀錄資訊 MachineName, Damage
        		String mpMachineName = myForm.getMpMachineName();
        		Boolean mpHasDamage = myForm.getMpHasDamage();
        		jobBagSplite.setMpMachineName(mpMachineName);
        		jobBagSplite.setMpHasDamage(mpHasDamage);
        		
        		//若jobBagSplite 有 Damage, 原工單也要押上 Damage
        		if (null!= mpHasDamage && mpHasDamage) {
        			jobBagSplite.getJobBag().setHasDamage(true);
        			jobbagService.save(jobBagSplite.getJobBag());
        		}
        		
        		//System.out.println(jobBagSplite.getLgCompletedDateByUser());
        		jobbagSpliteService.save(jobBagSplite);
            	//HibernateSessionFactory.getSession().getTransaction().commit();
            	
            	
            	//HibernateSessionFactory.getSession().clear();
            	//HibernateSessionFactory.getSession().getTransaction().begin();

        		
            	//檢查是否全部的批號 都完成 
        		JobBag jobbag = jobbagService.findById(jobbagNo);
        		Set<JobBagSplite> splites = jobbag.getJobBagSplites();
        		Iterator iterator = splites.iterator();
        		boolean allCompleted = true;
        		Integer totalPages=0;
        		Integer totalAccounts=0;
        		Integer spliteCounter=0;  

        		while (iterator.hasNext()) {
        			JobBagSplite splite =  (JobBagSplite)iterator.next();
        			if (null!= splite.getLpAccountSeqDiff() )
        				totalAccounts += splite.getLpAccountSeqDiff();
        			
        			if (null!= splite.getLpPagesSeqDiff())
        				totalPages += splite.getLpPagesSeqDiff();
        			
	    	    	if (null==splite.getLgCompletedDateByUser() )
	    	    		allCompleted = false;
	    	    	else
	    	    		spliteCounter = spliteCounter + 1; //若有 LpCompletedDateByUser, 表示這張批號, 有人回覆	    	    		    	    	
        		}
	    	    if (allCompleted)  {    	    		
	    	    	String status = jobbag.getJobBagStatus();
	    	    	if( !"ACCOUNTING_LOCKED".equals(status) && !"ACCT_DN_GENERATED".equals(status) && !"ACCOUNTING_EP1".equals(status) ){
	    	    	    jobbag.setJobBagStatus("COMPLETED_LG"); //交寄作業已完成
	    	    	    jobbag.setNotes("");
	    	    	}
	    	    	jobbag.setCompletedDate(new Date());	    	    	
	    	    	jobbagService.save(jobbag);
	    	    }
        		
        		//當全部 batch 回覆後, 檢查accounts/ pages 必須跟 從logs 抓到的值相同
        		if (allCompleted &&  null != jobbag.getAccounts() && jobbag.getAccounts().compareTo(0) >0 && jobbag.getSpliteCount().compareTo(spliteCounter) ==0) {
        			if (totalAccounts.compareTo(jobBagSplite.getJobBag().getAccounts()) != 0) {
        	            HibernateSessionFactory.getSession().getTransaction().rollback();
        				request.setAttribute("message", "accounts 數 跟 原始資料不合 !! ");
        				return mapping.findForward("message");        				
        			}
        		}
        		if (allCompleted && null!= jobbag.getPages() && jobbag.getPages().compareTo(0) >0 && jobbag.getSpliteCount().compareTo(spliteCounter) ==0) {
        			if (totalPages.compareTo(jobBagSplite.getJobBag().getPages()) != 0) {
        	            HibernateSessionFactory.getSession().getTransaction().rollback();
        				request.setAttribute("message", "pages 數 跟 原始資料不合 !! ");
        				return mapping.findForward("message");        				
        			}
        		}     
        		
        		//當全部 batch 回覆後, 若原始工單 無accounts, 以回覆的accounts 回壓 
        		if ( allCompleted &&  (null == jobbag.getAccounts() || jobbag.getAccounts().compareTo(0) ==0)  && totalAccounts > 0) {
        			jobbag.setAccounts(totalAccounts);
        		}     
        		//當全部 batch 回覆後, 若原始工單 無pages, 以回覆的pages 回壓 
        		if (allCompleted && (null == jobbag.getPages() || jobbag.getPages().compareTo(0) ==0)  && totalPages > 0) {
        			jobbag.setPages(totalPages);
        			if( (null== jobbag.getSheets() || jobbag.getSheets() == 0 )){
        				//如果需要列印，用單雙面去判斷張數
        			   if(jobbag.getIsLp() != null && jobbag.getIsLp()){
                    	   if(code != null && code.getCodeValueTw() != null && code.getCodeValueTw().indexOf("雙面") >= 0){
            				   jobbag.setSheets(totalPages / 2);
            				   if(totalPages % 2 == 1)
            					   jobbag.setSheets(totalPages / 2 + 1);
                    	   }if(code != null && code.getCodeValueTw() != null && code.getCodeValueTw().indexOf("單面") >= 0)
            				   jobbag.setSheets(totalPages );
        			   }else{
           				//不需要列印，直接壓頁數        				   
        				   if((null== jobbag.getSheets() || jobbag.getSheets() == 0) && totalPages != 0 )
        				      jobbag.setSheets(totalPages);
        			   }
        			}
        		}        
        		if(allCompleted){
	    		   jobbagService.save(jobbag);
        		}
        		rootJobBag = jobbag;
        	} 
            HibernateSessionFactory.getSession().getTransaction().commit();
            HibernateSessionFactory.closeSession();
            if(rootJobBag != null){            	
               jobbagSpliteService.updateJobBagSpliteNums(rootJobBag.getAccounts(), rootJobBag.getPages(), rootJobBag.getSheets(), rootJobBag.getJobBagNo());
            }
            
            //引導回回報頁面, 繼續回報下一筆
    		request.setAttribute("employee", employee);
    		request.setAttribute("employeeMgr", employeeMgr);
    		if(rootJobBag == null)
    		   rootJobBag = new JobBag();
    		request.setAttribute("jobbag", rootJobBag);
    		rootJobBag.setLpinfoByIdfLpNo1(null);
    		request.setAttribute("jobbagSplite", jobBagSplite);
    		
    		
            request.setAttribute("ACTION_MODE", "VIEW");    		
            request.setAttribute("message", jobBagSplite.getJobBagSpliteNo() + "完成回報");
            return mapping.findForward("reportStatusInit");
        } catch (Exception e) {
            log.error("", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }

    }    

}