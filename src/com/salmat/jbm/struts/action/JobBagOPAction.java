/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.salmat.jbm.struts.action;

import java.io.IOException;
import java.net.URLEncoder;
import java.sql.Connection;
import java.sql.DriverManager;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.mlw.vlh.ValueList;
import net.mlw.vlh.ValueListInfo;
import net.mlw.vlh.web.ValueListRequestUtil;
import net.sf.json.JSONArray;


import org.apache.commons.beanutils.BeanUtils;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.action.DynaActionForm;
import org.apache.struts.actions.DispatchAction;
import org.hibernate.Session;
import org.hibernate.Transaction;

import com.salmat.jbm.bean.LpinfoJSON;
import com.salmat.jbm.hibernate.*;
import com.salmat.jbm.service.*;
import com.salmat.jbm.struts.form.*;
import com.salmat.jbm.hibernate.HibernateSessionFactory;
import com.painter.util.Global;
import com.painter.util.SessionUtil;
import com.painter.util.Util;

import net.sf.jasperreports.engine.*;
import net.sf.jasperreports.engine.export.*;
import java.util.*;



/**
 * MyEclipse Struts Creation date: 02-23-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action parameter="fid" validate="true"
 * @struts.action-forward name="init" path=".findUserAccount"
 */
public class JobBagOPAction extends DispatchAction {
    /*
     * Generated Methods
     */
	private static final HistoryReportService historyReportService = HistoryReportService.getInstance();		
	private static final LPInfoService lpinfoService = LPInfoService.getInstance();
	private static final MPInfoService mpinfoService = MPInfoService.getInstance();
	private static final PSInfoService psinfoService = PSInfoService.getInstance();
	private static final LGInfoService lginfoService = LGInfoService.getInstance();
	private static final ReturnInfoService returninfoService = ReturnInfoService.getInstance();
	private static final LCInfoService lcinfoService = LCInfoService.getInstance();
	private static final JobCodeService jobcodeService = JobCodeService.getInstance();
    private static final JobBagService jobbagService = JobBagService.getInstance();
	private static final JobBagSpliteService jobbagSpliteService = JobBagSpliteService.getInstance();    
    private static final CustomerService customerService = CustomerService.getInstance();
    private static final CodeService codeService = CodeService.getInstance();
    private static ValueListService valueListService = ValueListService.getInstance();    
    private static Logger log = Logger.getLogger(JobBagOPAction.class);
    private static final EmployeeService employeeService = EmployeeService.getInstance();    
    private static final SyslogService syslogService = SyslogService.getInstance();

    /**
     * Method execute
     * 
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    protected ActionForward unspecified(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) {

        return mapping.findForward("homepage");
    }


    
    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
    	ActionMessages messages = new ActionMessages();
        JobBagForm myForm = (JobBagForm) form;

        try {
        	ValueList dataList = getValueList(request, myForm,"jobbagList_OP");
            request.setAttribute("dataList", dataList);
            
            String job_bag_nos = "";
            for(Object obj : dataList.getList()){
            	job_bag_nos += "'" + BeanUtils.getProperty(obj, "job_bag_no") + "',";
            }
            request.setAttribute("idList", job_bag_nos);
            
            String backToListURL = request.getRequestURI() +"?" + request.getQueryString();
            //request.getSession().setAttribute("backToListURL", backToListURL);             
            request.setAttribute("backToListURL", URLEncoder.encode(backToListURL, "UTF-8"));
        } catch (Exception e) {
            log.error("", e);
            messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
                    Global.MESSAGE_SYSTEMERROR_KEY));
            this.saveMessages(request, messages);
            return mapping.findForward(Global.FORWARD_INCLUDE_MESSAGE_KEY);
        }
        return mapping.findForward("list");
    }

    
    public ActionForward view(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        JobBagForm myForm = (JobBagForm) form;
        String jobBagNo = myForm.getJobBagNo();
        
        try {
        	JobBag jobbag = jobbagService.findById(jobBagNo);
        	

        	List lplist = customerService.getCustomerLPList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("lpinfoJSON", lplist);  
    		
        	List mplist = customerService.getCustomerMPList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("mpinfoJSON", mplist);    		
    		
        	List pslist = customerService.getCustomerPSList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("psinfoJSON", pslist);    		
    		
        	List lglist = customerService.getCustomerLGList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("lginfoJSON", lglist);    		
    		
        	List returnlist = customerService.getCustomerReturnList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("returninfoJSON", returnlist);    		
    		
        	List lclist = customerService.getCustomerLCList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("lcinfoJSON", lclist);    		
    		
        	request.setAttribute("ACTION_MODE", "VIEW");
            request.setAttribute("jobbag", jobbag);

        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("editInit");
    }

    
    /**
     * Method listReturn
     * 批次列印+分檔 action
     */  
    public ActionForward batchPrintSumbit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        JobBagForm myForm = (JobBagForm) form;


        try {
        	HibernateSessionFactory.getSession().clear();
        	HibernateSessionFactory.getSession().getTransaction().begin();
        	
        	
        	@SuppressWarnings("deprecation")
			Connection conn= HibernateSessionFactory.getSession().connection();  
        	
        	
        	String jobBagNos[] = myForm.getJobBagNos();
        	Integer spliteCounts[]= myForm.getSpliteCounts();

        	
        	if (null ==jobBagNos ) {
                request.setAttribute("message", "無勾選工單");
                return mapping.findForward("message");        		
        	}
        	
        	String jobBagList=null;
        	Set<String> jobbagspliteNoSet = new HashSet();
        	for (int i=0;i<jobBagNos.length;i++) {
        		String[] tokens = jobBagNos[i].split(";"); //jobCodeNo;row_index
        		String jobBagNo = tokens[0];//jobBagNo
        		Integer row_index = Integer.parseInt(tokens[1]);//row_index
        		JobBag jobbag = jobbagService.findById(jobBagNo);
        		String lineData = null;
        		Set<JobBagSplite> spliteSet = jobbag.getJobBagSplites();
        		if(spliteSet != null)
        		   for(JobBagSplite jobbagSplite : spliteSet){
        			    if(jobbagSplite.getLineData() != null && !jobbagSplite.getLineData().trim().equals("")){
        				   lineData = jobbagSplite.getLineData();
        				   break;
        			   }
        		   }
        		

        		
        		if (null == jobBagList)
        			jobBagList = "'" + jobbag.getJobBagNo()+"'";
        		else
        			jobBagList = jobBagList +  ", '" + jobbag.getJobBagNo()+"'";
        		
        		
        		//取得系統時間
    			Calendar calendar = Calendar.getInstance();
    			Date now = new Date();
    			calendar.setTime(now);
        		
        		NumberFormat nf = NumberFormat.getInstance();
    			nf.setMaximumIntegerDigits(3);
    			nf.setMinimumIntegerDigits(3);

    			boolean updateSuccess = false;    			
    			if(spliteCounts[row_index] != 0 && jobbag.getSpliteCount() > spliteCounts[row_index] && "INIT".equals(jobbag.getJobBagStatus())){
        			//刪除已分檔工單
        			for(int s = 1 ; s <= jobbag.getSpliteCount() ; s++){
        				if(s > spliteCounts[row_index]){
        					JobBagSplite jobBagSplite = jobbagSpliteService.findById(jobbag.getJobBagNo() + nf.format(s));
        					if(jobBagSplite != null)
        					    jobbagSpliteService.delete(jobBagSplite);
        					updateSuccess = true;
        				}        				
        			}        		    
        		}
    			//原JobBagSplite 押上 print date/ print counter
        		Set<JobBagSplite> splites = jobbag.getJobBagSplites();
        		Iterator iterator = splites.iterator();
        		while (iterator.hasNext()) {
        			JobBagSplite jobBagSplite =  (JobBagSplite)iterator.next();
	    	    	
	        		Integer printingCount =1;
	        		if (null == jobBagSplite.getPrintingCount() || jobBagSplite.getPrintingCount() == 0){
	        			jobbagspliteNoSet.add(jobBagSplite.getJobBagSpliteNo());
	        			printingCount =  1; 
	    	    	    jobBagSplite.setPrintingCount(printingCount);
	    			    jobBagSplite.setLatestPrintingDate(calendar.getTime());
	    			    jobBagSplite.setAfpFilename(jobbag.getAfpName()); //批次分檔的afpName 押上原來rootJobBag.afp 檔名
	    	    	    jobbagSpliteService.save(jobBagSplite);
	        		}
        		}
        		if (jobbag.getSpliteCount() == null || jobbag.getSpliteCount() < spliteCounts[row_index] ) { //只針對新的 SpliteCount > 原 SpliteCount 才處理
        			if(jobbag.getSpliteCount() == null)
        				jobbag.setSpliteCount(0);
                    if("INIT".equals(jobbag.getJobBagStatus())){
	    				Set<JobBagSplite> jobBagSplites = jobbag.getJobBagSplites();
	    				for(JobBagSplite jobBagSplite: jobBagSplites){
	    					jobBagSplite.setLpZipCodeBegin(0);
	    					jobBagSplite.setLpZipCodeEnd(0);
	    					jobBagSplite.setLpZipCodeDiff(0);
	    					
	    					jobBagSplite.setLpBlankBegin(0);
	    					jobBagSplite.setLpBlankEnd(0);
	    					jobBagSplite.setLpBlankDiff(0);
	    					
	    					jobBagSplite.setLpPaperBegin(0);
	    					jobBagSplite.setLpPaperEnd(0);
	    					jobBagSplite.setLpPaperDiff(0);
	    					
	    					jobBagSplite.setLpPagesSeqBegin(0);
	    					jobBagSplite.setLpPagesSeqEnd(0);
	    					jobBagSplite.setLpPagesSeqDiff(0);
	    					jobBagSplite.setLpPagesSeqExtra(0);
	    					
	    					jobBagSplite.setLpAccountSeqBegin(0);
	    					jobBagSplite.setLpAccountSeqEnd(0);
	    					jobBagSplite.setLpAccountSeqDiff(0);
	    					jobbagSpliteService.save(jobBagSplite);
	    				}
	    			}
	    			//產生 分檔批次 
	    			for (int s=jobbag.getSpliteCount()+1 ; s<=spliteCounts[row_index] ; s++) {
		    	    	JobBagSplite jobBagSplite = new JobBagSplite();		    	    	
		    	    	jobBagSplite.setJobBag(jobbag);
		    			jobBagSplite.setPages(jobbag.getPages());
		    			jobBagSplite.setAccounts(jobbag.getAccounts());
		    			jobBagSplite.setSheets(jobbag.getSheets());
		    			jobBagSplite.setReceiveDate(jobbag.getReceiveDate());
		    			jobBagSplite.setJobBagSpliteNo(jobbag.getJobBagNo().toUpperCase()
		    					+ nf.format(s));
		    			jobbagspliteNoSet.add(jobBagSplite.getJobBagSpliteNo());
		    			jobBagSplite.setLineData(lineData);
		    	    	jobBagSplite.setLogFilename(jobbag.getLogFilename());
		    			calendar.setTime(now);
		    	    	jobBagSplite.setPrintingCount(1);
		    	    	jobBagSplite.setAfpFilename(jobbag.getAfpName());
		    	    	jobBagSplite.setLatestPrintingDate(calendar.getTime());
		    	    	jobbagSpliteService.save(jobBagSplite);
		    	    	updateSuccess = true;
	    			}	
        		}
        		
        		if(spliteCounts[row_index] != 0 && updateSuccess)
    			    jobbag.setSpliteCount(spliteCounts[row_index]);//設定分檔批次
    			if (jobbag.getJobBagStatus().equalsIgnoreCase("INIT"))
    				jobbag.setJobBagStatus("PRINTED_LP"); //已列印工單    			
    			jobbagService.save(jobbag);

        	}
        	
    		// 需先commit tran, 之後的report 才成抓到 commit 後的資料
            HibernateSessionFactory.getSession().getTransaction().commit();        	
        	
        	
    	
        	HibernateSessionFactory.getSession().clear();
        	HibernateSessionFactory.getSession().getTransaction().begin();            
    		//產生PDF 檔
        	String serverPath = request.getSession().getServletContext().getRealPath("");;
            String fileName = serverPath + "\\report\\job_bag.jasper";
            String pdfFileName = new SimpleDateFormat("yyyyMMddHHmmssMs").format(new Date())+".pdf";

            String outFileName = serverPath +"\\pdf\\"+pdfFileName;
            String jbmHome = Util.getString("jbm.home.local") + "PostageImage\\";            
            HashMap hm = new HashMap();
            hm.put("jbmHome", jbmHome);
            String jobBagSpliteList = "";
            if(jobbagspliteNoSet == null || jobbagspliteNoSet.size() == 0){
            	request.setAttribute("message", "您挑選的工單均已列印過，請使用單張功能重印 ");
    			return mapping.findForward("message");
            }
            Iterator<String> it = jobbagspliteNoSet.iterator();
            while(it.hasNext()){
            	jobBagSpliteList += ("'" + it.next() + "'");
            	if(it.hasNext())
            		jobBagSpliteList += ", ";
            }
            hm.put("jobbagList",  "''");            
            hm.put("jobbagSpliteList",jobBagSpliteList );
            /*
            hm.put("jobbagList", jobBagList);            
            hm.put("jobbagSpliteList", "''");
            */
            try {
                JasperPrint print = JasperFillManager.fillReport(fileName, hm, conn);

                // Create a PDF exporter
                JRExporter exporter = new JRPdfExporter();
                
                // Configure the exporter (set output file name and print object)
                exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, outFileName);
                exporter.setParameter(JRExporterParameter.JASPER_PRINT, print);

                
                // Export the PDF file
                exporter.exportReport();
                
                // 埋入HistoryReport
                HistoryReport historyReport = new HistoryReport();
                historyReport.setReportName(pdfFileName);
                historyReport.setPdfPath(outFileName);
                Employee employee = SessionUtil.getAccount(request.getSession());
                historyReport.setEmpNo(employee.getEmpNo());
                Calendar today = Calendar.getInstance();
                historyReport.setCreateDate(today.getTime());
                historyReportService.save(historyReport);
                // end HistoryReport                
                
                HibernateSessionFactory.getSession().getTransaction().commit();                     
            } catch (JRException e) {
            	log.error("", e);
                e.printStackTrace();
                HibernateSessionFactory.getSession().getTransaction().rollback();
            } catch (Exception e) {
            	log.error("", e);
                e.printStackTrace();
                HibernateSessionFactory.getSession().getTransaction().rollback();
            }       
            Employee employee = SessionUtil.getAccount(request.getSession());
            SysLog syslog = new SysLog();
    		syslog.setLogType("Job_Splite");
    		syslog.setSubject("列印加批次分檔");
    		Date today = new Date();
    		syslog.setMessageBody(employee.getEmpNo() + ":" + employee.getUserId() + ":" + pdfFileName);
    	    syslog.setCreateDate(today);
    		syslogService.save(syslog);

            request.setAttribute("message", "批次分檔成功");
            request.setAttribute("pdfFileName", pdfFileName);
            return mapping.findForward("pdfDownload");
        } catch (Exception e) {
            log.error("", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
            
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }finally{
        	if(HibernateSessionFactory.getSession().isOpen())
        		HibernateSessionFactory.closeSession();
        }
        //return mapping.findForward("viewAccount");
    }        
    
    public ActionForward updateJobBagStatus(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {

    	response.setContentType("text/json;charset=UTF-8");
    	ActionMessages messages = new ActionMessages();
        JobBagForm myForm = (JobBagForm) form;
        String jsonString = "";
        String jobBagNos = request.getParameter("idList");
        List<Map<String, String>> retJobs = null;
        if(jobBagNos != null && jobBagNos.endsWith(",")){
        	jobBagNos = jobBagNos.substring(0, jobBagNos.length() - 1);
            retJobs = jobbagService.findJobBagInList(jobBagNos);
        
            try {
        	    JSONArray json = JSONArray.fromObject(retJobs);
        	    jsonString = json.toString();
			    response.getWriter().write(jsonString);
        	
		    } catch (IOException e) {
                log.error("", e);
			    e.printStackTrace();
		    }
        }
        return null;    
    }
    
    /**
     * Method listReturn
     * 分檔 action
     */    
    public ActionForward SpliteSumbit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        JobBagForm myForm = (JobBagForm) form;
    	NumberFormat nf = NumberFormat.getInstance();
		nf.setMaximumIntegerDigits(3);
		nf.setMinimumIntegerDigits(3);


        try {
        	HibernateSessionFactory.getSession().clear();
        	HibernateSessionFactory.getSession().getTransaction().begin();
        	
        	
        	String jobBagNo = myForm.getJobBagNo();
        	Integer spliteCount= myForm.getSpliteCount();
        	Integer maxSpliteCount = spliteCount;



    		JobBag jobbag = jobbagService.findById(jobBagNo);
    		String lineData = null;
    		if(jobbag.getJobBagSplites() != null){
    			jobbag.setSpliteCount(jobbag.getJobBagSplites().size());
    			Set<JobBagSplite> jobbagSplites = jobbag.getJobBagSplites();
    			for(JobBagSplite jobbagSplite : jobbagSplites){
    				if(jobbagSplite.getLineData() != null && !"".equals(jobbagSplite.getLineData())){
    					lineData = jobbagSplite.getLineData();
    					break;
    				}
    			}
    		}
    		boolean updateSuccess = false;
    		int spliteGeneratedNo = 0;
    		if (jobbag.getSpliteCount() == null || jobbag.getSpliteCount() < spliteCount ) { //只針對新的 SpliteCount > 原 SpliteCount 才處理
    			if(jobbag.getSpliteCount() == null)
    				jobbag.setSpliteCount(0);
    			//工單初始狀態時，分檔後把預設的這些值都清掉
                if("INIT".equals(jobbag.getJobBagStatus())){
    				Set<JobBagSplite> jobBagSplites = jobbag.getJobBagSplites();
    				for(JobBagSplite jobBagSplite: jobBagSplites){
    					jobBagSplite.setLpZipCodeBegin(0);
    					jobBagSplite.setLpZipCodeEnd(0);
    					jobBagSplite.setLpZipCodeDiff(0);
    					
    					jobBagSplite.setLpBlankBegin(0);
    					jobBagSplite.setLpBlankEnd(0);
    					jobBagSplite.setLpBlankDiff(0);
    					
    					jobBagSplite.setLpPaperBegin(0);
    					jobBagSplite.setLpPaperEnd(0);
    					jobBagSplite.setLpPaperDiff(0);
    					
    					jobBagSplite.setLpPagesSeqBegin(0);
    					jobBagSplite.setLpPagesSeqEnd(0);
    					jobBagSplite.setLpPagesSeqDiff(0);
    					jobBagSplite.setLpPagesSeqExtra(0);
    					
    					jobBagSplite.setLpAccountSeqBegin(0);
    					jobBagSplite.setLpAccountSeqEnd(0);
    					jobBagSplite.setLpAccountSeqDiff(0);
    					jobbagSpliteService.save(jobBagSplite);
    				}
    			}
    			
    			//產生 分檔批次 
    			for (int s = 1 ; s <= maxSpliteCount ; s++) {
	    	    	String spliteNo ="";
	    			spliteNo = nf.format(s);	    			
	    				    	    	
	    	    	//檢查此批號是否存在
	    	    	JobBagSplite _jobBagSplite = jobbagSpliteService.findById(jobbag.getJobBagNo() + spliteNo);
	    	    	
	    	    	if (null ==_jobBagSplite) {
		    	    	JobBagSplite jobBagSplite = new JobBagSplite();
		    	    	jobBagSplite.setJobBag(jobbag);
		    			jobBagSplite.setPages(jobbag.getPages());
		    			jobBagSplite.setAccounts(jobbag.getAccounts());
		    			jobBagSplite.setSheets(jobbag.getSheets());
		    			jobBagSplite.setReceiveDate(jobbag.getReceiveDate());
		    	    	jobBagSplite.setLineData(lineData);
		    	    	jobBagSplite.setLogFilename(jobbag.getLogFilename());
		    	    	jobBagSplite.setJobBagSpliteNo(jobbag.getJobBagNo().toUpperCase()+spliteNo);
		    	    	jobBagSplite.setAfpFilename(jobbag.getAfpName()); //批次分檔的afpName 押上原來rootJobBag.afp 檔名
		    	    	jobbagSpliteService.save(jobBagSplite);
		    	    	spliteGeneratedNo ++;
		    	    } 
	    	    	if(spliteGeneratedNo + jobbag.getSpliteCount() >= maxSpliteCount)
	    	    		break;
    			}
    			
    			
    			jobbag.setSpliteCount(spliteCount);
    			jobbagService.save(jobbag);
    		}else if(jobbag.getSpliteCount() > spliteCount && spliteCount > 0 ){
    			//刪除已分檔工單
    			/*
    			for(int s = 1 ; s <= jobbag.getSpliteCount() ; s++){
    				if(s > spliteCount){
    					JobBagSplite jobBagSplite = jobbagSpliteService.findById(jobbag.getJobBagNo() + nf.format(s));
    					if(jobBagSplite != null)
    					    jobbagSpliteService.delete(jobBagSplite);
    					updateSuccess = true;
    				}        				
    			}    		
    			jobbag.setSpliteCount(spliteCount);
    			*/
    			request.setAttribute("message", "輸入數字小於原有分檔支數，如欲刪除分檔批次，請使用刪除鍵");
    			return mapping.findForward("message");
    		}else if( spliteCount <= 0 ){
    			request.setAttribute("message", "工單分檔不可為零或負數");
    			return mapping.findForward("message");
    		}
    		

            List lplist = customerService.getCustomerLPList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("lpinfoJSON", lplist);  
    		
        	List mplist = customerService.getCustomerMPList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("mpinfoJSON", mplist);    		
    		
        	List pslist = customerService.getCustomerPSList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("psinfoJSON", pslist);    		
    		
        	List lglist = customerService.getCustomerLGList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("lginfoJSON", lglist);    		
    		
        	List returnlist = customerService.getCustomerReturnList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("returninfoJSON", returnlist);    		
    		
        	List lclist = customerService.getCustomerLCList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("lcinfoJSON", lclist);
    		
        	
            HibernateSessionFactory.getSession().getTransaction().commit();
            
                		
    		
        	request.setAttribute("ACTION_MODE", "VIEW");
            request.setAttribute("jobbag", jobbag);

            request.setAttribute("message", "分檔成功");
            Employee employee = SessionUtil.getAccount(request.getSession());
            SysLog syslog = new SysLog();
    		syslog.setLogType("Job_Splite");
    		syslog.setSubject("工單分檔");
    		syslog.setMessageBody(employee.getEmpNo() + ":" + employee.getUserId() + ":" + jobBagNo + ": 產生" + spliteGeneratedNo + "分檔");
    	    syslog.setCreateDate(new Date());
    		syslogService.save(syslog);
            
            return mapping.findForward("editInit");
        } catch (Exception e) {
            log.error("", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
            
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }finally{
        	if(HibernateSessionFactory.getSession().isOpen())
        		HibernateSessionFactory.closeSession();
        }
        
        
        //return mapping.findForward("viewAccount");
    }        
    
    
    
    /**
     * Method listReturn
     * 列印工單批號 action
     * input: 工單批號 清單
     */  
    public ActionForward printJobBagSumbit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        JobBagForm myForm = (JobBagForm) form;


        try {
        	HibernateSessionFactory.getSession().clear();
        	HibernateSessionFactory.getSession().getTransaction().begin();
        	
        	JobBag jobbag = null;
        	
        	@SuppressWarnings("deprecation")
			Connection conn= HibernateSessionFactory.getSession().connection();  
        	
        	
        	String jobBagSpliteNos[] = myForm.getJobBagSpliteNos();
        	if (null ==jobBagSpliteNos ) {
                request.setAttribute("message", "無勾選工單批號");
                return mapping.findForward("message");        		
        	}
        	
        	String jobBagSpliteList="";
        	for (int i=0;i<jobBagSpliteNos.length;i++) {
        		String jobBagSpliteNo = jobBagSpliteNos[i]; //jobBagSpliteNo
        		
        		if (null != jobBagSpliteNo && jobBagSpliteList.length() > 0)
        			jobBagSpliteList = jobBagSpliteList +  ", '" + jobBagSpliteNo+"'";
        		else
        			jobBagSpliteList = "'" + jobBagSpliteNo+"'";
        		
        		
        		//取得系統時間
    			Calendar calendar = Calendar.getInstance();
    			Date now = new Date();
    			calendar.setTime(now);    			
    			
    			
    			//押上 print date/ print counter
        		JobBagSplite jobBagSplite = jobbagSpliteService.findById(jobBagSpliteNo);
        		Integer printingCount =1;
        		
        		if (null !=jobBagSplite.getPrintingCount())
        			printingCount = jobBagSplite.getPrintingCount() + 1; 
    	    	jobBagSplite.setPrintingCount(printingCount);
    	    	jobBagSplite.setLatestPrintingDate(calendar.getTime());
    	    	jobbagSpliteService.save(jobBagSplite);
    	    	
        		jobbag = jobBagSplite.getJobBag(); //取得jobbag instance

        	}
        	
        	//檢查該工單 是否全部已經列印 
    		Set<JobBagSplite> splites = jobbag.getJobBagSplites();
    		Iterator iterator = splites.iterator();
    		Boolean allCompleted = true;
    		while (iterator.hasNext()) {
    			JobBagSplite splite =  (JobBagSplite)iterator.next();
    	    	if (null==splite.getLatestPrintingDate() )
    	    		allCompleted = false;
    	    	
    	    	if (allCompleted)  {
        			if (jobbag.getJobBagStatus().equalsIgnoreCase("INIT"))
        				jobbag.setJobBagStatus("PRINTED_LP"); //已列印工單    
    	    		jobbagService.save(jobbag);
    	    	}
    		}  
    		
    		// 需先commit tran, 之後的report 才成抓到 commit 後的資料
            HibernateSessionFactory.getSession().getTransaction().commit();
            
    	
        	HibernateSessionFactory.getSession().clear();
        	HibernateSessionFactory.getSession().getTransaction().begin();
    		//產生PDF 檔
        	String serverPath = request.getSession().getServletContext().getRealPath("");;
            String fileName = serverPath + "\\report\\job_bag.jasper";
            String pdfFileName = new SimpleDateFormat("yyyyMMddHHmmssMs").format(new Date())+".pdf";

            String outFileName = serverPath +"\\pdf\\"+pdfFileName;
            String jbmHome = Util.getString("jbm.home.local") + "PostageImage\\";      
            
            HashMap hm = new HashMap();
            hm.put("jbmHome", jbmHome);             
            hm.put("jobbagList",  "''");
            hm.put("jobbagSpliteList",jobBagSpliteList );
            try {
                JasperPrint print = JasperFillManager.fillReport(fileName, hm, conn);

                // Create a PDF exporter
                JRExporter exporter = new JRPdfExporter();
                
                // Configure the exporter (set output file name and print object)
                exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, outFileName);
                exporter.setParameter(JRExporterParameter.JASPER_PRINT, print);

                
                // Export the PDF file
                exporter.exportReport();
                
                // 埋入HistoryReport
                HistoryReport historyReport = new HistoryReport();
                historyReport.setReportName(pdfFileName);
                historyReport.setPdfPath(outFileName);
                Employee employee = SessionUtil.getAccount(request.getSession());
                historyReport.setEmpNo(employee.getEmpNo());
                Calendar today = Calendar.getInstance();
                historyReport.setCreateDate(today.getTime());
                historyReportService.save(historyReport);
                // end HistoryReport
                HibernateSessionFactory.getSession().getTransaction().commit();                
                
                
            } catch (JRException e) {
                e.printStackTrace();
                HibernateSessionFactory.getSession().getTransaction().rollback();
            } catch (Exception e) {
                e.printStackTrace();
                HibernateSessionFactory.getSession().getTransaction().rollback();
            } 
        	

            request.setAttribute("message", "列印成功");
            request.setAttribute("pdfFileName", pdfFileName);
            return mapping.findForward("pdfDownload");
        } catch (Exception e) {
            log.error("", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        //return mapping.findForward("viewAccount");
    }        
    
    

    /**
     * Method listReturn
     * 刪除工單批次 action
     */    
    public ActionForward deleteJobBagSplite(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        JobBagForm myForm = (JobBagForm) form;
        String jobBagSpliteNo = myForm.getJobBagSpliteNo();

        Session session = null;
        try {
        	session = HibernateSessionFactory.getSession();
        	JobBagSplite jobBagSplite = (JobBagSplite)session.get("com.salmat.jbm.hibernate.JobBagSplite", jobBagSpliteNo);
        	if(jobBagSplite == null){
        		request.setAttribute("message", jobBagSpliteNo + "此工單批次已被刪除");  
    			return mapping.findForward("message"); 
        	}
        	if(jobBagSplite.getJobBag() == null){
        		request.setAttribute("message", jobBagSpliteNo + "無法找到此工單批次的母工單，請檢查資料庫資料的完整性");  
    			return mapping.findForward("message");
        	}
        	Code code = jobBagSplite.getJobBag().getCodeByLpCodePrintType();
        	JobBag rootJobBag = jobBagSplite.getJobBag();
        	String jobBagStatus = rootJobBag.getJobBagStatus();
        	String jobBagNo = rootJobBag.getJobBagNo(); 
        	/*
            if(jobBagSplite.getLpCompletedDateByUser() != null || jobBagSplite.getMpCompletedDateByUser() != null || jobBagSplite.getLgCompletedDateByUser() != null){
            	if(jobBagSplite.getLgCompletedDateByUser() != null)
            	   request.setAttribute("message", "此工單批次已被記錄交寄完成，不可刪除");  
            	if(jobBagSplite.getMpCompletedDateByUser() != null)
             	   request.setAttribute("message", "此工單批次已被記錄（裝封／壓封）完成，不可刪除");
            	if(jobBagSplite.getLpCompletedDateByUser() != null)
              	   request.setAttribute("message", "此工單批次已被記錄列印完成，不可刪除");
    			return mapping.findForward("message");
            }
            */
            if(rootJobBag.getJobBagSplites() != null && rootJobBag.getJobBagSplites().size() == 1){
            	request.setAttribute("message", "此工單只有一個批次，不可刪除");
            	//request.setAttribute("extraMsg", "此工單只有一個批次，不可刪除");
    			return mapping.findForward("message");
            }
            
            Transaction tx = session.getTransaction();
            tx.begin();
        	session.delete(jobBagSplite);
        	tx.commit();
        	session.clear();        
        	tx.begin();
        	rootJobBag =  (JobBag)session.get("com.salmat.jbm.hibernate.JobBag", jobBagNo);
        	int splitesSize = rootJobBag.getJobBagSplites() == null ? 0 : rootJobBag.getJobBagSplites().size();
        	String extraMsg = "";
       	    //不能被倒退回去，故檢查狀態
        	if(!"ACCOUNTING_LOCKED".equals(jobBagStatus) && !"ACCOUNTING_EP1".equals(jobBagStatus) && !"ACCT_DN_GENERATED".equals(jobBagStatus) && !"EDD".equals(jobBagStatus)){ 
        		//刪除後檢查是不是所有批次都已完成，如果所有批次都完成就更新狀態
        	   Set<JobBagSplite> jobBagSplites =  rootJobBag.getJobBagSplites();
        	   if(splitesSize != 0){
        		  Date newestCompletedDate = null; //完成時間 
        	      boolean allLp = true;
        	      boolean allMp = true;
        	      boolean allLg = true;
        	      int accounts = 0;
        	      int pages = 0;
        	      for(JobBagSplite jobBagSp : jobBagSplites){
        	    	  accounts += (jobBagSp.getLpAccountSeqDiff() == null)? 0: jobBagSp.getLpAccountSeqDiff();
        	    	  pages += (jobBagSp.getLpPagesSeqDiff() == null)? 0: jobBagSp.getLpPagesSeqDiff();
        		      if(jobBagSp.getLpCompletedDateByUser() == null){
        			      allLp = false;
        		      }
        		      if(jobBagSp.getMpCompletedDateByUser() == null){
        			      allMp = false;
        		      }
        		      if(jobBagSp.getLgCompletedDateByUser() == null){
        			      allLg = false;
        		      }else{
        		    	  if(newestCompletedDate == null || newestCompletedDate.getTime() < jobBagSp.getLgCompletedDateByUser().getTime())
        		    		  newestCompletedDate = jobBagSp.getLgCompletedDateByUser();
        		      }        		              		      
        	      }
        	      int rootSheets = (rootJobBag.getSheets() == null)? 0 : rootJobBag.getSheets();
        	      if(allLg || allMp || allLp){
        	    	//某一項全部完成後，如果Jobbag的紙張數為0時，要重新計算紙張數
        	    	  if(rootSheets == 0){
            			  if(code != null && code.getCodeValueTw() != null && code.getCodeValueTw().indexOf("雙面") >= 0){
            				  rootJobBag.setSheets(pages / 2);            				  
           				      if(pages % 2 == 1)
           					     rootJobBag.setSheets(pages / 2 + 1);
            			  }
            			  if(code != null && code.getCodeValueTw() != null && code.getCodeValueTw().indexOf("單面") >= 0)
            				  rootJobBag.setSheets(pages);
         		      }
        	      }
        	      //如果accounts和pages本來是0，就重新設定頁數和accounts
        	      if((rootJobBag.getAccounts() == null ? 0 : rootJobBag.getAccounts().intValue()) == 0){
        	    	  rootJobBag.setAccounts(accounts);
        	      }
        	      if((rootJobBag.getPages() == null ? 0 : rootJobBag.getPages().intValue()) == 0){
        	    	  rootJobBag.setPages(pages);
        	      }
        	      
        	      if(accounts != (rootJobBag.getAccounts() == null ? 0 : rootJobBag.getAccounts().intValue())){
        	    	  extraMsg += "。注意此工單所有批次加總後的accounts數字為" + accounts + "，與原始工單的" + rootJobBag.getAccounts() + "不符，請手動修改";        	    	  
        	      }
        	      if(pages != (rootJobBag.getPages() == null ? 0 : rootJobBag.getPages().intValue())){        	    	  
        	    	  extraMsg += "。注意此工單所有批次加總後的頁數為" + pages + "與原始工單的" + rootJobBag.getPages() + "不符，請手動修改";        	    	  
        	      }
        	      
        	      
        	      if("".equals(extraMsg)){
        	    	  if(!"ACCT_DN_GENERATED".equals(jobBagStatus) && !"ACCOUNTING_EP1".equals(jobBagStatus))
    	    		     rootJobBag.setNotes("");
    	    	  }
        	      if(allLg){
        	    	  jobBagStatus = "COMPLETED_LG";
        	    	  rootJobBag.setCompletedDate(newestCompletedDate);
        	      }else if(!"PRINTED_LG_FORM".equals(jobBagStatus)){ //已印出交寄管制表的狀態是在完成裝封及完成列印之後，所以不能被倒退回去
        	    	  if(allMp){
        	    		  jobBagStatus = "COMPLETED_MP";
        	    		  
            	      }else if(allLp){
            	    	  jobBagStatus = "COMPLETED_LP";
            	      }
        	    	  
        	      }
        	   }
        	   
        	}
        	rootJobBag.setJobBagStatus(jobBagStatus);
        	rootJobBag.setSpliteCount(splitesSize);
            session.save(rootJobBag);
            tx.commit();
            
            
            request.setAttribute("ACTION_MODE", "VIEW");
            request.setAttribute("jobbag", rootJobBag);
            request.setAttribute("message", "刪除成功");
            if(!"".equals(extraMsg) && !"INIT".equals(jobBagStatus) && !"NON_LP".equals(jobBagStatus) && !"PRINTED_LP".equals(jobBagStatus)){            	
            	request.setAttribute("extraMsg", extraMsg);	
            }
            Employee employee = SessionUtil.getAccount(request.getSession());
            SysLog syslog = new SysLog();
    		syslog.setLogType("Del_Job_Splite");
    		syslog.setSubject("刪除工單分檔");
    		syslog.setMessageBody(employee.getEmpNo() + ":" + employee.getUserId() + "刪除" + jobBagSpliteNo);
    	    syslog.setCreateDate(new Date());
    		syslogService.save(syslog);
            
            return mapping.findForward("editInit");
        } catch (Exception e) {
            log.error("delete catch exception", e);
            if(session != null)
               session.getTransaction().rollback();
        	request.setAttribute("message", "資料被引用, 不能刪除");  
			return mapping.findForward("message");
        }finally{
        	if(session != null && session.isOpen())
        		session.close();
        }
    }    
    
    /**
     * Method listReturn
     * 批次記錄完成 action
     */    
    public ActionForward batchCompletedMPSumbit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        JobBagForm myForm = (JobBagForm) form;
        
        Employee employee = new Employee();
    	employee = SessionUtil.getAccount(request);
    	String mpMachineName = myForm.getMpMachineName();
    	List<String> cannotUpdateJobBags = new ArrayList<String>();
        try {
        	HibernateSessionFactory.getSession().clear();
        	HibernateSessionFactory.getSession().getTransaction().begin();
        	

        	String jobBagNos[] = myForm.getJobBagNos();

        	
        	if (null ==jobBagNos ) {
                request.setAttribute("message", "無勾選工單");
                return mapping.findForward("message");        		
        	}
        	
        	
    		//取得系統時間
			Calendar calendar = Calendar.getInstance();
			Date now = new Date();
			calendar.setTime(now); 
			
			
        	String jobBagList=null;
        	for (int i=0;i<jobBagNos.length;i++) {
        		String[] tokens = jobBagNos[i].split(";"); //jobCodeNo;row_index
        		String jobBagNo = tokens[0];//jobBagNo
        		Integer row_index = Integer.parseInt(tokens[1]);//row_index
        		JobBag jobbag = jobbagService.findById(jobBagNo);
        		if(jobbag.getMpDmPs() != null && !jobbag.getMpDmPs().trim().equals("") && !new Boolean(true).equals(jobbag.getIsDeleted())){
    			   //原JobBagSplite 押上  裝封作業已完成時間
        		   Set<JobBagSplite> splites = jobbag.getJobBagSplites();
        		   Iterator iterator = splites.iterator();
        		   while (iterator.hasNext()) {
        			  JobBagSplite jobBagSplite =  (JobBagSplite)iterator.next();
            		  jobBagSplite.setMpCompletedDateByUser(calendar.getTime());
            		  jobBagSplite.setMpCompletedUser(employee.getUserId());
            		  jobBagSplite.setMpMachineName(mpMachineName);
            		  jobbagSpliteService.save(jobBagSplite);
        		   }
        		   String jobbagStatus = jobbag.getJobBagStatus(); 
        		   if(jobbagStatus == null || "INIT".equals(jobbagStatus) || "PRINTED_LP".equals(jobbagStatus) || "PRINTED_MP".equals(jobbagStatus) 
        				   || "PRINTED_LG".equals(jobbagStatus) || "COMPLETED_LP".equals(jobbagStatus) || "NON_LP".equals(jobbagStatus))
	    		      jobbag.setJobBagStatus("COMPLETED_MP"); //裝封作業已完成
        		   
        		   String notes = jobbag.getNotes();
           		   String lpNotes = "";
           		   String mpNotes = "";
           		   int blankIndex = 0;
           		   if(notes != null && (blankIndex = notes.indexOf("　")) > 0){        			
           			   lpNotes = notes.substring(0, blankIndex);
           			   mpNotes = notes.substring(blankIndex + 1);        			
           		   }
           		   if(!"ACCT_DN_GENERATED".equals(jobbagStatus) && !"ACCOUNTING_EP1".equals(jobbagStatus)){
        		       if("".equals(lpNotes))
        		         jobbag.setNotes("");
        		       else
        			     jobbag.setNotes(lpNotes + "　");
           		   }
	    		   jobbagService.save(jobbag);
        		}else{
        			cannotUpdateJobBags.add(jobbag.getJobBagNo());
        		}

        	}
            HibernateSessionFactory.getSession().getTransaction().commit();
            String noUpdateJobbags = "";
            for(String jobbagNo : cannotUpdateJobBags){
            	noUpdateJobbags += (jobbagNo + ",");
            }
            if(noUpdateJobbags.endsWith(","))
            	noUpdateJobbags = noUpdateJobbags.substring(0, noUpdateJobbags.length() - 1);
            
            if(noUpdateJobbags.equals(""))
               request.setAttribute("message", "批次記錄完成");
            else
               request.setAttribute("message", noUpdateJobbags + "不需裝封或壓封或已刪除，故不記錄完成。其它job bags批次記錄完成");
            return mapping.findForward("message");
        } catch (Exception e) {
            log.error("", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        //return mapping.findForward("viewAccount");
    }        
    
    /**
     * Method listReturn
     * 批次記錄完成 action
     */    
    public ActionForward batchCompletedLPSumbit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        JobBagForm myForm = (JobBagForm) form;
        Employee employee = new Employee();
    	employee = SessionUtil.getAccount(request);
        
    	String lpMachineName = myForm.getLpMachineName();
    	List<String> cannotUpdateJobBags = new ArrayList<String>();
        try {
        	HibernateSessionFactory.getSession().clear();
        	HibernateSessionFactory.getSession().getTransaction().begin();
        	

        	String jobBagNos[] = myForm.getJobBagNos();

        	
        	if (null ==jobBagNos ) {
                request.setAttribute("message", "無勾選工單");
                return mapping.findForward("message");        		
        	}
        	
        	
    		//取得系統時間
			Calendar calendar = Calendar.getInstance();
			Date now = new Date();
			calendar.setTime(now); 
			
			
        	String jobBagList=null;
        	for (int i=0;i<jobBagNos.length;i++) {
        		String[] tokens = jobBagNos[i].split(";"); //jobCodeNo;row_index
        		String jobBagNo = tokens[0];//jobBagNo
        		Integer row_index = Integer.parseInt(tokens[1]);//row_index
        		JobBag jobbag = jobbagService.findById(jobBagNo);
        		if(jobbag.getIsLp() != null && jobbag.getIsLp() && !new Boolean(true).equals(jobbag.getIsDeleted())){
    			   //原JobBagSplite 押上  列印作業作業已完成時間
        		   Set<JobBagSplite> splites = jobbag.getJobBagSplites();
        		   Iterator iterator = splites.iterator();
        		   while (iterator.hasNext()) {
        			  JobBagSplite jobBagSplite =  (JobBagSplite)iterator.next();
            		  jobBagSplite.setLpCompletedDateByUser(calendar.getTime());
            		  jobBagSplite.setLpCompletedUser(employee.getUserId());
            		  jobBagSplite.setLpMachineName(lpMachineName);
            		  jobbagSpliteService.save(jobBagSplite);
        		   }
        		   String jobbagStatus = jobbag.getJobBagStatus(); 
        		   if(jobbagStatus == null || "INIT".equals(jobbagStatus) || "PRINTED_LP".equals(jobbagStatus) || "PRINTED_MP".equals(jobbagStatus) 
        				   || "PRINTED_LG".equals(jobbagStatus) )
	    		      jobbag.setJobBagStatus("COMPLETED_LP"); //列印作業已完成
        		   
        		   String notes = jobbag.getNotes();
           		   String lpNotes = "";
           		   String mpNotes = "";
           		   int blankIndex = 0;
           		   if(notes != null && (blankIndex = notes.indexOf("　")) > 0){        			
           			   lpNotes = notes.substring(0, blankIndex);
           			   mpNotes = notes.substring(blankIndex + 1);        			
           		   }
           		   if(!"ACCT_DN_GENERATED".equals(jobbagStatus) && !"ACCOUNTING_EP1".equals(jobbagStatus)){
        		      if("".equals(mpNotes))
        		         jobbag.setNotes("");
        		      else
        			     jobbag.setNotes("　" + mpNotes);        		   
           		   }
	    		   jobbagService.save(jobbag);
        		}else{
        			cannotUpdateJobBags.add(jobbag.getJobBagNo());
        		}

        	}
        	

        	
            HibernateSessionFactory.getSession().getTransaction().commit();
            String noUpdateJobbags = "";
            for(String jobbagNo : cannotUpdateJobBags){
            	noUpdateJobbags += (jobbagNo + ",");
            }
            if(noUpdateJobbags.endsWith(","))
            	noUpdateJobbags = noUpdateJobbags.substring(0, noUpdateJobbags.length() - 1);
            
            if(noUpdateJobbags.equals(""))
               request.setAttribute("message", "批次記錄完成");
            else
               request.setAttribute("message", noUpdateJobbags + "不需列印或已刪除，故不記錄。其它job bags批次記錄完成");
            return mapping.findForward("message");
        } catch (Exception e) {
            log.error("", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        //return mapping.findForward("viewAccount");
    }            
    
    
    public ActionForward deleteJobbagInit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        JobBagForm myForm = (JobBagForm) form;
        String jobbagNo = myForm.getJobBagNo();

        try {
        	Employee employee = SessionUtil.getAccount(request.getSession());
        	if (!employee.getRole1s() && !employee.getRole4s() ) {
    			request.setAttribute("message", "刪除/還原 工單限制 Production Controller 及 CS 才能使用");
    			return mapping.findForward("message");        		
        	}
     	
        	JobBag jobbag = jobbagService.findById(jobbagNo);
        	if (! ( jobbag.getJobBagStatus().equalsIgnoreCase("INIT") || "NON_LP".equalsIgnoreCase(jobbag.getJobBagStatus()) || jobbag.getJobBagStatus().equalsIgnoreCase("PRINTED_LG")) ) {
    			request.setAttribute("message", "限制狀態為 ( 工單產生, 已列印工單, 不需列印 )才能被刪除");
    			return mapping.findForward("message");        		
        	}           	
            request.setAttribute("employee", employee);
            request.setAttribute("jobbag", jobbag);
            

        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("deleteInit");
    }        
    
    /**
     * Method listReturn
     * 標記刪除工單  action
     */    
    public ActionForward deleteJobbagSubmit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        JobBagForm myForm = (JobBagForm) form;
        String jobbagNo = myForm.getJobBagNo();
        String deletedReason = myForm.getDeletedReason();
        String empNo  = myForm.getEmpNo();     
        String delectAction = myForm.getDeleteAction();
        String delectActionMessage="";

        try {
        	HibernateSessionFactory.getSession().getTransaction().begin();
        	JobBag jobBag = jobbagService.findById(jobbagNo);
        	
        	Employee employee = new Employee();

        	if (null!= empNo && empNo.length() >0)
        		employee = employeeService.findById(empNo);
        	
    		//取得系統時間
			Calendar calendar = Calendar.getInstance();
			Date now = new Date();
			calendar.setTime(now); 
			
			
        	jobBag.setDeletedReason(deletedReason);
        	
        	if (delectAction.equalsIgnoreCase("DELETE")) {
        		jobBag.setIsDeleted(true);
        		delectActionMessage="標記刪除";
        	}
        	else {
        		jobBag.setIsDeleted(false);
        		delectActionMessage="標記刪除還原";
        	}
        	
        	jobBag.setEmployee(employee);
        	jobBag.setDeletedDate(calendar.getTime());
            
        	jobbagService.save(jobBag);
            HibernateSessionFactory.getSession().getTransaction().commit();
            
            request.setAttribute("message", delectActionMessage +"成功");  
        	SysLog syslog = new SysLog();
    		syslog.setLogType("Del_Job_Bag");
    		syslog.setSubject("標記刪除工單");
    		syslog.setMessageBody(employee.getEmpNo() + ":" + employee.getUserId() + "標記刪除" + jobbagNo + "成功");
    	    syslog.setCreateDate(new Date());
    		syslogService.save(syslog);
            

        } catch (Exception e) {
            log.error("delete catch exception", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
        	request.setAttribute("message", delectActionMessage +"失敗");  
			return mapping.findForward("message");
        }
        return mapping.findForward("message");
    }    
    
    
    private ValueList getValueList(HttpServletRequest request, JobBagForm myForm, String entryKey) {
        Map param = new HashMap();


        String[] jobBagStatuses = myForm.getJobBagStatuses();
        String job_bag_status=""; // INIT 當作預設值
        
        if (null == jobBagStatuses) {
        	job_bag_status="'INIT'";
        }
        else {
	        for (int i=0; i<jobBagStatuses.length; i++)  {
	        	if (i==0 ) 
	        		job_bag_status = "'" + jobBagStatuses[i] + "'";
	        	else
	        		job_bag_status = job_bag_status + ", '" + jobBagStatuses[i] + "'";
	        }
        }
        param.put("job_bag_status", job_bag_status);  
        
        
        
        String job_bag_no = myForm.getJobBagNo();
        if (null != job_bag_no && job_bag_no.length() >0  )
        	param.put("job_bag_no", job_bag_no);
        String idf_cust_no = myForm.getCustNo();
        if (null != idf_cust_no && idf_cust_no.length() >0   )
        	param.put("idf_cust_no", idf_cust_no);
        
        String create_date = myForm.getCreateDate_form();

        if (null != create_date && create_date.length() >0  )
        	param.put("create_date", create_date);
        
        String cycle_date = myForm.getCycleDate_form();        
        if (null != cycle_date && cycle_date.length() >0   )        	
        	param.put("cycle_date", cycle_date);
        
        String receive_date = myForm.getReceiveDate_form();      
        if (null != receive_date && receive_date.length() >0   )        
        	param.put("receive_date", receive_date); 
        
        String afp_name = myForm.getAfpName();      
        if (null != afp_name && !"".equals(afp_name.trim()) )        
        	param.put("afp_name", afp_name);
        

        String hasDamage = myForm.getHasDamage_form();         
        if (null != hasDamage && hasDamage.equalsIgnoreCase("1"))
        	param.put("has_damage", " j.has_damage = 1 ");      
        if (null != hasDamage && hasDamage.equalsIgnoreCase("0"))
        	param.put("has_damage", " (j.has_damage is null or j.has_damage =0 ) ");    
        
        
        String isDamage = myForm.getIsDamage_form();         
        if (null != isDamage && isDamage.equalsIgnoreCase("1"))
        	param.put("is_damage", " j.is_damage = 1 ");      
        if (null != isDamage && isDamage.equalsIgnoreCase("0"))
        	param.put("is_damage", " (j.is_damage is null or j.is_damage =0 ) ");        
        
        
        String isDeleted = myForm.getIsDeleted_form();         
        if (null != isDeleted && isDeleted.equalsIgnoreCase("1"))
        	param.put("is_deleted", " j.is_deleted = 1 " );      
        if (null != isDeleted && isDeleted.equalsIgnoreCase("0"))
        	param.put("is_deleted", " (j.is_deleted is null or j.is_deleted =0 )  ");       
        if (null == isDeleted )
        	param.put("is_deleted", " (j.is_deleted is null or j.is_deleted =0 )  ");         
        

        String withFile = myForm.getWithFile();      
        if (null == withFile )
        	param.put("withFile", " (j.AFP_NAME is not null and j.AFP_NAME <> '' ) ");             
        else if (null != withFile && withFile.equalsIgnoreCase("1"))
        	param.put("withFile", " (j.AFP_NAME is not null and j.AFP_NAME <> '' ) ");      
        else if (null != withFile && withFile.equalsIgnoreCase("0"))
        	param.put("withFile", " (j.AFP_NAME is null or j.AFP_NAME = '' ) ");  

        
        Integer code_job_code_type = myForm.getJobCodeType();
        if (null != code_job_code_type && code_job_code_type >0  )
        	param.put("code_job_code_type", code_job_code_type);        
        
        
        String dead_time = myForm.getDeadTime();
        if (null != dead_time && dead_time.length() >0  )
        	param.put("dead_time", dead_time);       
        
        ValueList valueList = valueListService.getValueList(request, entryKey, param);
        return valueList;
    }
    
    public ActionForward print(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        JobBagForm myForm = (JobBagForm) form;


        try {
        	HibernateSessionFactory.getSession().clear();
        	HibernateSessionFactory.getSession().getTransaction().begin();
        	
        	
        	@SuppressWarnings("deprecation")
			Connection conn= HibernateSessionFactory.getSession().connection();  
        	
        	
        	String jobBagNos[] = myForm.getJobBagNos();
        	Integer spliteCounts[]= myForm.getSpliteCounts();

        	
        	if (null ==jobBagNos ) {
                request.setAttribute("message", "無勾選工單");
                return mapping.findForward("message");        		
        	}
        	String jobBagNosStr = "";
        	String jobBagList=null;
        	for (int i=0;i<jobBagNos.length;i++) {
        		String[] tokens = jobBagNos[i].split(";"); //jobCodeNo;row_index
        		String jobBagNo = tokens[0];//jobBagNo
        		Integer row_index = Integer.parseInt(tokens[1]);//row_index
        		JobBag jobbag = jobbagService.findById(jobBagNo);
        		

        		
        		if (null == jobBagList)
        			jobBagList = "'" + jobbag.getJobBagNo()+"'";
        		else
        			jobBagList = jobBagList +  ", '" + jobbag.getJobBagNo()+"'";
        		
        		
        		//取得系統時間
    			Calendar calendar = Calendar.getInstance();
    			Date now = new Date();
    			calendar.setTime(now);    		
    			
    			
    			//原JobBagSplite 押上 print date/ print counter
        		Set<JobBagSplite> splites = jobbag.getJobBagSplites();
        		Iterator iterator = splites.iterator();
        		while (iterator.hasNext()) {
        			JobBagSplite jobBagSplite =  (JobBagSplite)iterator.next();
	    	    	
	        		Integer printingCount =1;
	        		if (null == jobBagSplite.getPrintingCount() || jobBagSplite.getPrintingCount() == 0){
	        			printingCount =  1; 
	    	    	    jobBagSplite.setPrintingCount(printingCount);
	        		}else{
	        			printingCount =  jobBagSplite.getPrintingCount() +  1; 
	    	    	    jobBagSplite.setPrintingCount(printingCount);
	        		}
	    			jobBagSplite.setLatestPrintingDate(calendar.getTime());
	    			jobBagSplite.setAfpFilename(jobbag.getAfpName()); //批次分檔的afpName 押上原來rootJobBag.afp 檔名
	    			jobBagNosStr += jobBagSplite.getJobBagSpliteNo() + ",";
    	    	    jobbagSpliteService.save(jobBagSplite);
        		}
         		
    			if (jobbag.getJobBagStatus().equalsIgnoreCase("INIT"))
    				jobbag.setJobBagStatus("PRINTED_LP"); //已列印工單    			
    			jobbagService.save(jobbag);

        	}
        	
    		// 需先commit tran, 之後的report 才成抓到 commit 後的資料
            HibernateSessionFactory.getSession().getTransaction().commit();        	
        	
        	
    	
        	HibernateSessionFactory.getSession().clear();
        	HibernateSessionFactory.getSession().getTransaction().begin();            
    		//產生PDF 檔
        	String serverPath = request.getSession().getServletContext().getRealPath("");;
            String fileName = serverPath + "\\report\\job_bag.jasper";
            String pdfFileName = new SimpleDateFormat("yyyyMMddHHmmssMs").format(new Date())+".pdf";

            String outFileName = serverPath +"\\pdf\\"+pdfFileName;
            String jbmHome = Util.getString("jbm.home.local") + "PostageImage\\";            
            HashMap hm = new HashMap();
            hm.put("jbmHome", jbmHome);
            String jobBagSpliteList = "";
            
            
            hm.put("jobbagList", jobBagList);            
            hm.put("jobbagSpliteList", "''");
            
            try {
                JasperPrint print = JasperFillManager.fillReport(fileName, hm, conn);

                // Create a PDF exporter
                JRExporter exporter = new JRPdfExporter();
                
                // Configure the exporter (set output file name and print object)
                exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, outFileName);
                exporter.setParameter(JRExporterParameter.JASPER_PRINT, print);

                
                // Export the PDF file
                exporter.exportReport();
                
                // 埋入HistoryReport
                HistoryReport historyReport = new HistoryReport();
                historyReport.setReportName(pdfFileName);
                historyReport.setPdfPath(outFileName);
                Employee employee = SessionUtil.getAccount(request.getSession());
                historyReport.setEmpNo(employee.getEmpNo());
                Calendar today = Calendar.getInstance();
                historyReport.setCreateDate(today.getTime());
                historyReportService.save(historyReport);
                // end HistoryReport                
                
                HibernateSessionFactory.getSession().getTransaction().commit();                     
            } catch (JRException e) {
            	log.error("", e);
                e.printStackTrace();
                HibernateSessionFactory.getSession().getTransaction().rollback();
            } catch (Exception e) {
            	log.error("", e);
                e.printStackTrace();
                HibernateSessionFactory.getSession().getTransaction().rollback();
            }       

            request.setAttribute("message", "列印成功");
            request.setAttribute("pdfFileName", pdfFileName);
            Employee employee = SessionUtil.getAccount(request.getSession());
            SysLog syslog = new SysLog();
    		syslog.setLogType("Job_Splite");
    		syslog.setSubject("列印工單分檔");
    		syslog.setMessageBody(employee.getEmpNo() + ":" + employee.getUserId() + ":" + jobBagNosStr);
    	    syslog.setCreateDate(new Date());
    		syslogService.save(syslog);
            
            
            return mapping.findForward("pdfDownload");
        } catch (Exception e) {
            log.error("", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }finally{
        	if(HibernateSessionFactory.getSession().isOpen())
        		HibernateSessionFactory.closeSession();
        }
        //return mapping.findForward("viewAccount");
    }
    
    
}