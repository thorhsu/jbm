/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.salmat.jbm.struts.action;

import java.io.File;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.mlw.vlh.ValueList;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.upload.FormFile;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.mozilla.javascript.edu.emory.mathcs.backport.java.util.Arrays;
import org.springframework.beans.BeanUtils;

import com.salmat.jbm.hibernate.*;
import com.salmat.jbm.service.CodeService;
import com.salmat.jbm.service.CustomerReceiverService;
import com.salmat.jbm.service.EmployeeService;
import com.salmat.jbm.struts.form.*;
import com.salmat.jbm.hibernate.HibernateSessionFactory;
import com.salmat.jbm.service.CustomerService;

/**
 * MyEclipse Struts Creation date: 02-23-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action parameter="fid" validate="true"
 * @struts.action-forward name="init" path=".findUserAccount"
 */
public class CustomerExtendsAction extends BaseAction {
	/*
	 * Generated Methods
	 */
	private static Logger log = Logger.getLogger(CustomerExtendsAction.class);
	private static final String entryKey = "customerContractList";

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	protected ActionForward unspecified(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		return mapping.findForward("homepage");
	}

	public ActionForward list(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionMessages messages = new ActionMessages();
		CustomerExtendsForm myForm = (CustomerExtendsForm) form;

		try {
			Map<String, String> params = new HashMap<String, String>();
			ValueList dataList = this.getValueList(request, params, entryKey);

			this.setGeneralAttribute(request, dataList, "contract_no");

		} catch (Exception e) {
			log.error("", e);
			this.saveSysLog(true, e, "CUSTOMER_CONTRACT", "查詢失敗", "查詢失敗");
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message_cs");
		}
		return mapping.findForward("list");
	}

	  public ActionForward checkPKExist(ActionMapping mapping, ActionForm form, HttpServletRequest request,
	            HttpServletResponse response) {
		    CustomerExtendsForm myForm = (CustomerExtendsForm)form;
		    Session session = null;
		    if(myForm.getContractNo() == null || "".equals(myForm.getContractNo())){
		    	request.setAttribute("result", "BLANK");		    	
		    	return mapping.findForward("jsonMessage");
		    }
	        try {
	        	session = HibernateSessionFactory.getSession();
	        	CustomerContract customerContract = (CustomerContract) session.get(CustomerContract.class, myForm.getContractNo());
	        	if (null == customerContract)
	        		request.setAttribute("result", "NON_EXIST");
	        	else
	        		request.setAttribute("result", "EXIST");
	        } catch (Exception e) {
	            log.error("", e);
				request.setAttribute("message", "系統失敗 ");
				return mapping.findForward("message");
	        }finally{
	        	if(session != null)
	        		session.close();
	        }
	        
	        return mapping.findForward("jsonMessage");
	    }       
	@Override
	public ActionForward addInit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {	
		request.setAttribute("ACTION_MODE", "ADD");
		return mapping.findForward("editInit");
	}

	@Override
	public ActionForward editInit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CustomerExtendsForm myForm = (CustomerExtendsForm)form;
		try {
        	Session session = HibernateSessionFactory.getSession();
        	CustomerContract customerContract = (CustomerContract) session.get(CustomerContract.class, myForm.getContractNo());
        	myForm.setCustomerContract(customerContract);
        	request.setAttribute("ACTION_MODE", "EDIT");
            
        } catch (Exception e) {
            log.error("", e);
            this.saveSysLog(true, e, "CUSTOMER_CONTRACT", "編輯CUSTOMER_CONTRACT失敗","編輯CUSTOMER_CONTRACT失敗:" + myForm.getContractNo() );
            
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message_cs");
        }
        return mapping.findForward("editInit");
	}

	@Override
	public ActionForward editSubmit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return addSubmit(mapping, form, request, response);		
	}

	private Set<AcctItem> getAcctItem(CustomerExtendsForm form) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException{
		Session session = HibernateSessionFactory.getSession();
		String contractNo = form.getContractNo();
		HashSet<AcctItem> retSet = new HashSet<AcctItem>();
		for(int i = 1; i <= 20 ; i++){			
			String id = org.apache.commons.beanutils.BeanUtils.getProperty(form, "acctItemFxs" + i);
			String toCustPrice = org.apache.commons.beanutils.BeanUtils.getProperty(form, "toCustPrice" + i);
			
			if(id != null && !id.equals("") && !id.equals("0")){

			   AcctItemFx acctItemFx = (AcctItemFx) session.get(AcctItemFx.class, new Integer(id));			   
			   if(acctItemFx != null){
				   acctItemFx.getAcctChargeItem();
				   AcctItem acctItem = new AcctItem();
				   BeanUtils.copyProperties(acctItemFx, acctItem);
				   acctItem.setCustNo(form.getCustNo());
				   if(toCustPrice != null && !toCustPrice.equals(""))
				      acctItem.setToCustPrice(new Double(toCustPrice));
				   acctItem.setAcctItemFx(acctItemFx); //設定原始的計價標準
				   acctItem.setAcctItemNo(contractNo + "-" + id); //設定PK
				   retSet.add(acctItem);
			   }			   
			}
		}
		
		return retSet;
	}
	
	@Override
	public ActionForward addSubmit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CustomerExtendsForm myForm = (CustomerExtendsForm) form;
		
        
		
		Transaction tx = null;
		try {
			Session session = HibernateSessionFactory.getSession();
			tx = session.beginTransaction();
			CustomerContract customerContract = (CustomerContract) session.get(CustomerContract.class, myForm.getContractNo());
			Set<AcctItem> acctItems = getAcctItem(myForm);
			
			if(customerContract == null){			   
        	   customerContract = new CustomerContract();
			}else{
				//此段要切斷舊的計價標準的關連
				Set<AcctItem> oriAcctItems = customerContract.getAcctItems();
				   if(oriAcctItems != null){
				       for(AcctItem oriAcctItem : oriAcctItems){
				    	   boolean exist = false;
				    	   for(AcctItem acctItem : acctItems){
				    		   if(oriAcctItem.getAcctItemNo().equals(acctItem.getAcctItemNo())){
				    			   exist = true;
				    			   break;
				    		   }
				    	   }
				    	   //如果不存在，代表被從合約中除名，切斷與合約的關係
				    	   if(!exist){
				    		   oriAcctItem.setCustomerContract(null);
				    		   session.update(oriAcctItem);
				    	   }
				       }
				   }
			}
			
			FileOutputStream fos = null;
	        FormFile formFile = null;
	        if(myForm.getFile() != null && myForm.getFile().getFileSize() > 0){
	            try {	               
	               formFile = myForm.getFile();
	               if(customerContract.getFilePath() != null && !customerContract.getFilePath().equals("")){
	            	   String path = customerContract.getFilePath();
	            	   new File(path).delete();
	               }
	               String path = getServlet().getServletContext().getRealPath("")  + "/contractFiles/" + formFile.getFileName();
	               fos = new FileOutputStream(new File(path));
	               fos.write(formFile.getFileData());
	               customerContract.setFileName(formFile.getFileName());
	               customerContract.setFilePath(path);
	            } finally {
	                if (fos != null) {
	                   fos.close();
	                }
	            }
	        }
			
			//先刪除
			if(customerContract.getServices() != null)
				for(Service service: customerContract.getServices())
					session.delete(service);
			if(customerContract.getOperations() != null)
				for(Operation operation: customerContract.getOperations())
					session.delete(operation);
			if(customerContract.getSlas() != null)
				for(Sla sla: customerContract.getSlas())
					session.delete(sla);
			if(customerContract.getPenalties() != null)
				for(Penalty penalty: customerContract.getPenalties())
					session.delete(penalty);
			
        	BeanUtils.copyProperties(myForm, customerContract);
        	
        	if(myForm.getItEmp() != null && myForm.getItEmp().length > 0){
        		List<String> emps = Arrays.asList(myForm.getItEmp());
        		customerContract.setItEmployees(emps);
        	}
        	
        	Code code = CodeService.getInstance().findById(myForm.getIdfBillingCycleCode());        	
        	CustomerReceiver cr = CustomerReceiverService.getInstance().findById(myForm.getReceiverNo());        	
        	Customer customer = CustomerService.getInstance().findById(myForm.getCustNo());
        	customerContract.setBillingCycleCode(code);
        	customerContract.setReceiver(cr);
        	customerContract.setCustomer(customer);
        	HashSet<Service> services = null;
        	HashSet<Operation> operations = null;
        	HashSet<Sla> slas = null;
        	HashSet<Penalty> penalties = null;
        	
        	
        	//儲存服務
        	if(myForm.getService() != null){
        		services = new HashSet<Service>();
        		for(String contents : myForm.getService()){
        			if(contents != null && !contents.trim().equals("")){
        			   Service service = new Service();
        			   service.setContents(contents);
        			   service.setCustomerContract(customerContract);
        			   session.save(service);
        			   services.add(service);
        			}
        		}
        		if(services.size() == 0)
        			services = null;
        	}
        	//儲存operation
        	if(myForm.getOperation() != null){
        		operations = new HashSet<Operation>();
        		for(String contents : myForm.getOperation()){
        			if(contents != null && !contents.trim().equals("")){
        			   Operation operation = new Operation();
        			   operation.setContents(contents);
        			   operation.setCustomerContract(customerContract);
        			   session.save(operation);
        			   operations.add(operation);
        			}
        		}        		
        		if(operations.size() == 0)
        			operations = null;
        	}
        	//儲存sla
        	if(myForm.getSla() != null){
        		slas = new HashSet<Sla>();
        		for(String contents : myForm.getSla()){
        			if(contents != null && !contents.trim().equals("")){
        			   Sla sla = new Sla();
        			   sla.setContents(contents);
        			   sla.setCustomerContract(customerContract);
        			   session.save(sla);
        			   slas.add(sla);
        			}
        		}
        		if(slas.size() == 0)
        			slas = null;
        	}
        	//儲存penalty
        	if(myForm.getPenalty() != null){
        		penalties = new HashSet<Penalty>();
        		for(String contents : myForm.getPenalty()){
        			if(contents != null && !contents.trim().equals("")){
        			   Penalty penalty = new Penalty();
        			   penalty.setContents(contents);
        			   penalty.setCustomerContract(customerContract);
        			   session.save(penalty);
        			   penalties.add(penalty);
        			}
        		}
        		if(penalties.size() == 0)
        			penalties = null;
        	}
        	//儲存計價標準
        	if(acctItems != null){
        		for(AcctItem acctItem : acctItems){
        			acctItem.setCustomerContract(customerContract);        			
        	        session.merge(acctItem);        				        			
        		}
        	}        	
        	customerContract.setPenalties(penalties);
        	customerContract.setSlas(slas);
        	customerContract.setServices(services);
        	customerContract.setOperations(operations);
        	customerContract.setAcctItems(acctItems);
        	
        	
            session.saveOrUpdate(customerContract);	
        	tx.commit();        
        	request.setAttribute("message", "儲存成功 ");
            
        } catch (Exception e) {        	
            log.error("", e);              
			request.setAttribute("message", "系統失敗 ");
			this.saveSysLog(true, e, "CUSTOMER_CONTRACT", "儲存失敗", "儲存:" + myForm.getContractNo()+ "失敗");
			if(tx != null)
				tx.rollback();
			return mapping.findForward("message_cs");
        }
		return mapping.findForward("message_cs");
	}

	@Override
	public ActionForward saveAsNewInit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CustomerExtendsForm myForm = (CustomerExtendsForm)form;
		try {
        	Session session = HibernateSessionFactory.getSession();
        	CustomerContract customerContract = (CustomerContract) session.get(CustomerContract.class, myForm.getContractNo());
        	customerContract.setContractNo(null);
        	myForm.setCustomerContract(customerContract);
        	request.setAttribute("ACTION_MODE", "ADD");
            
        } catch (Exception e) {
            log.error("", e);
            this.saveSysLog(true, e, "CUSTOMER_CONTRACT", "複製CUSTOMER_CONTRACT失敗","複製CUSTOMER_CONTRACT失敗:");
            
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message_cs");
        }
        return mapping.findForward("editInit");
	}

	@Override
	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CustomerExtendsForm myForm = (CustomerExtendsForm)form;
        Transaction tx = null;
        try {
        	Session session = HibernateSessionFactory.getSession();
        	tx = session.beginTransaction();
        	CustomerContract customerContract = (CustomerContract) session.get(CustomerContract.class, myForm.getContractNo());
        	session.delete(customerContract);
            tx.commit();
            request.setAttribute("message", myForm.getContractNo() + "刪除成功");
        } catch (Exception e) {
        	if(tx != null)
        		tx.rollback();
            log.error("", e);
            this.saveSysLog(true, e, "CUSTOMER_CONTRACT", "刪除CustomerContract失敗", myForm.getContractNo() + "資料被其它table引用，無法刪除");            
			request.setAttribute("message", e.getMessage() + "<br/>" + "資料被其它table引用，無法刪除");
			return mapping.findForward("message_cs");
        }
        return mapping.findForward("message_cs");
	}

}