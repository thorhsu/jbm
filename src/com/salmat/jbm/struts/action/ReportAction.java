/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.salmat.jbm.struts.action;

import java.io.File;
import java.io.IOException;
import java.net.URLEncoder;
import java.sql.Connection;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.mlw.vlh.ValueList;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.actions.DispatchAction;
import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Example;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.quartz.Scheduler;
import org.quartz.impl.StdScheduler;
import org.springframework.context.ApplicationContext;
import org.springframework.scheduling.quartz.CronTriggerBean;

import com.salmat.jbm.hibernate.*;
import com.salmat.jbm.service.*;
import com.salmat.jbm.struts.form.*;
import com.salmat.jbm.hibernate.HibernateSessionFactory;
import com.painter.filter.SetParamValFilter;
import com.painter.util.GenerateMaterialUsageReport;
import com.painter.util.Global;
import com.painter.util.SessionUtil;
import com.painter.util.Util;

import net.sf.jasperreports.engine.*;
import net.sf.jasperreports.engine.export.*;
import jxl.SheetSettings;
import jxl.Workbook;
import jxl.format.CellFormat;
import jxl.write.Label;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;



/**
 * MyEclipse Struts Creation date: 02-23-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action parameter="fid" validate="true"
 * @struts.action-forward name="init" path=".findUserAccount"
 */
public class ReportAction extends DispatchAction {
    /*
     * Generated Methods
     */
	private static final HistoryReportService historyReportService = HistoryReportService.getInstance();		
	private static final LPInfoService lpinfoService = LPInfoService.getInstance();
	private static final MPInfoService mpinfoService = MPInfoService.getInstance();
	private static final PSInfoService psinfoService = PSInfoService.getInstance();
	private static final LGInfoService lginfoService = LGInfoService.getInstance();
	private static final ReturnInfoService returninfoService = ReturnInfoService.getInstance();
	private static final LCInfoService lcinfoService = LCInfoService.getInstance();
	private static final JobCodeService jobcodeService = JobCodeService.getInstance();
    private static final JobBagService jobbagService = JobBagService.getInstance();
	private static final JobBagSpliteService jobbagSpliteService = JobBagSpliteService.getInstance();    
    private static final CustomerService customerService = CustomerService.getInstance();
    private static final CodeService codeService = CodeService.getInstance();
    private static ValueListService valueListService = ValueListService.getInstance();    
    private static Logger log = Logger.getLogger(ReportAction.class);
    private static final EmployeeService employeeService = EmployeeService.getInstance();
    private static final String citiMailUrl = "report.do?fid=citiMailReport";

    /**
     * Method execute
     * 
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    protected ActionForward unspecified(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) {

        return mapping.findForward("homepage");
    }


    public ActionForward updateEmail(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
		ReportForm myForm = (ReportForm) form;
		Session session = null;
    	Transaction tx = null;
        try {
        	//重新設定寄件時間
        	String hour = myForm.getScheduleTime();           	     
        	myForm.setScheduleTime(hour);

        	
        	session = HibernateSessionFactory.getSession();
        	tx = session.beginTransaction();
        	Query query = session.createQuery("from SchedulerTime where custNo = ? and url = ? and purpose is null");        	
        	List<SchedulerTime> timers =  query.setString(0, myForm.getCustNo()).setString(1, citiMailUrl).list();
        	SchedulerTime st = new SchedulerTime();
        	if(timers != null && timers.size() == 1){
        		st = timers.get(0);
        	}else{
        		//多的沒有用，反而困擾，刪掉
        		for(int i = timers.size() - 1 ; i >= 1 ; i--){
        			SchedulerTime schedulerTime = timers.get(i);
        			session.delete(schedulerTime);
        		}
        		st = timers.get(0);
        	}
             
            st.setCustNo(myForm.getCustNo());
            st.setUrl(citiMailUrl);
            st.setPurpose(null);
            st.setSchedulerDate("*");
            st.setSchedulerMin("0");
            st.setSchedulerMonth("*");
            st.setSchedulerHour(hour);
            st.setSchedulerWeekDay("?");
            st.setSchedulerYear("*");
            session.saveOrUpdate(st);
            
            long timerId = st.getTimerId();
            session.createQuery("delete from SchedulerEmail where schedulerTime.timerId = " + timerId).executeUpdate();
            for(String email : myForm.getScheduleEmails()){
            	if(email != null && !email.trim().equals("")){
            	   SchedulerEmail sm = new SchedulerEmail();
            	   sm.setEmail(email);
            	   sm.setSchedulerTime(st);
            	   session.save(sm);
            	}
            }        	
            tx.commit();            
            getScheduleMail(myForm, citiMailUrl);
            ApplicationContext ctx = SetParamValFilter.getApplicationContext();
        	String cronExpression = "0 0 " + hour + " * * ? *";

        	//取得scheduler
        	StdScheduler sf = (StdScheduler) ctx.getBean("scheduleTasks");
        	//取得trigger                                                 
        	CronTriggerBean triggerBean = (CronTriggerBean) ctx.getBean(st.getCronTrigger());
        	if(!triggerBean.getCronExpression().equals(cronExpression)){        		
        	   //重新設定expression
        	   triggerBean.setCronExpression(cronExpression);
        	   triggerBean.afterPropertiesSet();
        	   //重新設定trigger時間
        	   sf.rescheduleJob(st.getCronTrigger(), Scheduler.DEFAULT_GROUP, triggerBean);
        	}
        } catch (Exception e) {
        	if(tx != null)
        		tx.rollback();
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }finally{
        	if(session != null)
        		session.close();
        }
        return mapping.findForward("citiMailReportQuery");
    } 
    
    
    public ActionForward dailyJobStatisticsReportQuery(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {

        try {
  

        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("dailyJobStatisticsReportQuery");
    }


    public ActionForward citiMailReport(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
    	ReportForm myForm = (ReportForm) form;
        try {        	
        	myForm = getScheduleMail(myForm, citiMailUrl);
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("citiMailReportQuery");
    }
    
	public ActionForward citiMailReportQuery(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		ReportForm myForm = (ReportForm) form;

		Date queryDateBegin = new Date();
		try {
			queryDateBegin = new SimpleDateFormat("yyyy-MM-dd").parse(myForm.getQueryDateBegin());
		} catch (ParseException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		Date queryDateEnd = new Date();
		try {
			queryDateEnd = new SimpleDateFormat("yyyy-MM-dd").parse(myForm.getQueryDateEnd());
		} catch (ParseException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		Calendar cal = Calendar.getInstance();
		cal.setTime(queryDateEnd);
		cal.set(cal.get(Calendar.YEAR), cal.get(Calendar.MONTH), cal.get(Calendar.DATE), 23, 59, 59);
		queryDateEnd = cal.getTime();
		
        String targetfileName;
		try {
			targetfileName = getMailReport(request, myForm.getCustNo(), queryDateBegin,
					queryDateEnd);
			if(null == targetfileName){
				return mapping.findForward("message");
			}
			request.setAttribute("pdfFileName", targetfileName);
			// 埋入HistoryReport

			HistoryReport historyReport = new HistoryReport();
			historyReport.setReportName(targetfileName);
			historyReport.setPdfPath(SetParamValFilter.getRealPath("/pdf/"
					+ targetfileName));
			Employee employee = SessionUtil
					.getAccount(request.getSession());
			historyReport.setEmpNo(employee.getEmpNo());
			Calendar today = Calendar.getInstance();
			historyReport.setCreateDate(today.getTime());
			historyReportService.save(historyReport);
			// end HistoryReport

			request.setAttribute("message", "列印成功");
			return mapping.findForward("pdfDownload");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
		}
        
	}


	public static String getMailReport(
			HttpServletRequest request, String custNo, Date queryDateBegin,
			Date queryDateEnd) throws Exception {
		Session session = null;
		try {
			HibernateSessionFactory.getSession().clear();
			session = HibernateSessionFactory.getSession();
			
			//實際寄送工單樣本
			String[] mailPost = Util.getString("citi.mail.post").split(",");
			//寄回花旗工單樣本
			String[] mailBack = Util.getString("citi.mail.backCt").split(",");
			//Edd工單樣本
			String[] mailEdd = Util.getString("citi.mail.edd").split(",");
			if(custNo.toUpperCase().equals("FB")){
				//紙本寄送 (edd == false or null) + mailType = 'mail'
				List<String> mailJcs = session.createQuery("select jobCode.jobCodeNo from JobCode jobCode inner join jobCode.customer as customer where customer.custNo = 'FB' "
						+ "and (jobCode.isEdd = false or jobCode.isEdd is null) and jobCode.mailType = 'mail'").list();
				if(mailJcs != null && mailJcs.size() > 0)
					mailPost = mailJcs.toArray(new String[mailJcs.size()]);
				else
					mailPost = null;
				
				//電子寄送 (edd == true) + mailType != 'mail'
				List<String> mailEddJcs = session.createQuery("select jobCode.jobCodeNo from JobCode jobCode inner join jobCode.customer as customer where customer.custNo = 'FB' "
						+ "and jobCode.isEdd = true and (jobCode.mailType <> 'mail' or jobCode.mailType is null) ").list();
				if(mailEddJcs != null && mailEddJcs.size() > 0)
					mailEdd = mailEddJcs.toArray(new String[mailEddJcs.size()]);
				else
					mailEdd = null;
				
				//紙本+電子 (edd == true) + mailType == 'mail'
				List<String> mailBackJcs = session.createQuery("select jobCode.jobCodeNo from JobCode jobCode inner join jobCode.customer as customer where customer.custNo = 'FB' "
						+ "and jobCode.isEdd = true and jobCode.mailType = 'mail' ").list();
				if(mailBackJcs != null && mailBackJcs.size() > 0)
					mailBack = mailBackJcs.toArray(new String[mailBackJcs.size()]);
				else
					mailBack = null;
				 
			}
			
			List<String> damageJobCodes = null;
			if(mailEdd != null && mailEdd.length > 0)
			   damageJobCodes = session.createQuery("select damageJobCodeNo from JobCode where jobCodeNo in (:jobCodeNos)").setParameterList("jobCodeNos", mailEdd).list();			
			Query query = session.createQuery("select jobBag from JobBag jobBag inner join jobBag.jobCode as jobCode inner join jobBag.customer as customer where (jobBag.isDeleted is null or jobBag.isDeleted = false) "
					+ "and (jobBag.isDamage is null or jobBag.isDamage = false) "
					+ "and jobBag.cycleDate between :queryDateBegin and :queryDateEnd and jobCode.jobCodeNo in (:jobCodeNos) "
					+ "and customer.custNo = :custNo "
					+ "and (jobBag.fromDamage is null or jobBag.fromDamage = false) order by jobBag.cycleDate, jobBag.jobBagNo");
			
			List<JobBag> mailPostJbs = new ArrayList<JobBag>();
			if(mailPost != null && mailPost.length > 0)
			   mailPostJbs = query.setParameter("queryDateBegin", queryDateBegin).setParameter("queryDateEnd", queryDateEnd).setParameterList("jobCodeNos", mailPost).setParameter("custNo", custNo).list();
			
			List<JobBag> mailBackJbs = new ArrayList<JobBag>();
			if(mailBack != null && mailBack.length > 0)
			   mailBackJbs = query.setParameter("queryDateBegin", queryDateBegin).setParameter("queryDateEnd", queryDateEnd).setParameterList("jobCodeNos", mailBack).setParameter("custNo", custNo).list();
			
			List<JobBag> mailEddJbs = new ArrayList<JobBag>();
			if(mailEdd != null && mailEdd.length > 0)
				mailEddJbs = query.setParameter("queryDateBegin", queryDateBegin).setParameter("queryDateEnd", queryDateEnd).setParameterList("jobCodeNos", mailEdd).setParameter("custNo", custNo).list();
			
			List<JobBag> mailDamageJbs = new ArrayList<JobBag>();
			if(damageJobCodes != null && damageJobCodes.size() > 0){
				query = session.createQuery("select jobBag from JobBag jobBag inner join jobBag.jobCode as jobCode inner join jobBag.customer as customer where (jobBag.isDeleted is null or jobBag.isDeleted = false) "
						+ "and (jobBag.isDamage is null or jobBag.isDamage = false) "
						+ "and jobBag.cycleDate between :queryDateBegin and :queryDateEnd and jobCode.jobCodeNo in (:jobCodeNos) "
						+ "and customer.custNo = :custNo "
						+ "and jobBag.fromDamage = true order by jobBag.cycleDate, jobBag.jobBagNo");
			    mailDamageJbs = query.setParameter("queryDateBegin", queryDateBegin).setParameter("queryDateEnd", queryDateEnd).setParameterList("jobCodeNos", damageJobCodes).setParameter("custNo", custNo).list();
			}
			
			if(mailPostJbs.size() == 0 && mailBackJbs.size() == 0 && mailEddJbs.size() == 0){
				if(request != null)
				   request.setAttribute("message", "所選區間查無資料 ");
				return null;
			}
			
			String serverPath = SetParamValFilter.getRealPath("");
			String nowTime = new SimpleDateFormat("yyyyMMdd_HHmmssSSS")
					.format(new Date());
			String sourcefile = serverPath + "\\report\\citiMailReport.xls";
			String targetfileName = "citiMailReport_" + nowTime + ".xls";
			if("FB".equals(custNo)){
			   sourcefile = serverPath + "\\report\\fbMailReport.xls";
			   targetfileName = "fbMailReport_" + nowTime + ".xls";
			}
			
			 
			String targetfile = serverPath + "\\pdf\\" + targetfileName;
			jxl.Workbook rw = null;
			WritableWorkbook wwb = null;
			WritableSheet ws = null;
			WritableSheet ws1 = null;
			WritableSheet ws2 = null;
			WritableSheet ws3 = null;
			try {
				
				rw = jxl.Workbook.getWorkbook(new File(sourcefile));
			    wwb = Workbook.createWorkbook(new File(targetfile), rw); // 創建可寫工作薄
			    wwb.copySheet(0, "EDD轉實體", 1);
			    wwb.copySheet(0, "實體寄送", 2);
			    if(custNo.toUpperCase().equals("CT"))
			       wwb.copySheet(0, "BACK_CITI", 3);
			    else if(custNo.toUpperCase().equals("FB"))
				   wwb.copySheet(0, "EDD加實體", 3);
			    
			    ws = wwb.getSheet(0);
			    ws1 = wwb.getSheet(1); 
			    ws2 = wwb.getSheet(2);
			    ws3 = wwb.getSheet(3);
			    
			    ws.setName("EDD");
			    SheetSettings wsSettings = ws.getSettings();
			    wsSettings.setFitToPages(false);
			  	
			    CellFormat dateCf = ws.getCell(2, 1).getCellFormat();
			    CellFormat txtCf = ws.getCell(0, 1).getCellFormat();
			    CellFormat numCf = ws.getCell(3, 1).getCellFormat();
			    if("FB".equals(custNo)){
			    	dateCf = ws.getCell(3, 1).getCellFormat();
			    	txtCf = ws.getCell(0, 1).getCellFormat();
			    	numCf = ws.getCell(4, 1).getCellFormat();
			    }
			    
			    
			    int lineCounter = 1;
			    fillMailWorkSheet(custNo, mailEddJbs, mailDamageJbs, ws,
						dateCf, txtCf, numCf, lineCounter, "EDD");			    
			    
			    fillMailWorkSheet(custNo, mailDamageJbs, null, ws1,
						dateCf, txtCf, numCf, lineCounter, "EDD轉實體");
			    
			    fillMailWorkSheet(custNo, mailPostJbs, null, ws2,
						dateCf, txtCf, numCf, lineCounter, "實體寄送");

			    fillMailWorkSheet(custNo, mailBackJbs, null, ws3,
						dateCf, txtCf, numCf, lineCounter, "BackToCiti");
			    

			    wwb.removeSheet(4);
			    wwb.removeSheet(5);
			    wwb.write();			    
			    return targetfileName;

			} catch (Exception e) {
				log.error("", e);
				e.printStackTrace();
				if(request != null)
				   request.setAttribute("message", "系統失敗 ");
				throw e;
			} finally {
				if (wwb != null) {
					try {
						wwb.close();
					} catch (WriteException e) {
						log.error("", e);
						e.printStackTrace();
					} catch (IOException e) {
						log.error("", e);
						e.printStackTrace();
					}
					wwb = null;
				}
				if (rw != null) {
					rw.close();
				}
			}
			
		} catch (Exception e) {
			log.error("", e);
			if(request != null)
			   request.setAttribute("message", "系統失敗 ");
			throw e;
		} finally {
			if (session != null && session.isOpen())
				session.close();
		}
	}



	private static void fillMailWorkSheet(String custNo, List<JobBag> mailJbs,
			List<JobBag> mailDamageJbs, WritableSheet ws, CellFormat dateCf,
			CellFormat txtCf, CellFormat numCf,  int lineCounter, String category) throws WriteException,
			RowsExceededException {
		int allTotal = 0;
		int failTotal = 0;
		int successTotal = 0;
		int pagesTotal = 0;
		int p1AcctsTot = 0;		
		int p2AcctsTot = 0;
		int p3AcctsTot = 0;
		int p4AcctsTot = 0;
		int p5AcctsTot = 0;
		int p6AcctsTot = 0;

		for(JobBag jobBag : mailJbs){
			int account = jobBag.getAccounts() == null? 0 : jobBag.getAccounts();
			allTotal += account;
			int damageAcct = 0;
			boolean match = false;
			if(mailDamageJbs != null){
			   
			   for(JobBag damage : mailDamageJbs){
				   if(jobBag.getCycleDate().getTime() == damage.getCycleDate().getTime() && jobBag.getAfpName() != null  && jobBag.getAfpName().equals(damage.getAfpName())){
					   account = account - (damage.getAccounts() == null ? 0 : damage.getAccounts());
					   damageAcct = damage.getAccounts() == null ? 0 : damage.getAccounts();
					   failTotal += damageAcct;
					   successTotal += account;
					   match = true;
					   break;
				   }
			   }
			}		
			if(!match)
				successTotal += account;
			if("CT".equals(custNo)){
			   ws.addCell(new Label(0, lineCounter, jobBag.getJobBagNo(), txtCf));
			   ws.addCell(new Label(1, lineCounter, jobBag.getAfpName(), txtCf));
			   ws.addCell(new jxl.write.DateTime(2, lineCounter, jobBag.getCycleDate(), dateCf));
			   ws.addCell(new jxl.write.Number(3, lineCounter, jobBag.getAccounts() == null? 0 :jobBag.getAccounts(), numCf));
			   ws.addCell(new Label(4, lineCounter, category, txtCf));
			   String status =  jobBag.getJobBagStatus();
		       if(status.startsWith("ACC") || status.equals("EDD") || status.equals("COMPLETED_LG")){
		    		status = "已交寄";
		       }else{
		    		status = "未交寄";
		       }
		       ws.addCell(new Label(5, lineCounter, status, txtCf));
			   ws.addCell(new jxl.write.Number(6, lineCounter, account, numCf));
			   ws.addCell(new jxl.write.Number(7, lineCounter, damageAcct, numCf));
			}else if("FB".equals(custNo)){
				ws.addCell(new Label(0, lineCounter, jobBag.getAfpName(), txtCf));
		    	ws.addCell(new Label(1, lineCounter, jobBag.getProgNm(), txtCf));
		    	ws.addCell(new Label(2, lineCounter, jobBag.getJobBagNo(), txtCf));
		    	ws.addCell(new jxl.write.DateTime(3, lineCounter, jobBag.getCycleDate(), dateCf));
		    	if(jobBag.getAccounts() != null){
		    	   ws.addCell(new jxl.write.Number(4, lineCounter, jobBag.getAccounts(), numCf));
		    	}
		    	if(jobBag.getPages() != null){
			       ws.addCell(new jxl.write.Number(5, lineCounter, jobBag.getPages(), numCf));
			       pagesTotal += jobBag.getPages();
		    	}
		    	if(jobBag.getP1accounts() != null){
			       ws.addCell(new jxl.write.Number(6, lineCounter, jobBag.getP1accounts(), numCf));
			       p1AcctsTot += jobBag.getP1accounts();
		    	}
		    	if(jobBag.getP2accounts() != null){
				   ws.addCell(new jxl.write.Number(7, lineCounter, jobBag.getP2accounts(), numCf));
				   p2AcctsTot += jobBag.getP2accounts();
		    	}
		    	if(jobBag.getP3accounts() != null){
				   ws.addCell(new jxl.write.Number(8, lineCounter, jobBag.getP3accounts(), numCf));
				   p3AcctsTot += jobBag.getP3accounts();
		    	}
		    	if(jobBag.getP4accounts() != null){
				   ws.addCell(new jxl.write.Number(9, lineCounter, jobBag.getP4accounts(), numCf));
				   p4AcctsTot += jobBag.getP4accounts();
		    	}
		    	if(jobBag.getP5accounts() != null){
				   ws.addCell(new jxl.write.Number(10, lineCounter, jobBag.getP5accounts(), numCf));
				   p5AcctsTot += jobBag.getP5accounts();
		    	}
		    	if(jobBag.getP6accounts() != null){
				   ws.addCell(new jxl.write.Number(11, lineCounter, jobBag.getP6accounts(), numCf));
				   p6AcctsTot += jobBag.getP6accounts();
		    	}
		    	   
			}
			lineCounter++;
		}
		if("CT".equals(custNo)){
		   if(mailJbs.size() >  0){
		      ws.addCell(new Label(0, lineCounter, "Total", txtCf));
		      ws.addCell(new jxl.write.Number(3, lineCounter, allTotal, numCf));
		      ws.addCell(new jxl.write.Number(6, lineCounter, successTotal, numCf));
		      ws.addCell(new jxl.write.Number(7, lineCounter, failTotal, numCf));
		   }else{
			  ws.removeRow(1);
		   }
		}else if("FB".equals(custNo)){
			if(mailJbs.size() >  0){
			    ws.addCell(new Label(3, lineCounter, "Total", txtCf));
			    ws.addCell(new jxl.write.Number(4, lineCounter, allTotal, numCf));
			    ws.addCell(new jxl.write.Number(5, lineCounter, pagesTotal, numCf));
			    ws.addCell(new jxl.write.Number(6, lineCounter, p1AcctsTot, numCf));
			    ws.addCell(new jxl.write.Number(7, lineCounter, p2AcctsTot, numCf));
			    ws.addCell(new jxl.write.Number(8, lineCounter, p3AcctsTot, numCf));
			    ws.addCell(new jxl.write.Number(9, lineCounter, p4AcctsTot, numCf));
			    ws.addCell(new jxl.write.Number(10, lineCounter, p5AcctsTot, numCf));
			    ws.addCell(new jxl.write.Number(11, lineCounter, p6AcctsTot, numCf));			    
			}else{
			    ws.removeRow(1);
			}
		}
	}
    
    public ActionForward dailyJobStatisticsReportSubmit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
    	ReportForm myForm = (ReportForm) form;
    	String queryDate = myForm.getQueryDate();
        String mpQueryDate = myForm.getQueryDate();
    	String taskType= myForm.getTaskType(); // LP or  MP/PS/DM
    	String orderBy= myForm.getOrderBy(); //USER or MACHINE
    	String empNo= myForm.getEmpNo();
    	String timePeriod= myForm.getTimePeriod();
    	String reportType= myForm.getReportType();
    	
    	
    	
        try {
        	HibernateSessionFactory.getSession().clear();
        	HibernateSessionFactory.getSession().getTransaction().begin();
        	
        	@SuppressWarnings("deprecation")
			Connection conn= HibernateSessionFactory.getSession().connection();  

        	
    		//產生PDF 檔
        	String serverPath = request.getSession().getServletContext().getRealPath("");;
            String fileName = serverPath + "\\report\\dailyJobStatisticsReport_"+orderBy+".jasper";
            String pdfFileName = "";
            if (reportType.equalsIgnoreCase("PDF"))
            	pdfFileName = "dailyJobStatisticsReport_" + new SimpleDateFormat("yyyyMMddHHmmssMs").format(new Date())+".pdf";
            else
            	pdfFileName = "dailyJobStatisticsReport_" + new SimpleDateFormat("yyyyMMddHHmmssMs").format(new Date())+".xls";           

            String outFileName = serverPath +"\\pdf\\"+pdfFileName;
            HashMap hm = new HashMap();
            hm.put("queryDate_Display",queryDate );            
            
            if (null== queryDate ||  queryDate.length() ==0){
            	queryDate = " 1=1 ";
            	mpQueryDate = " 1=1 ";
            }else{
            	mpQueryDate = " convert(char(11), js.MP_COMPLETED_DATE_BY_USER, 120)='" + queryDate + "' ";
            	queryDate = " convert(char(11), js.LP_COMPLETED_DATE_BY_USER, 120)='" + queryDate + "' ";            	
            }
            
            if (taskType.equalsIgnoreCase("LP")) {
                hm.put("taskType_LP","1=1" );
                hm.put("taskType_MP","1=2" );
            }
            else {
                hm.put("taskType_LP","1=2" );
                hm.put("taskType_MP","1=1" );
            }

            if (null!= empNo && empNo.equalsIgnoreCase("ALL"))
            	empNo = "1=1";
            else{
            	Employee employee = employeeService.findById(empNo);
            	if(employee != null)
            		empNo = employee.getUserId();
            	if (taskType.equalsIgnoreCase("LP")) {
            	   empNo = "js.LP_COMPLETED_USER='" + empNo + "'";
            	}else{
             	   empNo = "js.MP_COMPLETED_USER='" + empNo + "'";
            	}
            }
            

            if (null!= timePeriod && timePeriod.equalsIgnoreCase("ALL")) //全部
            	timePeriod="1=1";
            else if (null!= timePeriod && timePeriod.equalsIgnoreCase("DAY_SHIFT")) {
            	//早班
            	if (taskType.equalsIgnoreCase("LP"))
            	    timePeriod = " convert(char(5), js.LP_COMPLETED_DATE_BY_USER, 8) >='08:31' and convert(char(5), js.LP_COMPLETED_DATE_BY_USER, 8) <= '16:30' ";
            	else
            		timePeriod = " convert(char(5), js.MP_COMPLETED_DATE_BY_USER, 8) >='08:31' and convert(char(5), js.MP_COMPLETED_DATE_BY_USER, 8) <= '16:30' ";
            }else if (null!= timePeriod && timePeriod.equalsIgnoreCase("MIDDLE_SHIFT")){ 
            	//小夜班	
            	if (taskType.equalsIgnoreCase("LP"))
            	   timePeriod = " ( ( convert(char(5), js.LP_COMPLETED_DATE_BY_USER, 8) >='16:31' and convert(char(5), js.LP_COMPLETED_DATE_BY_USER, 8) <= '23:59' ) or ( convert(char(5), js.LP_COMPLETED_DATE_BY_USER, 8) >='00:00' and convert(char(5), js.LP_COMPLETED_DATE_BY_USER, 8) <= '00:30' ) ) ";
            	else
            	   timePeriod = " ( ( convert(char(5), js.MP_COMPLETED_DATE_BY_USER, 8) >='16:31' and convert(char(5), js.MP_COMPLETED_DATE_BY_USER, 8) <= '23:59' ) or ( convert(char(5), js.MP_COMPLETED_DATE_BY_USER, 8) >='00:00' and convert(char(5), js.MP_COMPLETED_DATE_BY_USER, 8) <= '00:30' ) ) ";
            }else{ 
            	//大夜班
            	if (taskType.equalsIgnoreCase("LP"))
            	   timePeriod = " convert(char(5), js.LP_COMPLETED_DATE_BY_USER, 8) >='00:31' and convert(char(5), js.LP_COMPLETED_DATE_BY_USER, 8) <= '08:30' ";
            	else
            	   timePeriod = " convert(char(5), js.MP_COMPLETED_DATE_BY_USER, 8) >='00:31' and convert(char(5), js.MP_COMPLETED_DATE_BY_USER, 8) <= '08:30' ";
            }

            
            hm.put("queryDate",  queryDate);
            hm.put("mpQueryDate", mpQueryDate);
            hm.put("empNo",empNo );     
            hm.put("timePeriod",timePeriod );                
            try {
                JasperPrint print = JasperFillManager.fillReport(fileName, hm, conn);

                // Create a PDF exporter
                
                JRExporter exporter = null;
                
                if (reportType.equalsIgnoreCase("PDF"))
                	exporter = new JRPdfExporter();
                else
                	exporter = new JRXlsExporter();
                
                // Configure the exporter (set output file name and print object)
                exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, outFileName);
                exporter.setParameter(JRExporterParameter.JASPER_PRINT, print);

                
                // Export the PDF file
                exporter.exportReport();
                
                // 埋入HistoryReport
                HistoryReport historyReport = new HistoryReport();
                historyReport.setReportName(pdfFileName);
                historyReport.setPdfPath(outFileName);
                Employee employee = SessionUtil.getAccount(request.getSession());
                historyReport.setEmpNo(employee.getEmpNo());
                Calendar today = Calendar.getInstance();
                historyReport.setCreateDate(today.getTime());
                historyReportService.save(historyReport);
                // end HistoryReport                
                

            	HibernateSessionFactory.getSession().getTransaction().commit();              
            } catch (JRException e) {
                e.printStackTrace();
                HibernateSessionFactory.getSession().getTransaction().rollback();
            } catch (Exception e) {
                e.printStackTrace();
                HibernateSessionFactory.getSession().getTransaction().rollback();
            }       
        	

            request.setAttribute("message", "列印成功");
            request.setAttribute("pdfFileName", pdfFileName);
            return mapping.findForward("pdfDownload");
        } catch (Exception e) {
            log.error("", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
    }

    public ActionForward amexJobReportQuery(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {

        try {
  
        	//取得AMEX 最近30筆 .csv 檔名
        	List amexCSVNameList = jobbagService.findAmexCSVFileName();
        	request.setAttribute("amexCSVNameList", amexCSVNameList);
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("amexJobReportQuery");
    }
    
    public ActionForward estimateProductionList(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
    	    ReportForm myForm = (ReportForm) form;
    	    String queryDateStr = myForm.getQueryDate();
    	    Calendar cal = Calendar.getInstance();
    	    String requestPage = request.getParameter("page");
    	    int page = (requestPage == null || requestPage.trim().equals("")) ? 0 : new Integer(request.getParameter("page"));
    	    int rows = request.getParameter("rows") == null ? 100 : new Integer(request.getParameter("rows"));
        try {
            if(queryDateStr != null && !"".equals(queryDateStr)){
                Date queryDate = new SimpleDateFormat("yyyy-MM-dd").parse(queryDateStr);
            	cal.setTime(queryDate);
            	cal.set(cal.get(Calendar.YEAR), cal.get(Calendar.MONTH), cal.get(Calendar.DATE), 23, 59, 59);

            	//查詢日是不是假日
            	boolean queryDateIsHoliday = false;             	            	
            	//不含queryDate，往前推算的上班日
            	Date prevNotHoliday = null;
            	Session session = HibernateSessionFactory.getSession();
            	Criteria criteria = session.createCriteria(Holiday.class);
            	List<Holiday> holidayList = criteria.add(Restrictions.eq("isHoliday", false)).add(Restrictions.lt("date", queryDate)).addOrder(Order.desc("date")).setFirstResult(0).setMaxResults(1).list();
            	prevNotHoliday = holidayList.get(0).getDate();            	
            	queryDateIsHoliday = ((Holiday)session.get(Holiday.class, queryDate)).getIsHoliday();
            	
            	//五種傳檔種類的cycle date
            	HashMap<String, String> category = new HashMap<String, String>();
            	criteria = session.createCriteria(Code.class);
            	Code instance = new Code();
            	instance.setCodeTypeName("JOB_BAG_STATUS");
            	List<Code> retList = criteria.add(Example.create(instance)).list();
            	for(Code code : retList){
            		category.put(code.getCodeKey(), code.getCodeValueTw());
            	}
            	
            	String custNo = myForm.getCustNo();
            	if(custNo == null || custNo.trim().equals("")){
            		custNo = "all";
            	}
            	List<Object[]> jobCodes = jobcodeService.queryJobTransfer(queryDate, queryDateIsHoliday, prevNotHoliday, category, custNo);
            	List<Object[]> list = new ArrayList<Object[]>();
            	int totalRowCount = 0;
     	        int rowCount = 0;
     	        int startRow = page * rows + 1;
     	        boolean startCounter = false;
     	        boolean endCounter = false;
     	        for(Object[] row : jobCodes){
     	        	//只計算jobCode
     	            if(row[4] == null){
     	               totalRowCount++;
     	        	   rowCount++;
     	            }
     	            if(startCounter && rowCount > rows){
     	            	startCounter = false;
     	            	endCounter = true;
     	            }
     	            if(row[4] == null && rowCount == startRow && !endCounter){
     	            	rowCount = 1;
     	            	startCounter = true;
     	            }
     	            if(startCounter && !endCounter){
     	            	list.add(row);
     	            }
     	        }
                request.setAttribute("totalPages", totalRowCount / rows + 1 );
                request.setAttribute("totalRows", totalRowCount);
                request.setAttribute("nowPage", page);
                if(totalRowCount / rows > page )
                	request.setAttribute("nextPage", page + 1);
                if(page > 0)
                	request.setAttribute("prevPage", page - 1 );
            	request.setAttribute("jobCodes", list);
            	request.setAttribute("category", category);
            	
            	Query query = session.createQuery("select distinct(customer) from Customer as customer inner join customer.jobCodes as jc where jc.transferType is not null and jc.transferType not in( 184, 182, 183 )order by customer.custNo");
            	List<Customer> customers = query.list();        
            	request.setAttribute("customers", customers);
            	String backToListURL = request.getRequestURI() +"?" + request.getQueryString();
                request.setAttribute("backToListURL", URLEncoder.encode(backToListURL, "UTF-8"));
            }
        	
        	
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("estimateProduction");
    }
    
    
    public ActionForward amexJobReportSubmit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
    	ReportForm myForm = (ReportForm) form;
    	
    	String CSVNames = myForm.getCSVName();

    	String reportType= myForm.getReportType();
    	
		String[] tokens = CSVNames.split(";"); //CSVName, cycleDate
		String CSVName = tokens[0];//jobBagNo
		String cycleDate = tokens[1];//row_index
    	
        try {
        	
        	HibernateSessionFactory.getSession().clear();
        	HibernateSessionFactory.getSession().getTransaction().begin();
        	
        	
        	@SuppressWarnings("deprecation")
			Connection conn= HibernateSessionFactory.getSession().connection();  

        	
    		//產生PDF 檔
        	String serverPath = request.getSession().getServletContext().getRealPath("");;
            String fileName1 = serverPath + "\\report\\amexJobReport_1.jasper";
            String fileName2 = serverPath + "\\report\\amexJobReport_2.jasper";            
            String pdfFileName1 = "";
            String pdfFileName2 = "";            
            Date now = new Date();
            if (reportType.equalsIgnoreCase("PDF")) {
            	pdfFileName1 = "amexJobReport_1_" + new SimpleDateFormat("yyyyMMddHHmmssMs").format(now)+".pdf";
            	pdfFileName2 = "amexJobReport_2_" + new SimpleDateFormat("yyyyMMddHHmmssMs").format(now)+".pdf";            	
            }
            else {
            	pdfFileName1 = "amexJobReport_1_" + new SimpleDateFormat("yyyyMMddHHmmssMs").format(now)+".xls";     
            	pdfFileName2 = "amexJobReport_2_" + new SimpleDateFormat("yyyyMMddHHmmssMs").format(now)+".xls";            	
            }

            String outFileName1 = serverPath +"\\pdf\\"+pdfFileName1;
            String outFileName2 = serverPath +"\\pdf\\"+pdfFileName2;            
            
            HashMap hm = new HashMap();
           
            hm.put("CSVName",  CSVName);
            hm.put("cycleDate",  cycleDate);
            hm.put("cycleNo",  CSVName.substring(4, 5));
            if(CSVName.startsWith("JGTW")){
            	hm.put("logisticName", "");
            }else if(CSVName.startsWith("DFTW")){
            	hm.put("logisticName", "logistic%");
            }else{
            	hm.put("logisticName", "");
            }
          
            try {
                JasperPrint print = JasperFillManager.fillReport(fileName1, hm, conn);
                JasperPrint print2 = JasperFillManager.fillReport(fileName2, hm, conn);                

                // Create a PDF exporter
                
                JRExporter exporter = null;
                
                if (reportType.equalsIgnoreCase("PDF"))
                	exporter = new JRPdfExporter();
                else
                	exporter = new JRXlsExporter();
                
                // Configure the exporter (set output file name and print object)
                exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, outFileName1);
                exporter.setParameter(JRExporterParameter.JASPER_PRINT, print);
            
                
                // Export the PDF file
                exporter.exportReport();
                
                exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, outFileName2);
                exporter.setParameter(JRExporterParameter.JASPER_PRINT, print2);    
                exporter.exportReport();
                
                // 埋入HistoryReport
                HistoryReport historyReport = new HistoryReport();
                historyReport.setReportName(pdfFileName1);
                historyReport.setPdfPath(outFileName1);
                Employee employee = SessionUtil.getAccount(request.getSession());
                historyReport.setEmpNo(employee.getEmpNo());
                Calendar today = Calendar.getInstance();
                historyReport.setCreateDate(today.getTime());
                historyReportService.save(historyReport);
                // end HistoryReport          
                

            	HibernateSessionFactory.getSession().getTransaction().commit();              
            } catch (JRException e) {
                e.printStackTrace();
                HibernateSessionFactory.getSession().getTransaction().rollback(); 
            } catch (Exception e) {
                e.printStackTrace();
                HibernateSessionFactory.getSession().getTransaction().rollback(); 
            }       
        	

            request.setAttribute("message", "列印成功");
            request.setAttribute("pdfFileName", pdfFileName1);
            request.setAttribute("pdfFileName2", pdfFileName2);            
            return mapping.findForward("pdfDownload");
        } catch (Exception e) {
            log.error("", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
    }    
    
    
    
    public ActionForward dailyJobControlReportQuery(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {

        try {
  

        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("dailyJobControlReportQuery");
    }
    
     
    
    
    public ActionForward dailyJobControlReportSubmit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
    	ReportForm myForm = (ReportForm) form;
    	
    	String queryDate = myForm.getQueryDate();
    	String reportType= myForm.getReportType();
    	
    	
    	
        try {
        	
        	HibernateSessionFactory.getSession().clear();
        	HibernateSessionFactory.getSession().getTransaction().begin();
        	
        	
        	@SuppressWarnings("deprecation")
			Connection conn= HibernateSessionFactory.getSession().connection();  

        	
    		//產生PDF 檔
        	String serverPath = request.getSession().getServletContext().getRealPath("");;
            String fileName = serverPath + "\\report\\dailyJobControlReport.jasper";
            String pdfFileName = "";
            if (reportType.equalsIgnoreCase("PDF"))
            	pdfFileName = "dailyJobControlReport_" + new SimpleDateFormat("yyyyMMddHHmmssMs").format(new Date())+".pdf";
            else
            	pdfFileName = "dailyJobControlReport_" + new SimpleDateFormat("yyyyMMddHHmmssMs").format(new Date())+".xls";           

            String outFileName = serverPath +"\\pdf\\"+pdfFileName;
            
            HashMap hm = new HashMap();
            hm.put("queryDate_Display",queryDate );        
            
            
            if (null== queryDate ||  queryDate.length() ==0)
            	queryDate = "1=1";
            else
            	queryDate = "convert(char(11),j.CYCLE_DATE, 120)='" + queryDate + "'";
            
            String otherCriteria = "1=1";  //之後再補查詢條件
           
            hm.put("queryDate",  queryDate);
            hm.put("otherCriteria",  otherCriteria);
          
            try {
                JasperPrint print = JasperFillManager.fillReport(fileName, hm, conn);

                // Create a PDF exporter
                
                JRExporter exporter = null;
                
                if (reportType.equalsIgnoreCase("PDF"))
                	exporter = new JRPdfExporter();
                else
                	exporter = new JRXlsExporter();
                
                // Configure the exporter (set output file name and print object)
                exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, outFileName);
                exporter.setParameter(JRExporterParameter.JASPER_PRINT, print);

                
                // Export the PDF file
                exporter.exportReport();
                
                
                // 埋入HistoryReport
                HistoryReport historyReport = new HistoryReport();
                historyReport.setReportName(pdfFileName);
                historyReport.setPdfPath(outFileName);
                Employee employee = SessionUtil.getAccount(request.getSession());
                historyReport.setEmpNo(employee.getEmpNo());
                Calendar today = Calendar.getInstance();
                historyReport.setCreateDate(today.getTime());
                historyReportService.save(historyReport);
                // end HistoryReport          
                

            	HibernateSessionFactory.getSession().getTransaction().commit();              
            } catch (JRException e) {
                e.printStackTrace();
                HibernateSessionFactory.getSession().getTransaction().rollback(); 
            } catch (Exception e) {
                e.printStackTrace();
                HibernateSessionFactory.getSession().getTransaction().rollback(); 
            }       
        	

            request.setAttribute("message", "列印成功");
            request.setAttribute("pdfFileName", pdfFileName);
            return mapping.findForward("pdfDownload");
        } catch (Exception e) {
            log.error("", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
    }    
    
    
    public ActionForward materialUsedReportQuery(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {

        try {
  

        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("materialUsedReportQuery");
    }    
    
    
    
    
    public ActionForward materialUsedReportSubmit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
    	ReportForm myForm = (ReportForm) form;
    	
    	String queryDateBegin = myForm.getQueryDateBegin();
    	String queryDateEnd = myForm.getQueryDateEnd();
    	String queryDate = "";
    	String custNo = myForm.getCustNo();    	
    	String reportType= myForm.getReportType();
    	
    	
    	
        try {
        	
        	HibernateSessionFactory.getSession().clear();
        	HibernateSessionFactory.getSession().getTransaction().begin();
        	
        	
        	@SuppressWarnings("deprecation")
			Connection conn= HibernateSessionFactory.getSession().connection();  
        	
        	

        	
    		//產生PDF 檔
        	String serverPath = request.getSession().getServletContext().getRealPath("");;
            String fileName = serverPath + "\\report\\materialUsedReport.jasper";
            String pdfFileName = "";
            List<String> xlsNames = null;
            if (reportType.equalsIgnoreCase("PDF"))
            	pdfFileName = "materialUsedReport_" + new SimpleDateFormat("yyyyMMddHHmmssMs").format(new Date())+".pdf";
            else{
            	//xlsNames = GenerateMaterialUsageReport.generateReport(queryResult, queryDateBegin, queryDateBegin);
            	//pdfFileName = "materialUsedReport_" + new SimpleDateFormat("yyyyMMddHHmmssMs").format(new Date())+".xls";           
            }
            String outFileName = serverPath +"\\pdf\\"+pdfFileName;
            

            if (null== queryDateBegin ||  queryDateBegin.length() ==0)
            	queryDate = "1=1";
            else
            	queryDate = "convert(char(10),j.CYCLE_DATE, 120)>='" + queryDateBegin + "' and convert(char(10),j.CYCLE_DATE, 120)<='" + queryDateEnd + "'";
            
            

            
            if (null!= custNo && custNo.equalsIgnoreCase("ALL"))
            	custNo = "1=1";
            else
            	custNo = "j.idf_CUST_NO = '" + custNo + "'";
            
            
            HashMap hm = new HashMap();
            hm.put("queryDateBegin_Display",queryDateBegin );
            hm.put("queryDateEnd_Display",queryDateEnd );

            
            hm.put("queryDate",  queryDate);
            hm.put("custNo",  custNo);            
          
            try {
                                
                if (reportType.equalsIgnoreCase("PDF")){
                	JasperPrint print = JasperFillManager.fillReport(fileName, hm, conn);
                    // Create a PDF exporter                    
                    JRExporter exporter = null;
                	exporter = new JRPdfExporter();
                
                
                    //  Configure the exporter (set output file name and print object)
                    exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, outFileName);
                    exporter.setParameter(JRExporterParameter.JASPER_PRINT, print);

                
                    // Export the PDF file
                    exporter.exportReport();
                
                    //  埋入HistoryReport
                    HistoryReport historyReport = new HistoryReport();
                    historyReport.setReportName(pdfFileName);
                    historyReport.setPdfPath(outFileName);
                    Employee employee = SessionUtil.getAccount(request.getSession());
                    historyReport.setEmpNo(employee.getEmpNo());
                    Calendar today = Calendar.getInstance();
                    historyReport.setCreateDate(today.getTime());
                    historyReportService.save(historyReport);
                    //  end HistoryReport                
                
            	    HibernateSessionFactory.getSession().getTransaction().commit();
                }else{
                	custNo = myForm.getCustNo();
                	List<Customer> customerList = new ArrayList<Customer>();
                	if(null == custNo || custNo.equalsIgnoreCase("ALL")){
                	    //customerList = customerService.findAll();
                	}else{
                		customerList.add(customerService.findById(custNo));
                	}
                	Map<String, List<Object[]>> resultMap = new HashMap<String, List<Object[]>>();
                	if(null != custNo && !custNo.equalsIgnoreCase("ALL")){
                       for(Customer customer : customerList){
                            String queryStr = "select jc.JOB_CODE_NO, jc.PROG_NM, j.LP_PCODE1 , sum(j.PAGES) pages , sum(j.sheets) sheets, " +
        			            "j.MP_PRINT_CODE , sum(j.ACCOUNTS) accounts , convert(varchar(10), j.CYCLE_DATE, 111)  cycleDate " +
        			            "from  job_bag j join job_code jc on j.idf_JOB_CODE_NO = jc.JOB_CODE_NO " +
        			            "join customer c on j.idf_CUST_NO = c.CUST_NO left outer join mpinfo mp on j.idf_MP_NO1 = mp.MP_NO " +
        			            "left outer join lpinfo lp on j.idf_LP_NO1 = lp.LP_NO " +
        			            "where (j.IS_DELETED = 0 or j.IS_DELETED is null) and j.IDF_CUST_NO = '" + customer.getCustNo() + "' and " + queryDate + " and (j.IS_DAMAGE = 0  or j.IS_DAMAGE is null)  " +
        			            " group by jc.JOB_CODE_NO, jc.PROG_NM, j.LP_PCODE1, j.MP_PRINT_CODE, convert(varchar(10), j.CYCLE_DATE, 111)  order by  jc.JOB_CODE_NO, cycleDate ";
                            
                            SQLQuery sqlQuery = (SQLQuery) HibernateSessionFactory.getSession().createSQLQuery(queryStr);
                         
             	            List<Object[]> retList = sqlQuery.list();
                            resultMap.put(customer.getCustNo() + "#_#" + customer.getCustName(), retList);                         
                       }
                	}else{
                		String queryStr = "select jc.JOB_CODE_NO, jc.PROG_NM, j.LP_PCODE1 , sum(j.PAGES) pages , sum(j.sheets) sheets, " +
			               "j.MP_PRINT_CODE , sum(j.ACCOUNTS) accounts , convert(varchar(10), j.CYCLE_DATE, 111)  cycleDate, " +
			               " c.CUST_NO, c.CUST_NAME " +
			               "from  job_bag j join job_code jc on j.idf_JOB_CODE_NO = jc.JOB_CODE_NO " +
			               "join customer c on j.idf_CUST_NO = c.CUST_NO left outer join mpinfo mp on j.idf_MP_NO1 = mp.MP_NO " +
			               "left outer join lpinfo lp on j.idf_LP_NO1 = lp.LP_NO " +			               
			               "where (j.IS_DELETED = 0 or j.IS_DELETED is null) and " + queryDate + " and (j.IS_DAMAGE = 0  or j.IS_DAMAGE is null)  " +
			               " group by jc.JOB_CODE_NO, jc.PROG_NM, j.LP_PCODE1, j.MP_PRINT_CODE, convert(varchar(10), j.CYCLE_DATE, 111), c.CUST_NO, c.CUST_NAME " +
			               " order by  c.CUST_NO, jc.JOB_CODE_NO, cycleDate ";

                        SQLQuery sqlQuery = (SQLQuery) HibernateSessionFactory.getSession().createSQLQuery(queryStr);
     	                List<Object[]> retList = sqlQuery.list();     	                
     	                String custNoKey = null;
     	                List<Object[]> custList = new ArrayList<Object[]>();
     	                if(retList != null)
     	                   for(int i = 0 ; i < retList.size() ; i++){
     	                	  Object[] objArray = retList.get(i); 
     	                      String custNoKeyTmp = objArray[8] + "#_#" + objArray[9];
     	                   
     	                      if(i == 0){
     	                	      custNoKey = custNoKeyTmp;
     	                	      custList.add(objArray);
     	                      }else if(i == (retList.size() - 1)){
     	                    	 //最後一個時要把list放進map中
     	                    	 custList.add(objArray);
     	                    	 resultMap.put(custNoKey, custList);
     	                      }else if(custNoKeyTmp.equals(custNoKey)){
     	                	      custList.add(objArray);
     	                      }else{
     	                    	  //客戶變成另一個時，先把回傳的list加到map中，接下來arrayList重設後再加入查詢出來的列
     	                	      resultMap.put(custNoKey, custList);
     	                	      custList = new ArrayList<Object[]>();
     	                	      custList.add(objArray);
     	                	      custNoKey = custNoKeyTmp; 
     	                      }
     	                		
                           //resultMap.put(customer.getCustNo() + "#_#" + customer.getCustName(), retList);
     	                }
                	}
                	if(resultMap.size() == 0){
                		request.setAttribute("message", "你所選擇的區間查無資料");
            			return mapping.findForward("message");
                	}
                    List<String> fileNames = GenerateMaterialUsageReport.generateReport(resultMap, queryDateBegin, queryDateEnd);
                    
                    request.setAttribute("fileNames", fileNames);
                    
                    //  埋入HistoryReport
                    for(String fileNm: fileNames){
                       HistoryReport historyReport = new HistoryReport();
                       historyReport.setReportName(fileNm);
                       historyReport.setPdfPath(SetParamValFilter.getRealPath("/pdf/" + fileNm));
                       Employee employee = SessionUtil.getAccount(request.getSession());
                       historyReport.setEmpNo(employee.getEmpNo());
                       Calendar today = Calendar.getInstance();
                       historyReport.setCreateDate(today.getTime());
                       historyReportService.save(historyReport);
                    }                    
                    //end HistoryReport                                    
            	    HibernateSessionFactory.getSession().getTransaction().commit();
                }
            	
            	
            } catch (JRException e) {
                e.printStackTrace();
                HibernateSessionFactory.getSession().getTransaction().rollback();
            } catch (Exception e) {
                e.printStackTrace();
                HibernateSessionFactory.getSession().getTransaction().rollback();
            }       
        	

            request.setAttribute("message", "列印成功");
            request.setAttribute("pdfFileName", pdfFileName);
            return mapping.findForward("pdfDownload");
        } catch (Exception e) {
            log.error("", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }finally{
        	if(HibernateSessionFactory.getSession().isOpen())
        	   HibernateSessionFactory.closeSession();
        }
    }      
    
    public ActionForward userAuthorityReportQuery(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {

        try {
  

        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("userAuthorityReportQuery");
    }     
    
    
    
    
    public ActionForward userAuthorityReportSubmit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
    	ReportForm myForm = (ReportForm) form;
    	

    	String userStatus = myForm.getUserStatus();    	
    	String reportType= myForm.getReportType();
    	
    	
    	
        try {
        	
        	HibernateSessionFactory.getSession().clear();
        	HibernateSessionFactory.getSession().getTransaction().begin();
        	
        	@SuppressWarnings("deprecation")
			Connection conn= HibernateSessionFactory.getSession().connection();  

        	
    		//產生PDF 檔
        	String serverPath = request.getSession().getServletContext().getRealPath("");;
            String fileName = serverPath + "\\report\\userAuthorityReport.jasper";
            String pdfFileName = "";
            if (reportType.equalsIgnoreCase("PDF"))
            	pdfFileName = "userAuthorityReport_" + new SimpleDateFormat("yyyyMMddHHmmssMs").format(new Date())+".pdf";
            else
            	pdfFileName = "userAuthorityReport_" + new SimpleDateFormat("yyyyMMddHHmmssMs").format(new Date())+".xls";           

            String outFileName = serverPath +"\\pdf\\"+pdfFileName;
            

            if (null!= userStatus && userStatus.equalsIgnoreCase("ALL"))
            	userStatus = "1=1";
            else if (null!= userStatus && userStatus.equalsIgnoreCase("enabled"))
            	userStatus = "ENABLED = 1 ";
            else
            	userStatus = "ENABLED = 0 ";
            	
            
            
            HashMap hm = new HashMap();
            hm.put("userStatus",  userStatus);

            try {
                JasperPrint print = JasperFillManager.fillReport(fileName, hm, conn);

                // Create a PDF exporter
                
                JRExporter exporter = null;
                
                if (reportType.equalsIgnoreCase("PDF"))
                	exporter = new JRPdfExporter();
                else
                	exporter = new JRXlsExporter();
                
                // Configure the exporter (set output file name and print object)
                exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, outFileName);
                exporter.setParameter(JRExporterParameter.JASPER_PRINT, print);

                
                // Export the PDF file
                exporter.exportReport();
                
                // 埋入HistoryReport
                HistoryReport historyReport = new HistoryReport();
                historyReport.setReportName(pdfFileName);
                historyReport.setPdfPath(outFileName);
                Employee employee = SessionUtil.getAccount(request.getSession());
                historyReport.setEmpNo(employee.getEmpNo());
                Calendar today = Calendar.getInstance();
                historyReport.setCreateDate(today.getTime());
                historyReportService.save(historyReport);
                // end HistoryReport            
                
            	HibernateSessionFactory.getSession().getTransaction().commit();             
                
            } catch (JRException e) {
                e.printStackTrace();
                HibernateSessionFactory.getSession().getTransaction().rollback(); 
            } catch (Exception e) {
                e.printStackTrace();
                HibernateSessionFactory.getSession().getTransaction().rollback(); 
            }       
        	

            request.setAttribute("message", "列印成功");
            request.setAttribute("pdfFileName", pdfFileName);
            return mapping.findForward("pdfDownload");
        } catch (Exception e) {
            log.error("", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
    }      
    
    public ActionForward LGformQuery(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {

        try {
  

        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("LGformQuery");
    }     
    
    public ActionForward LGformSubmit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
    	ReportForm myForm = (ReportForm) form;
    	

    	String custNo = myForm.getCustNo();    	
    	String reportType= myForm.getReportType();
    	
    	
    	
        try {
        	
        	HibernateSessionFactory.getSession().clear();
        	HibernateSessionFactory.getSession().getTransaction().begin();
        	
        	
        	@SuppressWarnings("deprecation")
			Connection conn= HibernateSessionFactory.getSession().connection();  

        	
    		//產生PDF 檔
        	String serverPath = request.getSession().getServletContext().getRealPath("");;
            String fileName = serverPath + "\\report\\empty_postage.jasper";
            String pdfFileName = "";

            pdfFileName = "empty_postage_" + new SimpleDateFormat("yyyyMMddHHmmssMs").format(new Date())+".pdf";
 

            String outFileName = serverPath +"\\pdf\\"+pdfFileName;
            
            String jbmHome = Util.getString("jbm.home.local") + "PostageImage\\";

            
            HashMap hm = new HashMap();
            hm.put("cust_no",  custNo);
            hm.put("jbmHome", jbmHome);            

            try {
                JasperPrint print = JasperFillManager.fillReport(fileName, hm, conn);

                // Create a PDF exporter
                
                JRExporter exporter = null;
                

                exporter = new JRPdfExporter();

                
                // Configure the exporter (set output file name and print object)
                exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, outFileName);
                exporter.setParameter(JRExporterParameter.JASPER_PRINT, print);

                
                // Export the PDF file
                exporter.exportReport();
                
                // 埋入HistoryReport
                HistoryReport historyReport = new HistoryReport();
                historyReport.setReportName(pdfFileName);
                historyReport.setPdfPath(outFileName);
                Employee employee = SessionUtil.getAccount(request.getSession());
                historyReport.setEmpNo(employee.getEmpNo());
                Calendar today = Calendar.getInstance();
                historyReport.setCreateDate(today.getTime());
                historyReportService.save(historyReport);
                // end HistoryReport                
                
            	HibernateSessionFactory.getSession().getTransaction().commit();
            	
            	
            } catch (JRException e) {
                e.printStackTrace();
                HibernateSessionFactory.getSession().getTransaction().rollback();
            } catch (Exception e) {
                e.printStackTrace();
                HibernateSessionFactory.getSession().getTransaction().rollback();
            }       
        	

            request.setAttribute("message", "列印成功");
            request.setAttribute("pdfFileName", pdfFileName);
            return mapping.findForward("pdfDownload");
        } catch (Exception e) {
            log.error("", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
    }         
    
    public ActionForward customerItemReportQuery(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {

        try {
  

        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("customerItemReportQuery");
    }  
    

    
    public ActionForward customerItemReportSubmit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
    	ReportForm myForm = (ReportForm) form;
    	
    	String queryDateBegin = myForm.getQueryDateBegin();
    	String queryDateEnd = myForm.getQueryDateEnd();
    	String queryDate = "";
    	String custNo = myForm.getCustNo();    	
    	String reportType= myForm.getReportType();

        try {
        	
        	HibernateSessionFactory.getSession().clear();
        	HibernateSessionFactory.getSession().getTransaction().begin();
        	
        	
        	@SuppressWarnings("deprecation")
			Connection conn= HibernateSessionFactory.getSession().connection();  

        	
    		//產生PDF 檔
        	String serverPath = request.getSession().getServletContext().getRealPath("");;
            String fileName = serverPath + "\\report\\customerItemReport.jasper";
            String pdfFileName = "";
            if (reportType.equalsIgnoreCase("PDF"))
            	pdfFileName = "customerItemReport_" + new SimpleDateFormat("yyyyMMddHHmmssMs").format(new Date())+".pdf";
            else
            	pdfFileName = "customerItemReport_" + new SimpleDateFormat("yyyyMMddHHmmssMs").format(new Date())+".xls";           

            String outFileName = serverPath +"\\pdf\\"+pdfFileName;
            

            
            if (null== queryDateBegin ||  queryDateBegin.length() ==0)
            	queryDate = "1=1";
            else
            	queryDate = "convert(char(10),j.CYCLE_DATE, 120)>='" + queryDateBegin + "' and convert(char(10),j.CYCLE_DATE, 120)<='" + queryDateEnd + "'";

            
            if (null!= custNo && custNo.equalsIgnoreCase("ALL"))
            	custNo = "1=1";
            else
            	custNo = "j.idf_CUST_NO = '" + custNo + "'";
            
            
            HashMap hm = new HashMap();
            hm.put("queryDateBegin_Display",queryDateBegin );
            hm.put("queryDateEnd_Display",queryDateEnd );

            
            hm.put("queryDate",  queryDate);
            hm.put("custNo",  custNo);            

            try {
                JasperPrint print = JasperFillManager.fillReport(fileName, hm, conn);

                // Create a PDF exporter
                
                JRExporter exporter = null;
                
                if (reportType.equalsIgnoreCase("PDF"))
                	exporter = new JRPdfExporter();
                else
                	exporter = new JRXlsExporter();
                
                // Configure the exporter (set output file name and print object)
                exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, outFileName);
                exporter.setParameter(JRExporterParameter.JASPER_PRINT, print);

                
                // Export the PDF file
                exporter.exportReport();
                
                // 埋入HistoryReport
                HistoryReport historyReport = new HistoryReport();
                historyReport.setReportName(pdfFileName);
                historyReport.setPdfPath(outFileName);
                Employee employee = SessionUtil.getAccount(request.getSession());
                historyReport.setEmpNo(employee.getEmpNo());
                Calendar today = Calendar.getInstance();
                historyReport.setCreateDate(today.getTime());
                historyReportService.save(historyReport);
                // end HistoryReport
                

            	HibernateSessionFactory.getSession().getTransaction().commit();
                
            } catch (JRException e) {
                e.printStackTrace();
                HibernateSessionFactory.getSession().getTransaction().rollback();
            } catch (Exception e) {
                e.printStackTrace();
                HibernateSessionFactory.getSession().getTransaction().rollback();
            }       
        	

            request.setAttribute("message", "列印成功");
            request.setAttribute("pdfFileName", pdfFileName);
            return mapping.findForward("pdfDownload");
        } catch (Exception e) {
            log.error("", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
    }        
    
    public ActionForward historyReportList(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
    	ActionMessages messages = new ActionMessages();
    	ReportForm myForm = (ReportForm) form;
        Map<String, String> empMap = historyReportService.getEmpnoList();
        try {
        	ValueList dataList = getValueList(request, myForm,"historyReportList");
            request.setAttribute("dataList", dataList);

            //將dataList 放到session 
            request.getSession().setAttribute("dataList", dataList);
            String backToListURL = request.getRequestURI() +"?" + request.getQueryString();
            //request.getSession().setAttribute("backToListURL", backToListURL);
            request.setAttribute("backToListURL", URLEncoder.encode(backToListURL, "UTF-8"));
            request.setAttribute("empMap", empMap);
        } catch (Exception e) {
            log.error("", e);
            messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
                    Global.MESSAGE_SYSTEMERROR_KEY));
            this.saveMessages(request, messages);
            return mapping.findForward(Global.FORWARD_INCLUDE_MESSAGE_KEY);
        }
        return mapping.findForward("historyReportList");
    }
    
    public ActionForward logisticReportList(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
    	ActionMessages messages = new ActionMessages();
    	ReportForm myForm = (ReportForm) form;
    	File logisticPath = new File(SetParamValFilter.getRealPath("/pdf/logistic"));
    	if(!logisticPath.exists())
    		logisticPath.mkdirs();
    	String[] file = logisticPath.list();
    	List<String> caFiles = new ArrayList<String>();
    	List<String> logisticFiles = new ArrayList<String>();
        try {
        	for(int i = file.length - 1 ; i >= 0 ; i--){
        		if(file[i].toLowerCase().startsWith("ca")){
        			caFiles.add(file[i]);
        		}else{
        			logisticFiles.add(file[i]);
        		}
        	}
        	request.setAttribute("caFiles", caFiles);
        	request.setAttribute("logisticFiles", logisticFiles);
            String backToListURL = request.getRequestURI() +"?" + request.getQueryString();
            //request.getSession().setAttribute("backToListURL", backToListURL);
            request.setAttribute("backToListURL", URLEncoder.encode(backToListURL, "UTF-8"));
            
        } catch (Exception e) {
            log.error("", e);
            messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
                    Global.MESSAGE_SYSTEMERROR_KEY));
            this.saveMessages(request, messages);
            return mapping.findForward(Global.FORWARD_INCLUDE_MESSAGE_KEY);
        }
        return mapping.findForward("logisticFilesDownload");
    }
    
    public ActionForward dailyLogementReportQuery(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {

        try {
  

        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("dailyLogementReportQuery");
    } 
    
    public ActionForward dailyLogementReportSubmit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
    	ReportForm myForm = (ReportForm) form;
    	
    	String queryDateBegin = myForm.getQueryDateBegin();
    	String queryDateEnd = myForm.getQueryDateEnd();
    	
    	String queryDate = "";
    	String custNo = myForm.getCustNo();
    	boolean completedLg = "0".equals(myForm.getCompletedLg())? false : true;

        try {
        	List<JobBag> jobbagList = null;
        	if(completedLg){
        	    jobbagList = jobbagService.findJobbagListByDailyLogementReport(custNo, queryDateBegin, queryDateEnd);
        	    
        	}else{
        		jobbagList = jobbagService.findJobbagListByDailyLogementReportNotCompleted(custNo, queryDateBegin, queryDateEnd);
        	}

        	if(jobbagList.size() > 5000){
        		request.setAttribute("message", "你選擇的範圍查詢出來的工單超過5000筆，產生報表時間過長，將嚴重拖累系統效能，請縮小查詢範圍，謝謝");
    			return mapping.findForward("message");
        	}
        		
        	//後面增加的，不想改太多，所以分兩段query來查詢
        	Map<Integer, Set<String>> jobBagNoMap = new HashMap<Integer, Set<String>>();
        	int i = 0;
        	int counter = 1;
        	Set<String> jobBagNos = new HashSet<String>();
        	for(JobBag j : jobbagList){
        		i++;
        		jobBagNos.add(j.getJobBagNo());
        		if(i <= 500){
        			//什麼都不做
        		}else{
        		  i = 0;        		  
        		  jobBagNoMap.put(counter, jobBagNos);
        		  jobBagNos = new HashSet<String>();
        		  counter ++;
        		}        		        		        		
        	}
        	jobBagNoMap.put(counter, jobBagNos);
        	Session session = HibernateSessionFactory.getSession();
        	
        	Set<Integer> keySet = jobBagNoMap.keySet();
        	Map<String, String> statementNoMap = new HashMap<String, String>();
        	
        	for(Integer key : keySet){
        		String jobBagNoStrs = "";
        	    Set<String> jobbagNos = jobBagNoMap.get(key);
        	    for(String jobBagNo : jobbagNos){
        	    	jobBagNoStrs += " jobBagNo like '%" + jobBagNo + "%' or";
        	    }
        	    if(jobBagNoStrs.endsWith("or"))
            		jobBagNoStrs = jobBagNoStrs.substring(0, jobBagNoStrs.length() - 2);        	    
      	        List<OldLgform> oldlgforms = session.createQuery("from OldLgform where " + jobBagNoStrs + " order by id").list();
      	        for(OldLgform lgform : oldlgforms){
      		      if(lgform.getJobBagNo() != null && lgform.getStatementNo() != null){
      		    	 String[] jobBagNoArr = lgform.getJobBagNo().split(",");
     		    	 for(String jobBagNo : jobBagNoArr){
     		    		if(!jobBagNo.equals("")){
     		    		   String statementNo = statementNoMap.get(jobBagNo) == null ? "" : statementNoMap.get(jobBagNo);
      		    		   if(!statementNo.equals("")){
      		    			  String[] splitStrs = statementNo.split(",");
      		    			  boolean match = false;
      		    			  for(String stateNo : splitStrs){
      		    				  if(stateNo.equals(lgform.getStatementNo() + "")){
      		    					  match = true;
      		    				  }
      		    			  }
      		    			  if(!match)
      		    			     statementNo += "," + lgform.getStatementNo();
      		    		   }else{
     		    			  statementNo = lgform.getStatementNo() + "";
      		    		   }
      			           statementNoMap.put(jobBagNo, statementNo);
     		    		}
     		    	 }
      		      }
      	        }
        	}
        	
        	if(keySet.size() > 0){
        	   HibernateSessionFactory.closeSession();
        	   request.setAttribute("statementNoMap", statementNoMap);
               request.setAttribute("custNo", custNo);
               request.setAttribute("queryDateBegin", queryDateBegin);
               request.setAttribute("queryDateEnd", queryDateEnd);            
               request.setAttribute("jobbagList", jobbagList);
        	}
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
		return mapping.findForward("dailyLogementReport");
    }
    
    public ActionForward dmSummaryReportQuery(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {

        try {
  

        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("dmSummaryReportQuery");
    }      
    
    
    public ActionForward dmSummaryReportSubmit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
    	ReportForm myForm = (ReportForm) form;
    	
    	String queryDateBegin = myForm.getQueryDateBegin();
    	String queryDateEnd = myForm.getQueryDateEnd();
    	String queryDate = "";
    	String custNo = myForm.getCustNo();    	

        try {
        	List jobbagList = jobbagService.findJobbagListByDmSummaryReport(custNo, queryDateBegin, queryDateEnd);
            request.setAttribute("custNo", custNo);
            request.setAttribute("queryDateBegin", queryDateBegin);
            request.setAttribute("queryDateEnd", queryDateEnd);            
            request.setAttribute("jobbagList", jobbagList);            
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
		return mapping.findForward("dmSummaryReport");
    }
    
    private ReportForm getScheduleMail(ReportForm myForm, String url){
    	Query query = HibernateSessionFactory.getSession().createQuery("from SchedulerTime where custNo = ? and url = ? and purpose is null ");
    	if(myForm.getCustNo() == null)
    		myForm.setCustNo("CT");
    	List<SchedulerTime> timers =  query.setString(0, myForm.getCustNo()).setString(1, url).list();
    	
    	if(timers != null && timers.size() == 1){
    		SchedulerTime timer = timers.get(0);
    		myForm.setScheduleTime(timer.getSchedulerHour());

    		Set<SchedulerEmail> emails = timer.getSchedulerEmails();
    		List<String> emailStrs = new ArrayList<String>();
    		for(SchedulerEmail sEmail : emails){
    			emailStrs.add(sEmail.getEmail());
    		}
    		emailStrs.add("");
			emailStrs.add("");
    		if(emailStrs.size() % 2 == 1){    			
    			emailStrs.add("");
    		}
    		
    		myForm.setScheduleEmails(emailStrs.toArray(new String[emailStrs.size()]));
    		
    	}
    	return myForm;
    	
    }
    
    
    private ValueList getValueList(HttpServletRequest request, ReportForm myForm, String entryKey) {
        Map param = new HashMap();
        String emp_no = null;        
        if(myForm.getEmpNo() != null && !myForm.getEmpNo().equals("")){
        	emp_no = myForm.getEmpNo();
        }        
        if (emp_no != null && !"all".equals(emp_no))
        	param.put("emp_no", emp_no);
        if(myForm.getQueryDateBegin() != null && !myForm.getQueryDateBegin().equals("")){
        	param.put("create_date_begin", myForm.getQueryDateBegin() + " 00:00:00.000");        	
        }
        if(myForm.getQueryDateEnd() != null && !myForm.getQueryDateEnd().equals("")){
        	param.put("create_date_end", myForm.getQueryDateEnd() + " 23:59:59.998");        	
        }
        if(myForm.getReportName() != null && !myForm.getReportName().equals("")){
        	param.put("report_name", "%" + myForm.getReportName() + "%");        	
        }
        
        
        ValueList valueList = valueListService.getValueList(request, entryKey, param);
        return valueList;
    }


	public static String getCitimailurl() {
		return citiMailUrl;
	}
		
}