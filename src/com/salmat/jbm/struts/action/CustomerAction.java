/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.salmat.jbm.struts.action;

import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.mlw.vlh.ValueList;
import net.mlw.vlh.ValueListInfo;
import net.mlw.vlh.web.ValueListRequestUtil;
import net.sf.json.JSONArray;
import net.sf.json.JsonConfig;
import net.sf.json.util.CycleDetectionStrategy;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.beanutils.PropertyUtils;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.action.DynaActionForm;
import org.apache.struts.actions.DispatchAction;
import org.hibernate.Transaction;


import com.salmat.jbm.bean.LcinfoJSON;
import com.salmat.jbm.bean.LginfoJSON;
import com.salmat.jbm.bean.LpinfoJSON;
import com.salmat.jbm.bean.MpinfoJSON;
import com.salmat.jbm.bean.PsinfoJSON;
import com.salmat.jbm.bean.ReturninfoJSON;
import com.salmat.jbm.hibernate.*;
import com.salmat.jbm.service.EmployeeService;
import com.salmat.jbm.service.LPInfoService;
import com.salmat.jbm.service.ValueListService;
import com.salmat.jbm.struts.form.*;
import com.salmat.jbm.hibernate.HibernateSessionFactory;
import com.painter.util.Global;
import com.painter.util.SessionUtil;
import com.painter.util.Util;
import com.salmat.jbm.service.CustomerService;

/**
 * MyEclipse Struts Creation date: 02-23-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action parameter="fid" validate="true"
 * @struts.action-forward name="init" path=".findUserAccount"
 */
public class CustomerAction extends DispatchAction {
    /*
     * Generated Methods
     */
    private static final CustomerService customerService = CustomerService.getInstance();
    private static final EmployeeService employeeService = EmployeeService.getInstance();
    private static ValueListService valueListService = ValueListService.getInstance();    
    private static Logger log = Logger.getLogger(CustomerAction.class);
    
    
    private static final LPInfoService lpinfoService = LPInfoService.getInstance();

    /**
     * Method execute
     * 
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    protected ActionForward unspecified(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) {

        return mapping.findForward("homepage");
    }

    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
    	ActionMessages messages = new ActionMessages();
        CustomerForm myForm = (CustomerForm) form;

        try {
        	
        	List<Employee> employees = employeeService.getSalesEmployees();
        	
        	HashMap<String, String> salesMap = new HashMap<String, String>();
        	
        	for(Employee employee: employees){
        		salesMap.put(employee.getEmpNo(), employee.getUserId());
        	}
        	
        	request.setAttribute("salesMap", salesMap);
        	ValueList dataList = getValueList(request, myForm,"customerList");
        	String idList = "";
        	for(Object obj : dataList.getList()){
            	idList += BeanUtils.getProperty(obj, "cust_no") + ",";
            }
            request.setAttribute("idList", idList);        	
            request.setAttribute("dataList", dataList);
            
            //將dataList 放到session 
            request.setAttribute("dataList", dataList);
            String backToListURL = request.getRequestURI() +"?" + request.getQueryString();
            //request.getSession().setAttribute("backToListURL", backToListURL);
            request.setAttribute("backToListURL", URLEncoder.encode(backToListURL, "UTF-8"));

        } catch (Exception e) {
            log.error("", e);
            messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
                    Global.MESSAGE_SYSTEMERROR_KEY));
            this.saveMessages(request, messages);
            return mapping.findForward(Global.FORWARD_INCLUDE_MESSAGE_KEY);
        }
        return mapping.findForward("list");
    }

    
    public ActionForward view(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        CustomerForm myForm = (CustomerForm) form;
        String CustomerNo=null;
        Customer customer = null;
        if (null != myForm.getCustNo()) {
        	CustomerNo = myForm.getCustNo();
        	customer = customerService.findById(CustomerNo);
        }

        try {
        	request.setAttribute("ACTION_MODE", "VIEW");
            request.setAttribute("customer", customer);
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("editInit");
    }
    
    
    public ActionForward editInit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        CustomerForm myForm = (CustomerForm) form;
        String customerNo = myForm.getCustNo();
        
        String prevJobCodeNo = "";
        String nextJobCodeNo = "";
        String[] idList = request.getParameter("idList") == null ? null : request.getParameter("idList").split(",");
        int nowPage = 0;
        if(idList != null){
           for(int i = 0 ; i < idList.length ; i++){
                if(idList[i].equalsIgnoreCase(customerNo)){
                	nowPage = i + 1;
                	if(i != 0)
                		prevJobCodeNo = idList[i - 1];
                	if(i != idList.length -1)
                		nextJobCodeNo = idList[i + 1];
                }
           }
        }
        request.setAttribute("pagesIndex", nowPage + "/" + idList.length);
        
        request.setAttribute("prevId", prevJobCodeNo);
        request.setAttribute("nextId", nextJobCodeNo);
        

        try {
        	HibernateSessionFactory.getSession().clear();
        	Customer customer = customerService.findById(customerNo);

        	request.setAttribute("ACTION_MODE", "EDIT");
            request.setAttribute("customer", customer);
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("editInit");
    }
    
    
    public ActionForward editSubmit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        CustomerForm myForm = (CustomerForm) form;
        String CustomerNo = myForm.getCustNo();
        String empNo = myForm.getEmpNo();

        try {
        	HibernateSessionFactory.getSession().clear();
        	HibernateSessionFactory.getSession().getTransaction().begin();

        	Customer customer = customerService.findById(CustomerNo);
        	BeanUtils.copyProperties(customer,myForm);

        	//設定負責人員資料
        	Employee employee = employeeService.findById(empNo);
        	customer.setEmployee(employee);
            customerService.save(customer);
            HibernateSessionFactory.getSession().getTransaction().commit();
            request.setAttribute("message", "修改成功");
            
            
            //導回編輯頁面
        	request.setAttribute("ACTION_MODE", "EDIT");
            request.setAttribute("customer", customer);
            return mapping.findForward("editInit");
            
            
            //return mapping.findForward("message");
        } catch (Exception e) {
            log.error("", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }

    }
    

    /** 
     * 複製新增
     */
    public ActionForward saveAsNewInit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        CustomerForm myForm = (CustomerForm) form;
        String CustomerNo = myForm.getCustNo();

        try {
        	Customer customer = customerService.findById(CustomerNo);

            request.setAttribute("customer", customer);
            request.setAttribute("ACTION_MODE", "SAVE_AS_NEW");
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("editInit");
    }    
    
    
    
    
    public ActionForward checkPKExist(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        CustomerForm myForm = (CustomerForm) form;
        String CustomerNo = myForm.getCustNo();

        try {
        	Customer customer = customerService.findById(CustomerNo);
        	if (null ==customer)
        		request.setAttribute("result", "NON_EXIST");
        	else
        		request.setAttribute("result", "EXIST");
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("jsonMessage");
    }       
    
    /** 
     * AJAX 呼叫, 取得客戶的LPinfo
     */    
    public ActionForward getCustomerLPList(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        CustomerForm myForm = (CustomerForm) form;
        String CustomerNo = myForm.getCustNo();

        try {

        	List list = customerService.getCustomerLPList(CustomerNo);

        	JSONArray  jsonObject = JSONArray.fromObject(list);
    		request.setAttribute("jsonObject", jsonObject);        	
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("jsonObject");
    }
    
    /** 
     * AJAX 呼叫, 取得客戶的MPinfo
     */    
    public ActionForward getCustomerMPList(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        CustomerForm myForm = (CustomerForm) form;
        String CustomerNo = myForm.getCustNo();

        try {
        	List list = customerService.getCustomerMPList(CustomerNo);
        	JSONArray  jsonObject = JSONArray.fromObject(list);
    		request.setAttribute("jsonObject", jsonObject);        	
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("jsonObject");
    }
    
    /** 
     * AJAX 呼叫, 取得客戶的PSinfo
     */    
    public ActionForward getCustomerPSList(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        CustomerForm myForm = (CustomerForm) form;
        String CustomerNo = myForm.getCustNo();

        try {
        	List list = customerService.getCustomerPSList(CustomerNo);
        	JSONArray  jsonObject = JSONArray.fromObject(list);
    		request.setAttribute("jsonObject", jsonObject);        	
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("jsonObject");
    }
    
    /** 
     * AJAX 呼叫, 取得客戶的LGinfo
     */    
    public ActionForward getCustomerLGList(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        CustomerForm myForm = (CustomerForm) form;
        String CustomerNo = myForm.getCustNo();

        try {
       		List list = customerService.getCustomerLGList(CustomerNo);
        	JSONArray  jsonObject = JSONArray.fromObject(list);
    		request.setAttribute("jsonObject", jsonObject);        	
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("jsonObject");
    }
    
    /** 
     * AJAX 呼叫, 取得客戶的Returninfo
     */    
    public ActionForward getCustomerReturnList(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        CustomerForm myForm = (CustomerForm) form;
        String CustomerNo = myForm.getCustNo();

        try {
       		List list = customerService.getCustomerReturnList(CustomerNo);
        	JSONArray  jsonObject = JSONArray.fromObject(list);
    		request.setAttribute("jsonObject", jsonObject);        	
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("jsonObject");
    }    
    
    
    /** 
     * AJAX 呼叫, 取得客戶的LCinfo , 管制表
     */    
    public ActionForward getCustomerLCList(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        CustomerForm myForm = (CustomerForm) form;
        String CustomerNo = myForm.getCustNo();

        try {
       		List list = customerService.getCustomerLCList(CustomerNo);
        	JSONArray  jsonObject = JSONArray.fromObject(list);
    		request.setAttribute("jsonObject", jsonObject);        	
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("jsonObject");
    }
    
    public ActionForward addInit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        CustomerForm myForm = (CustomerForm) form;

        try {
        	Customer customer = new Customer();

            request.setAttribute("customer", customer);
            request.setAttribute("ACTION_MODE", "ADD");
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("editInit");
    }    
    

    
    public ActionForward addSubmit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        CustomerForm myForm = (CustomerForm) form;
        String empNo = myForm.getEmpNo();


        try {
        	HibernateSessionFactory.getSession().clear();
        	HibernateSessionFactory.getSession().getTransaction().begin();
        	
        	Customer customer = new Customer();
        	BeanUtils.copyProperties(customer,myForm);

        	//設定負責人員資料
        	Employee employee = employeeService.findById(empNo);
        	customer.setEmployee(employee);
            customerService.save(customer);
            HibernateSessionFactory.getSession().getTransaction().commit();
            request.setAttribute("message", "新增成功");
            return mapping.findForward("message");
        } catch (Exception e) {
            log.error("", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }

    }
    
        
    
    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        CustomerForm myForm = (CustomerForm) form;
        String CustomerNo = myForm.getCustNo();


        try {
        	HibernateSessionFactory.getSession().getTransaction().begin();
        	Customer customer = customerService.findById(CustomerNo);

            customerService.delete(customer);
            HibernateSessionFactory.getSession().getTransaction().commit();
            request.setAttribute("message", "刪除成功");  

        } catch (Exception e) {
            log.error("delete catch exception", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
        	request.setAttribute("message", "帳號被引用, 不能刪除");  
			return mapping.findForward("message");
        }
        return mapping.findForward("message");
    }    
    
    
    private ValueList getValueList(HttpServletRequest request, CustomerForm myForm, String entryKey) {
        Map<String, String> param = new HashMap<String, String>();

        String cust_no = myForm.getCustNo();
        if (cust_no != null)
        	param.put("cust_no", cust_no);
        String easy_name = myForm.getEasyName();
        if (easy_name != null )
        	param.put("easy_name", easy_name);
        String emp_no = myForm.getEmpNo();
        if (emp_no != null && !emp_no.trim().equals(""))
        	param.put("emp_no", emp_no);
        String user_id = myForm.getQueryUserId();
        if (user_id != null )
        	param.put("user_id", user_id);
        
        ValueList valueList = valueListService.getValueList(request, entryKey, param);
        return valueList;
    }
    
}