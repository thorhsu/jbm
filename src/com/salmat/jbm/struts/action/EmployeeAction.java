/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.salmat.jbm.struts.action;

import java.net.URLEncoder;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.mlw.vlh.ValueList;
import net.mlw.vlh.ValueListInfo;
import net.mlw.vlh.web.ValueListRequestUtil;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.action.DynaActionForm;
import org.apache.struts.actions.DispatchAction;
import org.hibernate.Transaction;

import com.salmat.jbm.hibernate.*;
import com.salmat.jbm.service.CodeService;
import com.salmat.jbm.service.ValueListService;
import com.salmat.jbm.struts.form.*;
import com.salmat.jbm.hibernate.HibernateSessionFactory;
import com.painter.util.Global;
import com.painter.util.SessionUtil;
import com.painter.util.Util;
import com.salmat.jbm.service.EmployeeService;

/**
 * MyEclipse Struts Creation date: 02-23-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action parameter="fid" validate="true"
 * @struts.action-forward name="init" path=".findUserAccount"
 */
public class EmployeeAction extends DispatchAction {
    /*
     * Generated Methods
     */
    private static final EmployeeService employeeService = EmployeeService.getInstance();
    private static final CodeService codeService = CodeService.getInstance();
    private static ValueListService valueListService = ValueListService.getInstance();    
    private static Logger log = Logger.getLogger(EmployeeAction.class);

    /**
     * Method execute
     * 
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    protected ActionForward unspecified(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) {

        return mapping.findForward("homepage");
    }

    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
    	ActionMessages messages = new ActionMessages();
        EmployeeForm myForm = (EmployeeForm) form;

        try {
        	ValueList dataList = getValueList(request, myForm,"employeeList");
            request.setAttribute("dataList", dataList);
            
            //將dataList 放到session 
            request.getSession().setAttribute("dataList", dataList);
            String backToListURL = request.getRequestURI() +"?" + request.getQueryString();
            //request.getSession().setAttribute("backToListURL", backToListURL);             
            request.setAttribute("backToListURL", URLEncoder.encode(backToListURL, "UTF-8"));
        } catch (Exception e) {
            log.error("", e);
            messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
                    Global.MESSAGE_SYSTEMERROR_KEY));
            this.saveMessages(request, messages);
            return mapping.findForward(Global.FORWARD_INCLUDE_MESSAGE_KEY);
        }
        return mapping.findForward("list");
    }

    
    public ActionForward view(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        EmployeeForm myForm = (EmployeeForm) form;
        String employeeNo=null;
        Employee employee = null;
    	HibernateSessionFactory.getSession().clear();        
        if (null != myForm.getEmpNo()) {
        	employeeNo = myForm.getEmpNo();
        	employee = employeeService.findById(employeeNo);
        }
    


        try {
        	request.setAttribute("ACTION_MODE", "VIEW");
            request.setAttribute("employee", employee);
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("editInit");
    }
    
    
    
    
    public ActionForward editMyprofileInit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        

        try {
        	HibernateSessionFactory.getSession().clear();        	
            Employee sessionAccount = SessionUtil.getAccount(request.getSession());
            Employee employee = employeeService.findById(sessionAccount.getEmpNo());
            
            
            request.setAttribute("ACTION_MODE", "EDIT");
            request.setAttribute("employee", employee);
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("editInit");
    }
    
    
    public ActionForward editInit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        EmployeeForm myForm = (EmployeeForm) form;
        String employeeNo = myForm.getEmpNo();

        try {
        	HibernateSessionFactory.getSession().clear();
            Employee employee = employeeService.findById(employeeNo);
            request.setAttribute("ACTION_MODE", "EDIT");
            request.setAttribute("employee", employee);
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("editInit");
    }
    
    
    
    
    public ActionForward editSubmit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        EmployeeForm myForm = (EmployeeForm) form;

        String employeeNo = myForm.getEmpNo();
        String password = myForm.getPassword();
        Integer codeDept = myForm.getCodeDept();
        String adPassword = myForm.getAdPassword();

        try {
        	HibernateSessionFactory.getSession().clear();
        	HibernateSessionFactory.getSession().getTransaction().begin();

            Employee employee = employeeService.findById(employeeNo);
            String oldPassword = employee.getPassword();            
            String oldAdPwd = employee.getAdPassword();
        	BeanUtils.copyProperties(employee,myForm);
        	employee.setPassword(oldPassword);

            if(null == adPassword || adPassword.trim().equals("")){
            	employee.setAdPassword(oldAdPwd);
            }else{
            	employee.setAdPassword(Util.hash(adPassword));
            }
        	
            //若使用者沒輸入新密碼, 則回壓原密碼
            if (null == password || password.length()==0)
            	employee.setPassword(oldPassword);
            else {
            	String ret = employeeService.checkPasswordRule(request, employee, password);
            	if (ret.equalsIgnoreCase("PASS")) {
            		employee.setPassword(Util.hash(password));
            		if (null== employee.getPassword1()) employee.setPassword1(Util.hash(oldPassword));
            		else if (null== employee.getPassword2()) employee.setPassword2(Util.hash(oldPassword));
            		else if (null== employee.getPassword3()) employee.setPassword3(Util.hash(oldPassword));
            		else if (null== employee.getPassword4()) employee.setPassword4(Util.hash(oldPassword));
            		else if (null== employee.getPassword5()) employee.setPassword5(Util.hash(oldPassword));
            		else {
            			//5組都用完了, 大搬家
            			employee.setPassword1(employee.getPassword2());
            			employee.setPassword2(employee.getPassword3());
            			employee.setPassword3(employee.getPassword4());
            			employee.setPassword4(employee.getPassword5());
            			employee.setPassword5(Util.hash(oldPassword));
            			
            		}
            	} 	else {
                    request.setAttribute("message", ret);
                    return mapping.findForward("message");        		
            	}            	
            }
            
            //設定部門代碼
            Code code = codeService.findById(codeDept);
            employee.setCode(code);
            
    		Calendar calendar = Calendar.getInstance();
    		Date now = new Date();
    		calendar.setTime(now);
            employee.setModifyDate(calendar.getTime());
            
            Calendar fiveweekAgo = Calendar.getInstance();
         	fiveweekAgo.set(fiveweekAgo.get(Calendar.YEAR), fiveweekAgo.get(Calendar.MONTH) , fiveweekAgo.get(Calendar.DATE) - 35 );
         	Date empLogDate = (employee.getLatestLoginDate() == null ? new Date() : employee.getLatestLoginDate());
            if(employee.getEnabled() != null && employee.getEnabled() && empLogDate.compareTo(fiveweekAgo.getTime()) < 0){
            	//如果是enabled而且超過5周未登入，把上次登入時間改為null
                employee.setLatestLoginDate(null);
            }
            

            employeeService.save(employee);            
            HibernateSessionFactory.getSession().getTransaction().commit();
            
            SysLog syslog = new SysLog();
            syslog.setCreateDate(new Date());
            syslog.setIsException(false);
            syslog.setLogType("EMP_PERSIST");
            syslog.setSubject("修改員工基本資料");
            syslog.setMessageBody(employee.getEmpNo() + ":" + employee.getUserId() + ":" + employee.getUserName() + ":status:" +  employee.getEnabled() + ":chg pwd:" +  !(null == password || password.length()==0) + ":" + SessionUtil.getAccount(request.getSession()).getUserId());
            HibernateSessionFactory.getSession().save(syslog);
            request.setAttribute("message", "修改成功");
            return mapping.findForward("message");
        } catch (Exception e) {        	
            log.error("", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
            SysLog syslog = new SysLog();
            syslog.setCreateDate(new Date());
            syslog.setIsException(true);
            syslog.setLogType("EMP_PERSIST");
            syslog.setSubject("修改員工基本資料");
            syslog.setMessageBody(myForm.getEmpNo() + ":" + myForm.getUserId() + ":" + e.getMessage() + ":" + SessionUtil.getAccount(request.getSession()).getUserId());
            HibernateSessionFactory.getSession().save(syslog);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        //return mapping.findForward("viewAccount");
    }
    
    
    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        EmployeeForm myForm = (EmployeeForm) form;
        String employeeNo = myForm.getEmpNo();


        try {
        	HibernateSessionFactory.getSession().getTransaction().begin();
            Employee employee = employeeService.findById(employeeNo);

            employeeService.delete(employee);
            
            SysLog syslog = new SysLog();
            syslog.setCreateDate(new Date());
            syslog.setIsException(false);
            syslog.setLogType("EMP_PERSIST");
            syslog.setSubject("刪除員工基本資料");
            syslog.setMessageBody(employee.getEmpNo() + ":" + employee.getUserId() + ":" + employee.getUserName() + ":" + SessionUtil.getAccount(request.getSession()).getUserId() );
            HibernateSessionFactory.getSession().save(syslog);            
            HibernateSessionFactory.getSession().getTransaction().commit();
            request.setAttribute("message", "刪除成功");  

        } catch (Exception e) {
            log.error("delete catch exception", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
            SysLog syslog = new SysLog();
            syslog.setCreateDate(new Date());
            syslog.setIsException(true);
            syslog.setLogType("EMP_PERSIST");
            syslog.setSubject("刪除員工基本資料");
            syslog.setMessageBody(myForm.getEmpNo() + ":" + myForm.getUserId() + ":" + e.getMessage() + ":" + SessionUtil.getAccount(request.getSession()).getUserId());
            HibernateSessionFactory.getSession().save(syslog);
            
        	request.setAttribute("message", "帳號被引用, 不能刪除");  
			return mapping.findForward("message");
        }
        return mapping.findForward("message");
    }    
    
    
    //複製新增
    public ActionForward saveAsNewInit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        EmployeeForm myForm = (EmployeeForm) form;
        String employeeNo = myForm.getEmpNo();

        try {
            Employee employee = employeeService.findById(employeeNo);

            request.setAttribute("employee", employee);
            request.setAttribute("ACTION_MODE", "SAVE_AS_NEW");
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("editInit");
    }    
    
    
    
    
    public ActionForward checkPKExist(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        EmployeeForm myForm = (EmployeeForm) form;
        String employeeNo = myForm.getEmpNo();

        try {
            Employee employee = employeeService.findById(employeeNo);
        	if (null ==employee)
        		request.setAttribute("result", "NON_EXIST");
        	else
        		request.setAttribute("result", "EXIST");
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("jsonMessage");
    }       
    
    public ActionForward addInit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();

        try {
        	Employee employee = new Employee();

            request.setAttribute("employee", employee);
            request.setAttribute("ACTION_MODE", "ADD");
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("editInit");
    }    
    

    
    public ActionForward addSubmit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        EmployeeForm myForm = (EmployeeForm) form;

        String employeeNo = myForm.getEmpNo();
        String password = myForm.getPassword();
        Integer codeDept = myForm.getCodeDept();

        try {
        	HibernateSessionFactory.getSession().clear();
        	HibernateSessionFactory.getSession().getTransaction().begin();

            Employee employee = new Employee();
            String oldPassword = employee.getPassword();
        	BeanUtils.copyProperties(employee,myForm);
        	
        	String ret = employeeService.checkPasswordRule(request, employee, password);
        	if (ret.equalsIgnoreCase("PASS"))
        		employee.setPassword(Util.hash(password));
        	else {
                request.setAttribute("message", ret);
                return mapping.findForward("message");        		
        	}

            
            //設定部門代碼
            Code code = codeService.findById(codeDept);
            employee.setCode(code);
            
    		Calendar calendar = Calendar.getInstance();
    		Date now = new Date();
    		calendar.setTime(now);
            employee.setModifyDate(calendar.getTime());
                        
            employeeService.save(employee);
            HibernateSessionFactory.getSession().getTransaction().commit();
            
            SysLog syslog = new SysLog();
            syslog.setCreateDate(new Date());
            syslog.setIsException(false);
            syslog.setLogType("EMP_PERSIST");
            syslog.setSubject("新增員工基本資料");
            syslog.setMessageBody(employee.getEmpNo() + ":" + employee.getUserId() + ":" + employee.getUserName() + ":" + SessionUtil.getAccount(request.getSession()).getUserId() );
            HibernateSessionFactory.getSession().save(syslog);
            
            request.setAttribute("message", "修改成功");
            return mapping.findForward("message");
        } catch (Exception e) {
            log.error("", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
            SysLog syslog = new SysLog();
            syslog.setCreateDate(new Date());
            syslog.setIsException(true);
            syslog.setLogType("EMP_PERSIST");
            syslog.setSubject("新增員工基本資料");
            syslog.setMessageBody(myForm.getEmpNo() + ":" + myForm.getUserId() + ":" + e.getMessage() + ":" + SessionUtil.getAccount(request.getSession()).getUserId() );
            HibernateSessionFactory.getSession().save(syslog);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
    }    
    
    private ValueList getValueList(HttpServletRequest request, EmployeeForm myForm, String entryKey) {
        Map param = new HashMap();
        String emp_no = myForm.getEmpNo();
        if (emp_no != null )
        	param.put("emp_no", emp_no);
        String e_name = myForm.getEName();
        if (e_name != null )
        	param.put("e_name", e_name);
        String c_name = myForm.getCName();
        if (c_name != null )
        	param.put("c_name", c_name);
        String queryEnabled = myForm.getQueryEnabled();
        if (queryEnabled != null && queryEnabled.equalsIgnoreCase("ENABLED") )
        	param.put("enabled", 1);    
        if (queryEnabled != null && queryEnabled.equalsIgnoreCase("DISABLED") )
        	param.put("enabled", 0);          
        
        
        ValueList valueList = valueListService.getValueList(request, entryKey, param);
        return valueList;
    }    
}