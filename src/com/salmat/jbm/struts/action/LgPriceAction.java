/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.salmat.jbm.struts.action;

import java.lang.reflect.InvocationTargetException;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.List;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.mlw.vlh.ValueList;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.actions.DispatchAction;

import com.salmat.jbm.hibernate.*;
import com.salmat.jbm.service.CodeService;
import com.salmat.jbm.service.LgPriceService;
import com.salmat.jbm.service.ValueListService;
import com.salmat.jbm.struts.form.*;
import com.salmat.jbm.hibernate.HibernateSessionFactory;
import com.painter.util.Global;


/**
 * MyEclipse Struts Creation date: 02-23-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action parameter="fid" validate="true"
 * @struts.action-forward name="init" path=".findUserAccount"
 */
public class LgPriceAction extends DispatchAction {
    /*
     * Generated Methods
     */
    private static final LgPriceService lgPriceService = LgPriceService.getInstance();
    private static final CodeService codeService = CodeService.getInstance();
    private static ValueListService valueListService = ValueListService.getInstance();    
    private static Logger log = Logger.getLogger(LgPriceAction.class);

    /**
     * Method execute
     * 
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    protected ActionForward unspecified(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) {

        return mapping.findForward("homepage");
    }

    
    public ActionForward addInit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        LgPriceForm myForm = (LgPriceForm) form;

        try {
            setLgAttribute(request);
        	LgPrice lgPrice = new LgPrice();
            request.setAttribute("lginfo", lgPrice);
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("editInit");
    }    
    

    
    private void setLgAttribute(HttpServletRequest request){
    	List<Code> lgTypesCode = codeService.findBycodeTypeName("LG_TYPE");
    	List<Code> lgMailCategoriesCode = codeService.findBycodeTypeName("LG_MAIL_CATEGORY");
    	
        request.setAttribute("lgTypesCode", lgTypesCode);
        request.setAttribute("lgMailCategoriesCode", lgMailCategoriesCode);
    	
    }
    
    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
    	ActionMessages messages = new ActionMessages();
        LgPriceForm myForm = (LgPriceForm) form;
        setLgAttribute(request);
        try {
        	ValueList dataList = getValueList(request, myForm, "lgPriceList");
            request.setAttribute("dataList", dataList);
            
        	String idList = "";
        	for(Object obj : dataList.getList()){
            	idList += BeanUtils.getProperty(obj, "id") + ",";
            }
            request.setAttribute("idList", idList);
            
            String backToListURL = request.getRequestURI() +"?" + request.getQueryString();
            //request.getSession().setAttribute("backToListURL", backToListURL);
            request.setAttribute("backToListURL", URLEncoder.encode(backToListURL, "UTF-8"));

        } catch (Exception e) {
            log.error("", e);
            messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
                    Global.MESSAGE_SYSTEMERROR_KEY));
            this.saveMessages(request, messages);
            return mapping.findForward(Global.FORWARD_INCLUDE_MESSAGE_KEY);
        }
        return mapping.findForward("list");
    }

    
        
            
    
    public ActionForward editInit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
    	
        ActionMessages messages = new ActionMessages();
        LgPriceForm myForm = (LgPriceForm) form;
        int id = myForm.getId();
        String prevId = "";
        String nextId = "";
        String[] idList = request.getParameter("idList") == null ? null : request.getParameter("idList").split(",");
        int nowPage = 0;
        if(idList != null){
           for(int i = 0 ; i < idList.length ; i++){
                if(idList[i].equalsIgnoreCase(id + "")){
                	nowPage = i + 1;
                	if(i != 0)
                		prevId = idList[i - 1];
                	if(i != idList.length -1)
                		nextId = idList[i + 1];
                }
           }
        }        
        request.setAttribute("pagesIndex", nowPage + "/" + idList.length);
        request.setAttribute("prevId", prevId);
        request.setAttribute("nextId", nextId);
        
        
        try{
        	setLgAttribute(request);
        	HibernateSessionFactory.getSession().clear();
            LgPrice lgPrice = lgPriceService.findById(id);
        	request.setAttribute("ACTION_MODE", "EDIT");
            request.setAttribute("lgPrice", lgPrice);
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("editInit");
    }
    
    
    
    
    public ActionForward editSubmit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
    	LgPriceForm myForm = (LgPriceForm) form;
    	Integer id = myForm.getId() <= 0 ? null : myForm.getId();
    	
    	List<LgPrice> retList = LgPriceService.findCategoryAndType(myForm.getLgType(), myForm.getLgMailCategory());
    	LgPrice lgPrice = new LgPrice();
    	
    	//同一種交寄方式及郵資單種類，只能有一種價格
    	if(retList != null && retList.size() > 0){
    		if(retList.size() == 1){
    			lgPrice = retList.get(0);    			
    			if(id != null && id.equals(lgPrice.getId())){
    				
    			}else{
    				request.setAttribute("message", "郵資價格table中，ID：" + lgPrice.getId() + " 已設定了相同的郵資單種類(" + lgPrice.getLgMailCategoryName() + 
    						")及交寄方式(" + myForm.getLgTypeCodeValueTw() + ")，不可設定重覆的郵資單種類及交寄方式");
    				return mapping.findForward("message");
    			}
    		}else{
    		    request.setAttribute("message", "有" + retList.size() + "筆相同的郵資單種類及交寄方式，請檢查並刪除至一筆，否則將造成交寄錯誤");
		        return mapping.findForward("message");
    		}
    	}
    	
    	
    	try {
    		BeanUtils.copyProperties(lgPrice, myForm);
    		if(myForm.getPrice()!= null && myForm.getPrice().doubleValue() == 0){
    			lgPrice.setPrice(null);
    		}
    		if(myForm.getWeight()!= null && myForm.getWeight().intValue() == 0){
    			lgPrice.setWeight(null);
    		}
    		lgPrice.setId(id);
    		HibernateSessionFactory.getSession().clear();
        	HibernateSessionFactory.beginTransaction();    		
    		lgPriceService.save(lgPrice);
    		HibernateSessionFactory.commitTransaction();
		} catch (IllegalAccessException e) {
			request.setAttribute("message", "系統失敗" + e.getMessage());
			e.printStackTrace();
			log.error("", e);
			return mapping.findForward("message");
		} catch (InvocationTargetException e) {
			request.setAttribute("message", "系統失敗" + e.getMessage());
			e.printStackTrace();
			log.error("", e);
			return mapping.findForward("message");
		}catch(Exception e){
			request.setAttribute("message", "系統失敗" + e.getMessage());
			log.error("", e);
			HibernateSessionFactory.rollbackTransaction();
			return mapping.findForward("message");
		}
		
		if(id == null)
	       request.setAttribute("message", "新增成功");
		else
		   request.setAttribute("message", "修改成功");
        return mapping.findForward("message");
    }
    
    
    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        LgPriceForm myForm = (LgPriceForm) form;
        int id = myForm.getId();

        try {
        	HibernateSessionFactory.getSession().getTransaction().begin();
        	LgPrice lgPrice = lgPriceService.findById(id);

        	lgPriceService.delete(lgPrice);
            HibernateSessionFactory.getSession().getTransaction().commit();
            request.setAttribute("message", "刪除成功");  
         
        } catch (Exception e) {
            log.error("delete catch exception", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
        	request.setAttribute("message", "資料被引用, 不能刪除");  
			return mapping.findForward("message");
        }
        return mapping.findForward("message");
    }    
    
    
    private ValueList getValueList(HttpServletRequest request, LgPriceForm myForm, String entryKey) {
        Map param = new HashMap();

        Integer lgType = myForm.getLgType();
        if (lgType != null && !lgType.equals(new Integer(0)))
        	param.put("lg_type", lgType);
        Integer lgMailCategory = myForm.getLgMailCategory();
        if (lgMailCategory != null && !lgMailCategory.equals(new Integer(0)))
        	param.put("lg_mail_category", lgMailCategory);
        ValueList valueList = valueListService.getValueList(request, entryKey, param);
        return valueList;
    }    
}