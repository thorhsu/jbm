/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.salmat.jbm.struts.action;

import java.net.URLEncoder;
import java.sql.Connection;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.mlw.vlh.ValueList;
import net.mlw.vlh.ValueListHandler;
import net.mlw.vlh.ValueListInfo;
import net.mlw.vlh.web.ValueListRequestUtil;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRExporter;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.export.JRPdfExporter;
import net.sf.json.JSONArray;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.beanutils.ConvertUtils;
import org.apache.commons.beanutils.converters.DateConverter;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.action.DynaActionForm;
import org.apache.struts.actions.DispatchAction;
import org.hibernate.Transaction;

import com.salmat.jbm.bean.LpinfoJSON;
import com.salmat.jbm.hibernate.*;
import com.salmat.jbm.service.*;
import com.salmat.jbm.struts.form.*;
import com.salmat.jbm.hibernate.HibernateSessionFactory;
import com.painter.util.Global;
import com.painter.util.SessionUtil;
import com.painter.util.Util;


/**
 * MyEclipse Struts Creation date: 02-23-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action parameter="fid" validate="true"
 * @struts.action-forward name="init" path=".findUserAccount"
 */
public class JobCodeAction extends DispatchAction {
    /*
     * Generated Methods
     */
	private static final HistoryReportService historyReportService = HistoryReportService.getInstance();
	private static final LPInfoService lpinfoService = LPInfoService.getInstance();
	private static final MPInfoService mpinfoService = MPInfoService.getInstance();
	private static final PSInfoService psinfoService = PSInfoService.getInstance();
	private static final LGInfoService lginfoService = LGInfoService.getInstance();
	private static final JobBagService jobbagService = JobBagService.getInstance();
	private static final ReturnInfoService returninfoService = ReturnInfoService.getInstance();
	private static final LCInfoService lcinfoService = LCInfoService.getInstance();
	
    private static final JobCodeService jobcodeService = JobCodeService.getInstance();
    private static final CustomerService customerService = CustomerService.getInstance();
    private static final CodeService codeService = CodeService.getInstance();
    private static ValueListService valueListService = ValueListService.getInstance();    
    private static Logger log = Logger.getLogger(JobCodeAction.class);
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

    /**
     * Method execute
     * 
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    protected ActionForward unspecified(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) {

        return mapping.findForward("homepage");
    }

    //複製新增
    public ActionForward saveAsNewInit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        JobCodeForm myForm = (JobCodeForm) form;
        String jobCodeNo = null;
        if(myForm.getJobCodeNo() != null)
            jobCodeNo = (myForm.getJobCodeNo()).toUpperCase();

        try {
        	JobCode jobcode = jobcodeService.findById(jobCodeNo);

        	List lplist = customerService.getCustomerLPList(jobcode.getCustomer().getCustNo());
    		request.setAttribute("lpinfoJSON", lplist);  
    		
        	List mplist = customerService.getCustomerMPList(jobcode.getCustomer().getCustNo());
    		request.setAttribute("mpinfoJSON", mplist);    		
    		
        	List pslist = customerService.getCustomerPSList(jobcode.getCustomer().getCustNo());
    		request.setAttribute("psinfoJSON", pslist);    		
    		
        	List lglist = customerService.getCustomerLGList(jobcode.getCustomer().getCustNo());
    		request.setAttribute("lginfoJSON", lglist);    		
    		
        	List returnlist = customerService.getCustomerReturnList(jobcode.getCustomer().getCustNo());
    		request.setAttribute("returninfoJSON", returnlist);    		
    		
        	List lclist = customerService.getCustomerLCList(jobcode.getCustomer().getCustNo());
    		request.setAttribute("lcinfoJSON", lclist);
    		
    		List<Code> transferTypes = codeService.findBycodeTypeName("TRANSFER_TYPE");
    		request.setAttribute("transferTypes", transferTypes);
    		
            request.setAttribute("jobcode", jobcode);
            request.setAttribute("ACTION_MODE", "SAVE_AS_NEW");
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("editInit");
    }    
    
    
    
    public ActionForward addInit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        JobCodeForm myForm = (JobCodeForm) form;

        try {
        	JobCode jobcode = new JobCode();

        	List<Code> transferTypes = codeService.findBycodeTypeName("TRANSFER_TYPE");
    		request.setAttribute("transferTypes", transferTypes);
    		
            request.setAttribute("jobcode", jobcode);
            request.setAttribute("ACTION_MODE", "ADD");
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("editInit");
    }    
    
    public ActionForward addSubmit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        JobCodeForm myForm = (JobCodeForm) form;
        String jobCodeNo = (myForm.getCustNo() + myForm.getJobCodeId()).toUpperCase();
        
        try {
        	HibernateSessionFactory.getSession().clear();
        	HibernateSessionFactory.getSession().getTransaction().begin();
            
        	JobCode jobcode = new JobCode();
        	BeanUtils.copyProperties(jobcode,myForm);
        	if(jobcode.getFromPages() != null  && jobcode.getFromPages().intValue() == 0 ){
            	jobcode.setFromPages(null);            	
            }
        	if(jobcode.getEndPages() != null  && jobcode.getEndPages().intValue() == 0 ){
            	jobcode.setEndPages(null);            	
            }
        	if(myForm.getIsLg() == null || !myForm.getIsLg()){
        		jobcode.setDispatchType("");
        	}
        	
        	
        	jobcode.setJobCodeNo(jobCodeNo);

        	//設定客戶代碼
        	String custNo = myForm.getCustNo();
        	Customer customer = customerService.findById(custNo);
        	jobcode.setCustomer(customer);
        	
        	//設定 LP/MP/PS/LG/Return/LC
        	String lpNo1 = myForm.getLpNo1();
        	String lpNo2 = myForm.getLpNo2();
        	String lpNo3 = myForm.getLpNo3();
        	String mpNo1 = myForm.getMpNo1();
        	String mpNo2 = myForm.getMpNo2();
        	String mpNo3 = myForm.getMpNo3();
        	String psNo = myForm.getPsNo();
        	String lgNo = myForm.getLgNo();
        	String returnNo = myForm.getReturnNo();
        	String lcNo = myForm.getLcNo();
        	String mpDmPs = myForm.getMpDmPs();

        	
        	// RE-SET lp1/lp2/lp3/mp1/mp2/mp3/ps
        	jobcode.setLpinfoByIdfLpNo1(null);
        	jobcode.setLpinfoByIdfLpNo2(null);
        	jobcode.setLpinfoByIdfLpNo3(null);
        	jobcode.setMpinfoByIdfMpNo1(null);
        	jobcode.setMpinfoByIdfMpNo2(null);
        	jobcode.setMpinfoByIdfMpNo3(null);
        	jobcode.setPsinfo(null);
        	jobcode.setLginfo(null);
        	jobcode.setReturninfo(null);
        	jobcode.setLcinfo(null);
        	Date noJobBagFrom = myForm.getNoJobBagFrom();
        	Date noJobBagEnd = myForm.getNoJobBagEnd();
            if(noJobBagEnd != null){
        	   Calendar cal = Calendar.getInstance();
        	   cal.setTime(noJobBagEnd);
        	   cal.set(cal.get(Calendar.YEAR), cal.get(Calendar.MONTH), cal.get(Calendar.DATE), 23, 59, 59);
        	   noJobBagEnd = cal.getTime();
            }
        	
        	
        	if (null!= lpNo1 && lpNo1.length() >0 && jobcode.getIsLp() ) {
        		Lpinfo lpinfoByIdfLpNo1 = lpinfoService.findById(lpNo1);
        		jobcode.setLpinfoByIdfLpNo1(lpinfoByIdfLpNo1);
        	}
        	if (null!= lpNo2 && lpNo2.length() >0 && jobcode.getIsLp() ) {
        		Lpinfo lpinfoByIdfLpNo2 = lpinfoService.findById(lpNo2);
        		jobcode.setLpinfoByIdfLpNo2(lpinfoByIdfLpNo2);
        	}
        	if (null!= lpNo3 && lpNo3.length() >0 && jobcode.getIsLp() ) {
        		Lpinfo lpinfoByIdfLpNo3 = lpinfoService.findById(lpNo3);
        		jobcode.setLpinfoByIdfLpNo3(lpinfoByIdfLpNo3);
        	}        	
        	

        	if (null!= mpNo1 && mpNo1.length() >0 && mpDmPs != null && mpDmPs.equalsIgnoreCase("MP")) {
        		Mpinfo mpinfoByIdfMpNo1 = mpinfoService.findById(mpNo1);
        		jobcode.setMpinfoByIdfMpNo1(mpinfoByIdfMpNo1);
        	}
        	if (null!= mpNo2 && mpNo2.length() >0 ) {
        		Mpinfo mpinfoByIdfMpNo2 = mpinfoService.findById(mpNo2);
        		jobcode.setMpinfoByIdfMpNo2(mpinfoByIdfMpNo2);
        	}
        	if (null!= mpNo3 && mpNo3.length() >0 ) {
        		Mpinfo mpinfoByIdfMpNo3 = mpinfoService.findById(mpNo3);
        		jobcode.setMpinfoByIdfMpNo3(mpinfoByIdfMpNo3);
        	} 
        	
        	if (null!= psNo && psNo.length() >0 && mpDmPs != null && mpDmPs.equalsIgnoreCase("PS")) {
        		Psinfo psinfo = psinfoService.findById(psNo);
        		jobcode.setPsinfo(psinfo);
        	}     
        	
        	if (null!= lgNo && lgNo.length() >0 && jobcode.getIsLg() && jobcode.getDispatchType() != null && jobcode.getDispatchType().equalsIgnoreCase("MAIL") && jobcode.getUseLg()) {
        		Lginfo lginfo = lginfoService.findById(lgNo);
        		jobcode.setLginfo(lginfo);
        	}
        	
        	if (null!= returnNo && returnNo.length() >0 && jobcode.getIsLg() && jobcode.getDispatchType() != null && jobcode.getDispatchType().equalsIgnoreCase("RETURN_CUSTOMER") ) {
        		Returninfo returninfo = returninfoService.findById(returnNo);
        		jobcode.setReturninfo(returninfo);
        	}
        	
        	if (null!= lcNo && lcNo.length() >0 && jobcode.getIsLg() && jobcode.getDispatchType() != null && (jobcode.getDispatchType().equalsIgnoreCase("MAIL") || "RETURN_CUSTOMER".equalsIgnoreCase(jobcode.getDispatchType())) ) {
        		Lcinfo lcinfo = lcinfoService.findById(lcNo);
        		jobcode.setLcinfo(lcinfo);
        	}         	
        	
        	//設定 工作種類
        	Integer jobCodeType = myForm.getJobCodeType();
        	Code codeByCodeJobCodeType = codeService.findById(jobCodeType);        	
        	jobcode.setCodeByCodeJobCodeType(codeByCodeJobCodeType);
        	//拆帳用工單及damage轉檔用工單不能設定fileName
        	if( "SplitAccounts".equals(codeByCodeJobCodeType.getCodeKey()) || "Damage".equals(codeByCodeJobCodeType.getCodeKey())){
        		jobcode.setFilename(null);
        	}
        	
        	
        	//設定 交寄郵局或公司
        	Integer mailToPostoffice = myForm.getCodeMailToPostoffice();
        	if (null!= mailToPostoffice) {
	        	Code codeByCodeMailToPostoffice = codeService.findById(mailToPostoffice);
	        	jobcode.setCodeByCodeMailToPostoffice(codeByCodeMailToPostoffice);
        	}
        	
        	//設定 郵資單總類
        	Integer codeLgType = myForm.getCodeLgType();
        	if (null!= codeLgType) {
	        	Code codeByCodeLgType = codeService.findById(codeLgType);
	        	jobcode.setCodeByCodeLgType(codeByCodeLgType) ;      	
        	}
        	
        	//設定 交寄方式
        	Integer codeMailCategory = myForm.getCodeMailCategory();
        	if (null!= codeMailCategory) {
	        	Code codeByCodeMailCategory = codeService.findById(codeMailCategory);
	        	jobcode.setCodeByCodeMailCategory(codeByCodeMailCategory) ;      	
        	}             	
        	jobcode.setLp1JudgeBy(myForm.getLp1JudgeBy());
        	jobcode.setLp2JudgeBy(myForm.getLp2JudgeBy());
        	jobcode.setLp3JudgeBy(myForm.getLp3JudgeBy());
        	jobcode.setMp1JudgeBy(myForm.getMp1JudgeBy());
        	jobcode.setMp2JudgeBy(myForm.getMp2JudgeBy());
        	jobcode.setMp3JudgeBy(myForm.getMp3JudgeBy());
        	jobcode.setNoJobBagEnd(noJobBagEnd);
        	jobcode.setNoJobBagFrom(noJobBagFrom);
        	
        	jobcodeService.save(jobcode);
            HibernateSessionFactory.getSession().getTransaction().commit();
            
            SysLog syslog = new SysLog();
            syslog.setCreateDate(new Date());
            syslog.setIsException(false);
            syslog.setLogType("JOB_CODE_PERSIST");
            syslog.setSubject("新增工單樣本");
            Employee employee = SessionUtil.getAccount(request.getSession());
            syslog.setMessageBody("Cust no:" + jobcode.getCustomer().getCustNo() + ":" + jobcode.getJobCodeNo() + ":" + employee.getUserId());
            HibernateSessionFactory.getSession().save(syslog);
            
            request.setAttribute("message", "新增成功");
            return mapping.findForward("message");
        } catch (Exception e) {
            log.error("", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
            
            SysLog syslog = new SysLog();
            syslog.setCreateDate(new Date());
            syslog.setIsException(true);
            syslog.setLogType("JOB_CODE_PERSIST");
            syslog.setSubject("新增工單樣本");
            Employee employee = SessionUtil.getAccount(request.getSession());
            syslog.setMessageBody("Cust no:" + myForm.getCustNo() + ":" + myForm.getJobCodeNo() + ":" + e.getMessage() + ":" + employee.getUserId());
            HibernateSessionFactory.getSession().save(syslog);
            
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }

    }    
    
    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
    	ActionMessages messages = new ActionMessages();
        JobCodeForm myForm = (JobCodeForm) form;        
        
        List<Code> jobCodeTypeCodes = CodeService.getInstance().findByProperty("codeTypeName", "JOB_CODE_TYPE");
        request.setAttribute("jobCodeTypeCodes", jobCodeTypeCodes);
        try {
        	ValueList dataList = getValueList(request, myForm,"jobcodeList");
            String job_code_nos = "";
            for(Object obj : dataList.getList()){
            	job_code_nos += BeanUtils.getProperty(obj, "job_code_no") + ",";
            }
            request.setAttribute("idList", job_code_nos);
            
            //將dataList 放到session 
            request.setAttribute("dataList", dataList);       
            String backToListURL = request.getRequestURI() +"?" + request.getQueryString();
            //request.getSession().setAttribute("backToListURL", backToListURL);
            request.setAttribute("backToListURL", URLEncoder.encode(backToListURL, "UTF-8"));

        } catch (Exception e) {
            log.error("", e);
            messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
                    Global.MESSAGE_SYSTEMERROR_KEY));
            this.saveMessages(request, messages);
            return mapping.findForward(Global.FORWARD_INCLUDE_MESSAGE_KEY);
        }
        return mapping.findForward("list");
    }

    
    public ActionForward view(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        JobCodeForm myForm = (JobCodeForm) form;
        String jobCodeNo = myForm.getJobCodeNo();
        
        try {
        	JobCode jobcode = jobcodeService.findById(jobCodeNo);
        	List lplist = customerService.getCustomerLPList(jobcode.getCustomer().getCustNo());
    		request.setAttribute("lpinfoJSON", lplist);  
    		
        	List mplist = customerService.getCustomerMPList(jobcode.getCustomer().getCustNo());
    		request.setAttribute("mpinfoJSON", mplist);    		
    		
        	List pslist = customerService.getCustomerPSList(jobcode.getCustomer().getCustNo());
    		request.setAttribute("psinfoJSON", pslist);    		
    		
        	List lglist = customerService.getCustomerLGList(jobcode.getCustomer().getCustNo());
    		request.setAttribute("lginfoJSON", lglist);    		
    		
        	List returnlist = customerService.getCustomerReturnList(jobcode.getCustomer().getCustNo());
    		request.setAttribute("returninfoJSON", returnlist);    		
    		
        	List lclist = customerService.getCustomerLCList(jobcode.getCustomer().getCustNo());
    		request.setAttribute("lcinfoJSON", lclist);    		
    		
    		List<Code> transferTypes = codeService.findBycodeTypeName("TRANSFER_TYPE");
    		request.setAttribute("transferTypes", transferTypes);
        	request.setAttribute("ACTION_MODE", "VIEW");
            request.setAttribute("jobcode", jobcode);
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("editInit");
    }
    
    public ActionForward checkFilePatternExist(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        JobCodeForm myForm = (JobCodeForm) form;
        String custNo = myForm.getCustNo();
        String fileName = myForm.getFilename();
        String jobCodeNo = myForm.getJobCodeNo();
        if(!custNo.equals("") && !fileName.equals("") && !jobCodeNo.equals("")){
            Customer customer = customerService.findById(custNo);
            try {
        	  JobCode exampleJobCode = new JobCode();
        	  exampleJobCode.setCustomer(customer);
        	  exampleJobCode.setFilename(fileName);
        	  exampleJobCode.setJobCodeNo(jobCodeNo.trim());
        	  List<JobCode> jobcodes = jobcodeService.findJobCodeByPattern(exampleJobCode);
        	  if (null ==jobcodes || jobcodes.size() == 0){
        		 request.setAttribute("result", "NON_EXIST");
        	  }else{            		
        		 String jobCodes = "";
        		 for(JobCode jobCode : jobcodes){
        			jobCodes += jobCode.getJobCodeNo() + ",";
        		 }
        		 if(jobCodes.endsWith(","))
        			jobCodes = jobCodes.substring(0, jobCodes.length() - 1);
       		     request.setAttribute("result", jobCodes);
        	  }
           } catch (Exception e) {
              log.error("", e);
			  request.setAttribute("message", "系統失敗 ");
			  return mapping.findForward("message");
           }
        }else{
           request.setAttribute("result", "NON_EXIST");
        }
        return mapping.findForward("jsonMessage");
    }       
        
    public ActionForward checkPKExist(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        JobCodeForm myForm = (JobCodeForm) form;
        String jobCodeNo = myForm.getJobCodeNo();

        try {
        	JobCode jobcode = jobcodeService.findById(jobCodeNo);
        	if (null ==jobcode)
        		request.setAttribute("result", "NON_EXIST");
        	else
        		request.setAttribute("result", "EXIST");
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("jsonMessage");
    }       
    
    public ActionForward checkDamagePKExist(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        JobCodeForm myForm = (JobCodeForm) form;
        String jobCodeNo = myForm.getJobCodeNo();
        String custNo = myForm.getCustNo();
        try {
        	if(!jobCodeNo.toUpperCase().startsWith(custNo.toUpperCase())){
        		request.setAttribute("result", "WRONG_TYPE");
        	}else{
        	   JobCode jobcode = jobcodeService.findById(jobCodeNo);
        	   Code code = null;
        	   if(jobcode != null)
        		   code = jobcode.getCodeByCodeJobCodeType();
        	   if (null == jobcode){
        		   request.setAttribute("result", "NON_EXIST");
        	   }//else if(code == null || !"Damage".equals(code.getCodeKey())){
        		   //request.setAttribute("result", "WRONG_TYPE");
        	   //}
        	   else{
        		  request.setAttribute("result", "EXIST");
        	   }
        	}
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("jsonMessage");
    }

    
    public ActionForward editInit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        JobCodeForm myForm = (JobCodeForm) form;
        String jobCodeNo = myForm.getJobCodeNo();
        String prevJobCodeNo = "";
        String nextJobCodeNo = "";
        String[] jobCodeNos = request.getParameter("idList") == null ? null : request.getParameter("idList").split(",");
        int nowPage = 0;
        if(jobCodeNos != null){
           for(int i = 0 ; i < jobCodeNos.length ; i++){
                if(jobCodeNos[i].equalsIgnoreCase(jobCodeNo)){
                	nowPage = i + 1;
                	if(i != 0)
                		prevJobCodeNo = jobCodeNos[i - 1];
                	if(i != jobCodeNos.length -1)
                		nextJobCodeNo = jobCodeNos[i + 1];
                }
           }
        }
        request.setAttribute("pagesIndex", nowPage + "/" + jobCodeNos.length);
        
        request.setAttribute("prevId", prevJobCodeNo);
        request.setAttribute("nextId", nextJobCodeNo);
        try{
        	HibernateSessionFactory.getSession().clear();
        	JobCode jobcode = jobcodeService.findById(jobCodeNo);
        	

        	List lplist = customerService.getCustomerLPList(jobcode.getCustomer().getCustNo());
    		request.setAttribute("lpinfoJSON", lplist);  
    		
        	List mplist = customerService.getCustomerMPList(jobcode.getCustomer().getCustNo());
    		request.setAttribute("mpinfoJSON", mplist);    		
    		
        	List pslist = customerService.getCustomerPSList(jobcode.getCustomer().getCustNo());
    		request.setAttribute("psinfoJSON", pslist);    		
    		
        	List lglist = customerService.getCustomerLGList(jobcode.getCustomer().getCustNo());
    		request.setAttribute("lginfoJSON", lglist);    		
    		
        	List returnlist = customerService.getCustomerReturnList(jobcode.getCustomer().getCustNo());
    		request.setAttribute("returninfoJSON", returnlist);    		
    		
        	List lclist = customerService.getCustomerLCList(jobcode.getCustomer().getCustNo());
    		request.setAttribute("lcinfoJSON", lclist);
    		
    		List<Code> transferTypes = codeService.findBycodeTypeName("TRANSFER_TYPE");
    		request.setAttribute("transferTypes", transferTypes);
    		
        	request.setAttribute("ACTION_MODE", "EDIT");
            request.setAttribute("jobcode", jobcode);
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("editInit");
    }
    
    
    
    
    
    public ActionForward batchEditSumbit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        JobCodeForm myForm = (JobCodeForm) form;
        String jobCodes = "";
        try {
        	HibernateSessionFactory.getSession().clear();
        	HibernateSessionFactory.getSession().getTransaction().begin();
        	
        	
        	String jobCodeNos[] = myForm.getJobCodeNos();
        	String lpNos[]= myForm.getLpNos();
        	String mpNos[]= myForm.getMpNos();
        	
        	if (null ==jobCodeNos ) {
                request.setAttribute("message", "無勾選變更工單");
                return mapping.findForward("message");        		
        	}
        	for (int i=0;i<jobCodeNos.length;i++) {
        		String[] tokens = jobCodeNos[i].split(";"); //jobCodeNo;row_index
        		String jobCodeNo = tokens[0];//jobCodeNo
        		Integer row_index = Integer.parseInt(tokens[1]);//row_index
        		jobCodes += jobCodeNo + ",";
        		JobCode jobcode = jobcodeService.findById(jobCodeNo);
        		Lpinfo lpinfoByIdfLpNo1 = lpinfoService.findById(lpNos[row_index]);
        		jobcode.setLpinfoByIdfLpNo1(lpinfoByIdfLpNo1);
        		Mpinfo mpinfoByIdfMpNo1 = mpinfoService.findById(mpNos[row_index]);
        		jobcode.setMpinfoByIdfMpNo1(mpinfoByIdfMpNo1);        		
        		jobcodeService.save(jobcode);
        	}
            HibernateSessionFactory.getSession().getTransaction().commit();
            
            SysLog syslog = new SysLog();
            syslog.setCreateDate(new Date());
            syslog.setIsException(false);
            syslog.setLogType("JOB_CODE_PERSIST");
            syslog.setSubject("批次修改工單樣本");
            Employee employee = SessionUtil.getAccount(request.getSession());
            syslog.setMessageBody( jobCodes + ":" + employee.getUserId());
            HibernateSessionFactory.getSession().save(syslog);
            request.setAttribute("message", "修改成功");
            return mapping.findForward("message");
        } catch (Exception e) {
            log.error("", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
            
            SysLog syslog = new SysLog();
            syslog.setCreateDate(new Date());
            syslog.setIsException(true);
            syslog.setLogType("JOB_CODE_PERSIST");
            syslog.setSubject("批次修改工單樣本");
            Employee employee = SessionUtil.getAccount(request.getSession());
            syslog.setMessageBody( jobCodes + ":" + e.getMessage() + ":" + employee.getUserId());
            HibernateSessionFactory.getSession().save(syslog);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        //return mapping.findForward("viewAccount");
    }    
    
    public ActionForward editSubmit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        JobCodeForm myForm = (JobCodeForm) form;
        String jobCodeNo = (myForm.getCustNo() + myForm.getJobCodeId()).toUpperCase();
        
        try {
        	HibernateSessionFactory.getSession().clear();
        	HibernateSessionFactory.getSession().getTransaction().begin();

        	JobCode jobcode = jobcodeService.findById(jobCodeNo);

        	BeanUtils.copyProperties(jobcode, myForm);
        	//如果沒有設定起始和結束頁數，就設為null
        	if(jobcode.getFromPages() != null && jobcode.getFromPages().intValue() == 0){
            	jobcode.setFromPages(null);            	
            }
        	if(jobcode.getEndPages() != null && jobcode.getEndPages().intValue() == 0){
            	jobcode.setEndPages(null);            	
            }
        	if(myForm.getIsLg() == null || !myForm.getIsLg()){
        		jobcode.setDispatchType("");
        	}
        	
        	jobcode.setJobCodeNo(jobCodeNo);
        	jobcode.setJobCodeId(jobCodeNo.substring(jobCodeNo.length()-4, jobCodeNo.length()));

        	//設定客戶代碼
        	String custNo = myForm.getCustNo();
        	Customer customer = customerService.findById(custNo);
        	jobcode.setCustomer(customer);
        	
        	//設定 LP/MP/PS/LG/Return/LC
        	String lpNo1 = myForm.getLpNo1();
        	String lpNo2 = myForm.getLpNo2();
        	String lpNo3 = myForm.getLpNo3();
        	String mpNo1 = myForm.getMpNo1();
        	String mpNo2 = myForm.getMpNo2();
        	String mpNo3 = myForm.getMpNo3();
        	String psNo = myForm.getPsNo();
        	String lgNo = myForm.getLgNo();
        	String returnNo = myForm.getReturnNo();
        	String lcNo = myForm.getLcNo();
        	String mpDmPs = myForm.getMpDmPs();
        	Date noJobBagFrom = myForm.getNoJobBagFrom();
        	Date noJobBagEnd = myForm.getNoJobBagEnd();
        	
        	Calendar cal = Calendar.getInstance();
        	if(noJobBagEnd != null){
        	   cal.setTime(noJobBagEnd);
        	   cal.set(cal.get(Calendar.YEAR), cal.get(Calendar.MONTH), cal.get(Calendar.DATE), 23, 59, 59);
        	   noJobBagEnd = cal.getTime();
        	}


        	
        	// RE-SET lp1/lp2/lp3/mp1/mp2/mp3/ps
        	jobcode.setLpinfoByIdfLpNo1(null);
        	jobcode.setLpinfoByIdfLpNo2(null);
        	jobcode.setLpinfoByIdfLpNo3(null);
        	jobcode.setMpinfoByIdfMpNo1(null);
        	jobcode.setMpinfoByIdfMpNo2(null);
        	jobcode.setMpinfoByIdfMpNo3(null);
        	jobcode.setPsinfo(null);
        	jobcode.setLginfo(null);
        	jobcode.setReturninfo(null);
        	jobcode.setLcinfo(null);
        	
        	
        	if (null!= lpNo1 && lpNo1.length() >0 && jobcode.getIsLp() ) {
        		Lpinfo lpinfoByIdfLpNo1 = lpinfoService.findById(lpNo1);
        		jobcode.setLpinfoByIdfLpNo1(lpinfoByIdfLpNo1);
        	}
        	if (null!= lpNo2 && lpNo2.length() >0 && jobcode.getIsLp() ) {
        		Lpinfo lpinfoByIdfLpNo2 = lpinfoService.findById(lpNo2);
        		jobcode.setLpinfoByIdfLpNo2(lpinfoByIdfLpNo2);
        	}
        	if (null!= lpNo3 && lpNo3.length() >0 && jobcode.getIsLp() ) {
        		Lpinfo lpinfoByIdfLpNo3 = lpinfoService.findById(lpNo3);
        		jobcode.setLpinfoByIdfLpNo3(lpinfoByIdfLpNo3);
        	}        	
        	

        	if (null!= mpNo1 && mpNo1.length() >0 && "MP".equalsIgnoreCase(mpDmPs)) {
        		Mpinfo mpinfoByIdfMpNo1 = mpinfoService.findById(mpNo1);
        		jobcode.setMpinfoByIdfMpNo1(mpinfoByIdfMpNo1);
        	}
        	if (null!= mpNo2 && mpNo2.length() >0 ) {
        		Mpinfo mpinfoByIdfMpNo2 = mpinfoService.findById(mpNo2);
        		jobcode.setMpinfoByIdfMpNo2(mpinfoByIdfMpNo2);
        	}
        	if (null!= mpNo3 && mpNo3.length() >0 ) {
        		Mpinfo mpinfoByIdfMpNo3 = mpinfoService.findById(mpNo3);
        		jobcode.setMpinfoByIdfMpNo3(mpinfoByIdfMpNo3);
        	} 
        	
        	if (null!= psNo && psNo.length() >0 && "PS".equalsIgnoreCase(mpDmPs)) {
        		Psinfo psinfo = psinfoService.findById(psNo);
        		jobcode.setPsinfo(psinfo);
        	}     
        	
        	if (null!= lgNo && lgNo.length() >0 && jobcode.getIsLg() && jobcode.getDispatchType() != null && "MAIL".equalsIgnoreCase(jobcode.getDispatchType()) && jobcode.getUseLg()) {
        		Lginfo lginfo = lginfoService.findById(lgNo);
        		jobcode.setLginfo(lginfo);
        	}
        	
        	if (null!= returnNo && returnNo.length() >0 && jobcode.getIsLg() && jobcode.getDispatchType() != null && "RETURN_CUSTOMER".equalsIgnoreCase(jobcode.getDispatchType()) ) {
        		Returninfo returninfo = returninfoService.findById(returnNo);
        		jobcode.setReturninfo(returninfo);
        	} 
        	
        	if (null!= lcNo && lcNo.length() >0 && jobcode.getIsLg() && jobcode.getDispatchType() != null && ("MAIL".equalsIgnoreCase(jobcode.getDispatchType()) || "RETURN_CUSTOMER".equalsIgnoreCase(jobcode.getDispatchType())) ) {
        		Lcinfo lcinfo = lcinfoService.findById(lcNo);
        		jobcode.setLcinfo(lcinfo);
        	}         	
        	
        	//設定 工作種類
        	Integer jobCodeType = myForm.getJobCodeType();
        	Code codeByCodeJobCodeType = codeService.findById(jobCodeType);
        	jobcode.setCodeByCodeJobCodeType(codeByCodeJobCodeType);
        	//拆帳用工單及damage轉檔用工單不能設定fileName
        	if( "SplitAccounts".equals(codeByCodeJobCodeType.getCodeKey()) || "Damage".equals(codeByCodeJobCodeType.getCodeKey())){
        		jobcode.setFilename(null);
        	}
        	
        	//設定 交寄郵局或公司
        	Integer mailToPostoffice = myForm.getCodeMailToPostoffice();
        	if (null!= mailToPostoffice) {
	        	Code codeByCodeMailToPostoffice = codeService.findById(mailToPostoffice);
	        	jobcode.setCodeByCodeMailToPostoffice(codeByCodeMailToPostoffice);
        	}
        	
        	//設定 郵資單總類
        	Integer codeLgType = myForm.getCodeLgType();
        	if (null!= codeLgType) {
	        	Code codeByCodeLgType = codeService.findById(codeLgType);
	        	jobcode.setCodeByCodeLgType(codeByCodeLgType) ;      	
        	}        	
   	
        	//設定 交寄方式
        	Integer codeMailCategory = myForm.getCodeMailCategory();
        	if (null!= codeMailCategory) {
	        	Code codeByCodeMailCategory = codeService.findById(codeMailCategory);
	        	jobcode.setCodeByCodeMailCategory(codeByCodeMailCategory) ;      	
        	}             	
        	jobcode.setLp1JudgeBy(myForm.getLp1JudgeBy());
        	jobcode.setLp2JudgeBy(myForm.getLp2JudgeBy());
        	jobcode.setLp3JudgeBy(myForm.getLp3JudgeBy());
        	jobcode.setMp1JudgeBy(myForm.getMp1JudgeBy());
        	jobcode.setMp2JudgeBy(myForm.getMp2JudgeBy());
        	jobcode.setMp3JudgeBy(myForm.getMp3JudgeBy());
        	
        	jobcode.setNoJobBagEnd(noJobBagEnd);
        	jobcode.setNoJobBagFrom(noJobBagFrom);
            
        	jobcodeService.save(jobcode);
            HibernateSessionFactory.getSession().getTransaction().commit();
            SysLog syslog = new SysLog();
            syslog.setCreateDate(new Date());
            syslog.setIsException(false);
            syslog.setLogType("JOB_CODE_PERSIST");
            syslog.setSubject("修改工單樣本");
            Employee employee = SessionUtil.getAccount(request.getSession());
            syslog.setMessageBody("Cust no:" + jobcode.getCustomer().getCustNo() + ":" + jobcode.getJobCodeNo() + ":" + employee.getUserId());
            HibernateSessionFactory.getSession().save(syslog);

            
            
            request.setAttribute("message", "修改成功");
            
            //導回編輯頁面
        	List lplist = customerService.getCustomerLPList(jobcode.getCustomer().getCustNo());
    		request.setAttribute("lpinfoJSON", lplist);  
    		
        	List mplist = customerService.getCustomerMPList(jobcode.getCustomer().getCustNo());
    		request.setAttribute("mpinfoJSON", mplist);    		
    		
        	List pslist = customerService.getCustomerPSList(jobcode.getCustomer().getCustNo());
    		request.setAttribute("psinfoJSON", pslist);    		
    		
        	List lglist = customerService.getCustomerLGList(jobcode.getCustomer().getCustNo());
    		request.setAttribute("lginfoJSON", lglist);    		
    		
        	List returnlist = customerService.getCustomerReturnList(jobcode.getCustomer().getCustNo());
    		request.setAttribute("returninfoJSON", returnlist);    		
    		
        	List lclist = customerService.getCustomerLCList(jobcode.getCustomer().getCustNo());
    		request.setAttribute("lcinfoJSON", lclist);    		
    		
        	request.setAttribute("ACTION_MODE", "EDIT");
            request.setAttribute("jobcode", jobcode);
            
            List<Code> transferTypes = codeService.findBycodeTypeName("TRANSFER_TYPE");
    		request.setAttribute("transferTypes", transferTypes);
            
            
            return mapping.findForward("editInit");
            //return mapping.findForward("message");
        } catch (Exception e) {
            log.error("", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
            SysLog syslog = new SysLog();
            syslog.setCreateDate(new Date());
            syslog.setIsException(true);
            syslog.setLogType("JOB_CODE_PERSIST");
            syslog.setSubject("修改工單樣本");
            Employee employee = SessionUtil.getAccount(request.getSession());
            syslog.setMessageBody("Cust no:" + myForm.getCustNo() + ":" + myForm.getJobCodeNo() + ":" + e.getMessage() + ":" + employee.getUserId());
            HibernateSessionFactory.getSession().save(syslog);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        //return mapping.findForward("viewAccount");
    }
    
    
    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        JobCodeForm myForm = (JobCodeForm) form;
        String jobCodeNo = myForm.getJobCodeNo();
        try {
        	JobCode jobcode = jobcodeService.findById(jobCodeNo);
            if(jobcode != null){
               HibernateSessionFactory.getSession().getTransaction().begin();
        	   jobcodeService.delete(jobcode);            
               HibernateSessionFactory.getSession().getTransaction().commit();
               SysLog syslog = new SysLog();
               syslog.setCreateDate(new Date());
               syslog.setIsException(false);
               syslog.setLogType("JOB_CODE_PERSIST");
               syslog.setSubject("刪除工單樣本");
               Employee employee = SessionUtil.getAccount(request.getSession());
               syslog.setMessageBody("Cust no:" + myForm.getCustNo() + ":" + myForm.getJobCodeNo() + ":" + employee.getUserId());
               HibernateSessionFactory.getSession().save(syslog);
               
               request.setAttribute("message", "刪除成功");
            }else{
               request.setAttribute("message", "無" + jobCodeNo + "此工單樣本，請查明是否已被刪除");
            }

        } catch (Exception e) {
            log.error("delete job code :" + jobCodeNo + " catch exception " , e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
            SysLog syslog = new SysLog();
            syslog.setCreateDate(new Date());
            syslog.setIsException(true);
            syslog.setLogType("JOB_CODE_PERSIST");
            syslog.setSubject("刪除工單樣本");
            Employee employee = SessionUtil.getAccount(request.getSession());
            syslog.setMessageBody("Cust no:" + myForm.getCustNo() + ":" + myForm.getJobCodeNo() + ":" + e.getMessage() + ":" + employee.getUserId());
            HibernateSessionFactory.getSession().save(syslog);
        	request.setAttribute("message", "資料被引用, 不能刪除");  
			return mapping.findForward("message");
        }
        return mapping.findForward("message");
    }    
    
    public ActionForward preview(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        JobCodeForm myForm = (JobCodeForm) form;
        String jobCodeNo = (myForm.getCustNo() + myForm.getJobCodeId()).toUpperCase();
        String jobbagNo = null;
        try {
        	HibernateSessionFactory.getSession().clear();
        	HibernateSessionFactory.getSession().getTransaction().begin();

        	JobCode jobcode = jobcodeService.findById(jobCodeNo);
			String cycleDate_form = myForm.getPreviewDate();
			Date cycleDate = new Date();
			SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");

			if (null != cycleDate_form && cycleDate_form.length()>1 ) {
				cycleDate = (Date) formatter.parse(cycleDate_form);		
			}

			String receiveDate_form = myForm.getPreviewDate();
			Date receiveDate = new Date();			
			if (null != receiveDate_form && receiveDate_form.length()>1 ) {
				receiveDate = (Date) formatter.parse(receiveDate_form);		
			}			

			Integer accounts= 100 ;
			Integer pages= 100;
			Integer sheets= 0;
			String afpName= myForm.getFilename();
			
			//SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyyMMddHHmmssSSS");
			
			
			String logFilename ="previewJobBag";
			
        	//設定批號
        	jobcode.setLogFileSeq("001");
        	JobBag jobbag = jobbagService.createNewJobBag(jobcode, accounts, pages, sheets, afpName ,  cycleDate,  receiveDate,  logFilename,0,0,0,0,0,0,0,0,0,0,0,0,"",0,0,0,0,0,0,0,true);
        	jobbagNo = jobbag.getJobBagNo();
        	HibernateSessionFactory.getSession().getTransaction().commit();
        	
        	
        	HibernateSessionFactory.getSession().clear();
        	HibernateSessionFactory.getSession().getTransaction().begin();        	
        	
        	@SuppressWarnings("deprecation")
			Connection conn= HibernateSessionFactory.getSession().connection();
        	String jbmHome = Util.getString("jbm.home.local") + "PostageImage\\";
        	HashMap hm = new HashMap();
            hm.put("jbmHome", jbmHome);             
            hm.put("jobbagList",  "''");
            hm.put("jobbagSpliteList", "'" + jobbag.getJobBagNo().toUpperCase() + "001'" );
            String serverPath = request.getSession().getServletContext().getRealPath("");;
            
            String pdfFileName = "preview_" + new SimpleDateFormat("yyyyMMddHHmmssMs").format(new Date())+".pdf";
            String fileName = serverPath + "\\report\\job_bag.jasper";
            String outFileName = serverPath +"\\pdf\\"+pdfFileName;
            
            try {
                JasperPrint print = JasperFillManager.fillReport(fileName, hm, conn);

                // Create a PDF exporter
                JRExporter exporter = new JRPdfExporter();
                
                // Configure the exporter (set output file name and print object)
                exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, outFileName);
                exporter.setParameter(JRExporterParameter.JASPER_PRINT, print);
                
                // Export the PDF file
                exporter.exportReport();                
                HibernateSessionFactory.getSession().getTransaction().commit();                                  
            } catch (JRException e) {
                log.error("", e);
                HibernateSessionFactory.getSession().getTransaction().rollback();
            } catch (Exception e) {
            	log.error("", e);
                HibernateSessionFactory.getSession().getTransaction().rollback();
            } 
            //埋入HistoryReport
            HistoryReport historyReport = new HistoryReport();
            historyReport.setReportName(pdfFileName);
            historyReport.setPdfPath(outFileName);
            Employee employee = SessionUtil.getAccount(request.getSession());
            historyReport.setEmpNo(employee.getEmpNo());
            Calendar today = Calendar.getInstance();
            historyReport.setCreateDate(today.getTime());
            historyReportService.save(historyReport);
            request.setAttribute("pdfFileName", pdfFileName);
            return mapping.findForward("pdfDownload");
        } catch (Exception e) {
            log.error("", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }finally{
        	//先關閉session
        	HibernateSessionFactory.closeSession();
        	//如果job bag不是空的，要刪除掉
        	HibernateSessionFactory.getSession().clear();        	
        	JobBag jobBag = null;
        	if(jobbagNo != null)
        		jobBag = jobbagService.findById(jobbagNo);
        	if(jobBag != null){
        		HibernateSessionFactory.getSession().getTransaction().begin();
                jobbagService.delete(jobBag);
                HibernateSessionFactory.getSession().getTransaction().commit();
        	}
        	HibernateSessionFactory.closeSession();
        }
    }
    
    
    private ValueList getValueList(HttpServletRequest request, JobCodeForm myForm, String entryKey) {
        Map param = new HashMap();

        Integer jobCodeType = myForm.getJobCodeType();

        if(jobCodeType != null && jobCodeType != 0)
        	param.put("code_job_code_type", jobCodeType);        
        String job_code_no = myForm.getJobCodeNo();
        if (job_code_no != null )
        	param.put("job_code_no", job_code_no);
        String idf_cust_no = myForm.getCustNo();
        if (idf_cust_no != null )
        	param.put("idf_cust_no", idf_cust_no);
        Integer is_enabled_contract = myForm.getIsEnabledContract() == null ||  !myForm.getIsEnabledContract()? 0 : 1;        
        if (is_enabled_contract.intValue() == 1 )
        	param.put("is_enabled_contract", "j.IS_ENABLED_CONTRACT = 1 ");
        else
        	param.put("is_enabled_contract", "(j.IS_ENABLED_CONTRACT = 0 or j.IS_ENABLED_CONTRACT is null) ");
        if(myForm.getCustConfirm() != null && myForm.getCustConfirm())
        	param.put("cust_confirm", "j.custConfirm = 1");


        ValueList valueList = valueListService.getValueList(request, entryKey, param);
        return valueList;
    }    
}