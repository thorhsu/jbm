/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.salmat.jbm.struts.action;

import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.mlw.vlh.ValueList;
import net.mlw.vlh.ValueListInfo;
import net.mlw.vlh.web.ValueListRequestUtil;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.action.DynaActionForm;
import org.apache.struts.actions.DispatchAction;
import org.hibernate.Transaction;

import com.salmat.jbm.hibernate.*;
import com.salmat.jbm.service.AmexService;
import com.salmat.jbm.service.CodeService;
import com.salmat.jbm.service.ValueListService;
import com.salmat.jbm.struts.form.*;
import com.salmat.jbm.hibernate.HibernateSessionFactory;
import com.painter.util.Global;
import com.painter.util.SessionUtil;
import com.painter.util.Util;

/**
 * MyEclipse Struts Creation date: 02-23-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action parameter="fid" validate="true"
 * @struts.action-forward name="init" path=".findUserAccount"
 */
public class SyslogAction extends DispatchAction {
    /*
     * Generated Methods
     */
    private static final AmexService amexService = AmexService.getInstance();
    private static final CodeService codeService = CodeService.getInstance();
    private static ValueListService valueListService = ValueListService.getInstance();    
    private static Logger log = Logger.getLogger(SyslogAction.class);

    /**
     * Method execute
     * 
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    protected ActionForward unspecified(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) {

        return mapping.findForward("homepage");
    }

    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
    	ActionMessages messages = new ActionMessages();
        SyslogForm myForm = (SyslogForm) form;
        Integer pageSize= myForm.getPageSize();

        try {
        	if (null== pageSize || pageSize == 0)
        		myForm.reset(mapping, request);
        	ValueList dataList = getValueList(request, myForm,"syslogList");
            request.setAttribute("dataList", dataList);

        } catch (Exception e) {
            log.error("", e);
            messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
                    Global.MESSAGE_SYSTEMERROR_KEY));
            this.saveMessages(request, messages);
            return mapping.findForward(Global.FORWARD_INCLUDE_MESSAGE_KEY);
        }
        return mapping.findForward("list");
    }

    

    
    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        SyslogForm myForm = (SyslogForm) form;
        Integer id = myForm.getId();


        try {
        	HibernateSessionFactory.getSession().getTransaction().begin();
            Amex amex = amexService.findById(id);

            amexService.delete(amex);
            HibernateSessionFactory.getSession().getTransaction().commit();
            request.setAttribute("message", "刪除成功");  

        } catch (Exception e) {
            log.error("delete catch exception", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
        	request.setAttribute("message", "帳號被引用, 不能刪除");  
			return mapping.findForward("message");
        }
        return mapping.findForward("message");
    }    
    

    
    private ValueList getValueList(HttpServletRequest request, SyslogForm myForm, String entryKey) {
        Map param = new HashMap();

        
        Integer isException = myForm.getIsException();
        if (null!= isException  && isException.compareTo(1)==0 )
        	param.put("is_exception", "1");

     
        String logType = myForm.getLogType();
        if (null != logType && logType.length() >0 )
        	param.put("log_type", logType);        
        
        String logDateBegin = myForm.getLogDateBegin();
        if (null != logDateBegin && logDateBegin.length() >0 )
        	param.put("logDateBegin", logDateBegin);    
        
        String logDateEnd = myForm.getLogDateEnd();
        if (null != logDateEnd && logDateEnd.length() >0 )
        	param.put("logDateEnd", logDateEnd);            
        
        ValueList valueList = valueListService.getValueList(request, entryKey, param);
        return valueList;
    }    
}