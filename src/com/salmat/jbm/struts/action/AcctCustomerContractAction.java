/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.salmat.jbm.struts.action;

import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.mlw.vlh.ValueList;
import net.mlw.vlh.ValueListInfo;
import net.mlw.vlh.web.ValueListRequestUtil;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.action.DynaActionForm;
import org.apache.struts.actions.DispatchAction;
import org.hibernate.Transaction;
import org.hibernate.exception.ConstraintViolationException;

import com.salmat.jbm.hibernate.*;
import com.salmat.jbm.service.AcctChargeItemService;
import com.salmat.jbm.service.CodeService;
import com.salmat.jbm.service.CustomerService;
import com.salmat.jbm.service.EmployeeService;
import com.salmat.jbm.service.AcctCustomerContractService;
import com.salmat.jbm.service.JobCodeService;
import com.salmat.jbm.service.ValueListService;
import com.salmat.jbm.struts.form.*;
import com.salmat.jbm.hibernate.HibernateSessionFactory;
import com.painter.util.Global;
import com.painter.util.SessionUtil;
import com.painter.util.Util;


/**
 * MyEclipse Struts Creation date: 02-23-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action parameter="fid" validate="true"
 * @struts.action-forward name="init" path=".findUserAccount"
 */
public class AcctCustomerContractAction extends DispatchAction {
    /*
     * Generated Methods
     */
    private static final AcctCustomerContractService acctCustomerContractService = AcctCustomerContractService.getInstance();
    private static final AcctChargeItemService acctChargeItemService = AcctChargeItemService.getInstance();    
    private static final CustomerService customerService = CustomerService.getInstance();
    private static final CodeService codeService = CodeService.getInstance();
    private static ValueListService valueListService = ValueListService.getInstance();    
    private static Logger log = Logger.getLogger(AcctCustomerContractAction.class);
    private static final JobCodeService jobCodeService = JobCodeService.getInstance();
    private static String minimalChargeId = Util.getString("accounting.minimalChargeItemId");

    /**
     * Method execute
     * 
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    protected ActionForward unspecified(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) {

        return mapping.findForward("homepage");
    }


    
    
    public ActionForward addInit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        AcctCustomerContractForm  myForm = (AcctCustomerContractForm ) form;

        try {
        	AcctCustomerContract acctCustomerContract = new AcctCustomerContract();
        	List chargeItemList = acctChargeItemService.findByItemType("JOB_BAG");
        	//Collections.sort(chargeItemList,comp);
        	Comparator<AcctChargeItem> comparator = new Comparator<AcctChargeItem>(){
        		public int compare(AcctChargeItem arg0, AcctChargeItem arg1) {
            		return arg0.getItemName().compareTo(arg1.getItemName());
            		}
        	};
        	
        	Collections.sort(chargeItemList, comparator );
        	
        	
            request.setAttribute("chargeItemList", chargeItemList);        	
            request.setAttribute("acctCustomerContract", acctCustomerContract);


            request.setAttribute("ACTION_MODE", "ADD");
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("editInit");
    }    
    
    //複製新增
    public ActionForward saveAsNewInit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        AcctCustomerContractForm  myForm = (AcctCustomerContractForm ) form;
        
        try{
        	
        	String custNo = myForm.getCustNo();
        	String ContactDateBegin = myForm.getContactDateBegin_form();
        	List acctCustomerContractList = acctCustomerContractService.getAcctCustomerContractList(custNo, ContactDateBegin);
        	
        	List chargeItemList = acctChargeItemService.findByItemType("JOB_BAG");
        	//Collections.sort(chargeItemList,comp);
        	Comparator<AcctChargeItem> comparator = new Comparator<AcctChargeItem>(){
        		public int compare(AcctChargeItem arg0, AcctChargeItem arg1) {
            		return arg0.getItemName().compareTo(arg1.getItemName());
            		}
        	};
        	
        	Collections.sort(chargeItemList, comparator );        	
            request.setAttribute("chargeItemList", chargeItemList);
            
            
        	request.setAttribute("ACTION_MODE", "SAVE_AS_NEW");
            request.setAttribute("acctCustomerContractList", acctCustomerContractList);
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("editInit");
    }        
    
    public ActionForward addSubmit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        AcctCustomerContractForm  myForm = (AcctCustomerContractForm ) form;



        try {
        	HibernateSessionFactory.getSession().clear();
        	HibernateSessionFactory.getSession().getTransaction().begin();

        	  	
        	
        	//設定客戶代碼
        	String custNo = myForm.getCustNo();
        	Customer customer = customerService.findById(custNo);

        	
			String contactDateBegin_form = myForm.getContactDateBegin_form();
			String contactDateEnd_form = myForm.getContactDateEnd_form();
			boolean autoExtend = myForm.getAutoExtend() == null ? false : myForm.getAutoExtend();
			
			//檢查合約日期是否重疊
			Boolean isExtendContrct = false;			
			boolean isOverlapping = acctCustomerContractService.checkIsOverlapping(custNo,contactDateBegin_form, contactDateEnd_form, isExtendContrct );
			if (isOverlapping) {
	            request.setAttribute("message", "合約日期重疊");
	            return mapping.findForward("message");				
			}
			Date contactDateBegin = new Date();
			Date contactDateEnd = new Date();
			SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
			if (null != contactDateBegin_form && contactDateEnd_form.length()>1 ) {
				contactDateBegin = (Date) formatter.parse(contactDateBegin_form);	
				contactDateEnd = (Date) formatter.parse(contactDateEnd_form);
			}

        	Integer[] chargeItemIds = myForm.getChargeItemIds();
        	Double[] unitPrices= myForm.getUnitPrices();
        	String[] reportTitles= myForm.getReportTitles();
        	Integer orderby= 0;
        	
        	//檢查收費項目是否重複
        	String chargeItemIdList="";
        	if(chargeItemIds != null){
        	for (int i=0; i<chargeItemIds.length;i++) {
        		for (int j=0; j<chargeItemIds.length;j++) {
        			if (i!=j && chargeItemIds[i].compareTo(chargeItemIds[j])==0 && chargeItemIds[j].compareTo(0) >0) {
        	            request.setAttribute("message", "收費項目重複");
        	            return mapping.findForward("message");	
        			}
        		}
        	}

        	for (int i=0; i<chargeItemIds.length;i++) {
        		//有輸入單價金額, 表示這項目要收費  
        		if (null!= unitPrices[i] && unitPrices[i] > 0) {
        			AcctCustomerContract acctCustomerContract = new AcctCustomerContract();      
        			acctCustomerContract.setCustomer(customer);
        			acctCustomerContract.setContactDateBegin(contactDateBegin);
        			acctCustomerContract.setContactDateEnd(contactDateEnd);
        			acctCustomerContract.setAutoExtend(autoExtend);
                	AcctChargeItem acctChargeItem = (AcctChargeItem)acctChargeItemService.findById(chargeItemIds[i]);
                	acctCustomerContract.setAcctChargeItem(acctChargeItem);
                	
                	//若有輸入 reportTitles, 則存放 輸入值, 否則以存原 acctChargeItem.getReportTitle()
                	if (null!= reportTitles[i] && reportTitles[i].length() >0)
                		acctCustomerContract.setReportTitle(reportTitles[i]);
                	else
                		acctCustomerContract.setReportTitle(acctChargeItem.getReportTitle());
                	acctCustomerContract.setOrderby(orderby++);
                	acctCustomerContract.setUnitPrice(unitPrices[i]);
                	acctCustomerContractService.save(acctCustomerContract);
        		}
        	}
        	}
        	
        	
            HibernateSessionFactory.getSession().getTransaction().commit();
            request.setAttribute("message", "新增成功");
            return mapping.findForward("message");
        } catch (Exception e) {
            log.error("", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }

    }    
    
    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
    	ActionMessages messages = new ActionMessages();
        AcctCustomerContractForm  myForm = (AcctCustomerContractForm ) form;

        try {
        	ValueList dataList = getValueList(request, myForm,"acctCustomerContractList");
            request.setAttribute("dataList", dataList);
            
            //將dataList 放到session 
            request.getSession().setAttribute("dataList", dataList);   
            String backToListURL = request.getRequestURI() +"?" + request.getQueryString();
            //request.getSession().setAttribute("backToListURL", backToListURL);     
            request.setAttribute("backToListURL", URLEncoder.encode(backToListURL, "UTF-8"));

        } catch (Exception e) {
            log.error("", e);
            messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
                    Global.MESSAGE_SYSTEMERROR_KEY));
            this.saveMessages(request, messages);
            return mapping.findForward(Global.FORWARD_INCLUDE_MESSAGE_KEY);
        }
        return mapping.findForward("list");
    }

    


    
    public ActionForward editInit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        AcctCustomerContractForm  myForm = (AcctCustomerContractForm ) form;
        
        try{
        	HibernateSessionFactory.getSession().clear();
        	String custNo = myForm.getCustNo();
        	String ContactDateBegin = myForm.getContactDateBegin_form();
        	List acctCustomerContractList = acctCustomerContractService.getAcctCustomerContractList(custNo, ContactDateBegin);
        	
        	List chargeItemList = acctChargeItemService.findByItemType("JOB_BAG");
        	
        	List chargeItemsNonJobBag = acctChargeItemService.findByItemType("NON_JOB_BAG");
        	//Collections.sort(chargeItemList,comp);
        	Comparator<AcctChargeItem> comparator = new Comparator<AcctChargeItem>(){
        		public int compare(AcctChargeItem arg0, AcctChargeItem arg1) {
            		return arg0.getItemName().compareTo(arg1.getItemName());
            		}
        	};
        	
        	Collections.sort(chargeItemList, comparator );        	
            request.setAttribute("chargeItemList", chargeItemList);
            request.setAttribute("chargeItemsNonJobBag", chargeItemsNonJobBag);
            
            
        	request.setAttribute("ACTION_MODE", "EDIT");
            request.setAttribute("acctCustomerContractList", acctCustomerContractList);
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("editInit");
    }
    
    
    
    
    public ActionForward editSubmit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        AcctCustomerContractForm  myForm = (AcctCustomerContractForm ) form;
        Integer id = myForm.getId();
        boolean autoExtend = myForm.getAutoExtend() == null ? false : myForm.getAutoExtend();  
        try {
        	HibernateSessionFactory.getSession().clear();
        	

        	
        	//設定客戶代碼
        	String custNo = myForm.getCustNo();
        	Customer customer = customerService.findById(custNo);

        	
			String contactDateBegin_form = myForm.getContactDateBegin_form();
			String contactDateEnd_form = myForm.getContactDateEnd_form();
	
			//檢查合約日期是否重疊
			Boolean isExtendContrct = true;
			boolean isOverlapping = acctCustomerContractService.checkIsOverlapping(custNo,contactDateBegin_form, contactDateEnd_form , isExtendContrct);
			if (isOverlapping) {
	            request.setAttribute("message", "合約日期重疊");
	            return mapping.findForward("message");				
			}
			
			Date contactDateBegin = new Date();
			Date contactDateEnd = new Date();
			SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
			if (null != contactDateBegin_form && contactDateEnd_form.length()>1 ) {
				contactDateBegin = (Date) formatter.parse(contactDateBegin_form);	
				contactDateEnd = (Date) formatter.parse(contactDateEnd_form);
			}

        	Integer[] chargeItemIds = myForm.getChargeItemIds();
        	Double[] unitPrices= myForm.getUnitPrices();
        	String[] reportTitles= myForm.getReportTitles();
        	Integer[] delIds = myForm.getDelIds();
        	Integer orderby= 0;
        	Integer[] acctCustomerContractIds = myForm.getAcctCustomerContractIds();
        	HibernateSessionFactory.getSession().getTransaction().begin();
        	if(delIds != null){
        		for(Integer  acctCustContractId : delIds){
        			if(acctCustContractId != null){
        			   for (int i=0; i<acctCustomerContractIds.length;i++) {        				   
        				   if(acctCustomerContractIds[i] != null && acctCustomerContractIds[i].intValue() == acctCustContractId.intValue()){        					
        					   acctCustomerContractIds[i] = -1;
        				   }
        			   }
        			}
        			AcctCustomerContract acctCustomerContract = acctCustomerContractService.findById(acctCustContractId);
        			if(acctCustomerContract != null){
        			   if(acctCustomerContract.getAcctChargeItem() != null){
        			      String chargeItemId = acctCustomerContract.getAcctChargeItem().getId() + "";
        			      //檢查有沒有minimalchargeItem
        			      if(minimalChargeId.equals(chargeItemId)){
        				      jobCodeService.updateMinimalChargeToNull(custNo);
        			      }        			
        			   }
                	   acctCustomerContractService.delete(acctCustomerContract);
        			}
        		}
        	}
        	HibernateSessionFactory.getSession().getTransaction().commit();
        	//檢查收費項目是否重複
        	String chargeItemIdList="";
        	for (int i=0; i<chargeItemIds.length;i++) { 
        		for (int j=0; j<chargeItemIds.length;j++) {
        			if (i!=j && chargeItemIds[i] != null && chargeItemIds[j] != null && chargeItemIds[i].compareTo(chargeItemIds[j])==0 && chargeItemIds[j].compareTo(0) >0) {
        	            request.setAttribute("message", "收費項目重複");
        	            return mapping.findForward("message");	
        			}
        		}
        	}
        	
        	HibernateSessionFactory.getSession().getTransaction().begin();
        	for (int i=0; i<chargeItemIds.length;i++) {
        		//有輸入單價金額, 表示這項目要收費  
        		if (acctCustomerContractIds[i] >= 0 && null!= unitPrices[i] && unitPrices[i] >= 0 && chargeItemIds[i] != null && chargeItemIds[i].intValue() > 0) {
        			AcctCustomerContract acctCustomerContract = new AcctCustomerContract();   
        			if (acctCustomerContractIds[i] > 0)
        				acctCustomerContract = acctCustomerContractService.findById(acctCustomerContractIds[i]);
        			
        			//若 acctCustomerContract.getAcctChargeItem() == chargeItemIds[i], 表示單純改價格
        			//反之, 表示除了改價格外, 也變動 chargeItemId ==> 刪除原 AcctCustomerContract, 再新增一個AcctCustomerContract
        			//目前在前端擋掉，要先刪除才能修改，所以不會進到這段 
        			if (null!= acctCustomerContract.getAcctChargeItem() && acctCustomerContract.getAcctChargeItem().getId().compareTo(chargeItemIds[i])!=0) {
                    	acctCustomerContractService.delete(acctCustomerContract);
                    	acctCustomerContract = new AcctCustomerContract(); 
        			}
        			acctCustomerContract.setCustomer(customer);
        			acctCustomerContract.setContactDateBegin(contactDateBegin);
        			acctCustomerContract.setContactDateEnd(contactDateEnd);
        			acctCustomerContract.setAutoExtend(autoExtend);
        			//System.out.println("chargeItemIds[i]:" + chargeItemIds[i]);
                	AcctChargeItem acctChargeItem = (AcctChargeItem)acctChargeItemService.findById(chargeItemIds[i]);
                	acctCustomerContract.setAcctChargeItem(acctChargeItem);
                	acctCustomerContract.setOrderby(orderby++);
                	//若有輸入 reportTitles, 則存放 輸入值, 否則以存原 acctChargeItem.getReportTitle()
                	if (null!= reportTitles[i] && reportTitles[i].length() >0)
                		acctCustomerContract.setReportTitle(reportTitles[i]);
                	else
                		acctCustomerContract.setReportTitle(acctChargeItem.getReportTitle());         	
                	acctCustomerContract.setUnitPrice(unitPrices[i]); 
                	
                	acctCustomerContractService.save(acctCustomerContract);
        		}
        		
        		/*
        		//若單價 =0,  但  acctCustomerContractIds <>0, 表示要刪除該 acctCustomerContractIds
        		if (null!= unitPrices[i] && unitPrices[i] ==0 && acctCustomerContractIds[i] >0 ) {
        			AcctCustomerContract acctCustomerContract = acctCustomerContractService.findById(acctCustomerContractIds[i]);
                	acctCustomerContractService.delete(acctCustomerContract);
        		} 
        		*/       		
        	}
        	
        	
            HibernateSessionFactory.getSession().getTransaction().commit();
            request.setAttribute("message", "修改成功");
            return mapping.findForward("message");
        } catch (ConstraintViolationException e) {
            HibernateSessionFactory.getSession().getTransaction().rollback();
            request.setAttribute("message", "資料被引用, 不能刪除");  
            return mapping.findForward("message");			
        } catch (Exception e) {
            log.error("", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }finally{
        	
        }
        
        

    }
    
    
    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        AcctCustomerContractForm  myForm = (AcctCustomerContractForm ) form;

        try {
        	HibernateSessionFactory.getSession().getTransaction().begin();
        	String custNo = myForm.getCustNo();
        	String ContactDateBegin = myForm.getContactDateBegin_form();
        	Boolean ret = acctCustomerContractService.deleteByCustomerContractDate(custNo, ContactDateBegin);        	
        	if (ret) {
        		HibernateSessionFactory.getSession().getTransaction().commit();
        		request.setAttribute("message", "刪除成功");
        	}else {
                HibernateSessionFactory.getSession().getTransaction().rollback();
            	request.setAttribute("message", "資料被引用, 不能刪除");          		
        	}

        } catch (Exception e) {
            log.error("delete catch exception", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
        	request.setAttribute("message", "資料被引用, 不能刪除");  
			return mapping.findForward("message");
        }
        return mapping.findForward("message");
    }    
    
    
    private ValueList getValueList(HttpServletRequest request, AcctCustomerContractForm  myForm, String entryKey) {
        Map param = new HashMap();
        

        String idf_cust_no = myForm.getCustNo();
        if (idf_cust_no != null )
        	param.put("idf_cust_no", idf_cust_no);
        
        ValueList valueList = valueListService.getValueList(request, entryKey, param);
        return valueList;
    }    
}