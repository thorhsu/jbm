/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.salmat.jbm.struts.action;

import java.io.IOException;
import java.net.URLEncoder;
import java.sql.Connection;
import java.sql.DriverManager;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.mlw.vlh.ValueList;
import net.mlw.vlh.ValueListInfo;
import net.mlw.vlh.web.ValueListRequestUtil;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.beanutils.ConvertUtils;
import org.apache.commons.beanutils.converters.DateConverter;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.action.DynaActionForm;
import org.apache.struts.actions.DispatchAction;
import org.hibernate.Transaction;

import com.salmat.jbm.bean.LpinfoJSON;
import com.salmat.jbm.hibernate.*;
import com.salmat.jbm.service.*;
import com.salmat.jbm.struts.form.*;
import com.salmat.jbm.hibernate.HibernateSessionFactory;
import com.painter.util.Global;
import com.painter.util.SessionUtil;
import com.painter.util.Util;

import net.sf.jasperreports.engine.*;
import net.sf.jasperreports.engine.export.*;
import java.util.*;



/**
 * MyEclipse Struts Creation date: 02-23-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action parameter="fid" validate="true"
 * @struts.action-forward name="init" path=".findUserAccount"
 */
/**
 * @author painterlin
 *
 */
public class JobBagLGAction extends DispatchAction {
    /*
     * Generated Methods
     */
	private static final HistoryReportService historyReportService = HistoryReportService.getInstance();	
	private static final LPInfoService lpinfoService = LPInfoService.getInstance();
	private static final MPInfoService mpinfoService = MPInfoService.getInstance();
	private static final PSInfoService psinfoService = PSInfoService.getInstance();
	private static final LGInfoService lginfoService = LGInfoService.getInstance();
	private static final ReturnInfoService returninfoService = ReturnInfoService.getInstance();
	private static final LCInfoService lcinfoService = LCInfoService.getInstance();
	private static final JobCodeService jobcodeService = JobCodeService.getInstance();
    private static final JobBagService jobbagService = JobBagService.getInstance();
	private static final JobBagSpliteService jobbagSpliteService = JobBagSpliteService.getInstance();    
    private static final CustomerService customerService = CustomerService.getInstance();
    private static final CodeService codeService = CodeService.getInstance();
    private static ValueListService valueListService = ValueListService.getInstance();    
    private static Logger log = Logger.getLogger(JobBagLGAction.class);

    /**
     * Method execute
     * 
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    protected ActionForward unspecified(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) {

        return mapping.findForward("homepage");
    }


    public ActionForward updateJobBagStatus(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
    	response.setContentType("text/json;charset=UTF-8");
    	ActionMessages messages = new ActionMessages();
        JobBagForm myForm = (JobBagForm) form;
        String jsonString = "";
        String jobBagNos = request.getParameter("idList");
        List<Map<String, String>> retJobs = null;
        if(jobBagNos != null && jobBagNos.endsWith(",")){
        	jobBagNos = jobBagNos.substring(0, jobBagNos.length() - 1);
            retJobs = jobbagService.findJobBagInList(jobBagNos);
        
            try {
        	    JSONArray json = JSONArray.fromObject(retJobs);
        	    jsonString = json.toString();
			    response.getWriter().write(jsonString);
        	
		    } catch (IOException e) {
                log.error("", e);
			    e.printStackTrace();
		    }
        }
        return null;
    	
    }
    
    /**
     * Method list
     * 郵資單與交寄管制表 action
     */    
    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
    	ActionMessages messages = new ActionMessages();
        JobBagForm myForm = (JobBagForm) form;

        try {
        	ValueList dataList = getValueList(request, myForm,"jobbagList_LG");
            request.setAttribute("dataList", dataList);
            
            String job_bag_nos = "";
            for(Object obj : dataList.getList()){
            	job_bag_nos += "'" + BeanUtils.getProperty(obj, "job_bag_no") + "',";
            }
            request.setAttribute("idList", job_bag_nos);
            
            String backToListURL = request.getRequestURI() +"?" + request.getQueryString();
            //request.getSession().setAttribute("backToListURL", backToListURL);
            request.setAttribute("backToListURL", URLEncoder.encode(backToListURL, "UTF-8"));

        } catch (Exception e) {
            log.error("", e);
            messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
                    Global.MESSAGE_SYSTEMERROR_KEY));
            this.saveMessages(request, messages);
            return mapping.findForward(Global.FORWARD_INCLUDE_MESSAGE_KEY);
        }
        return mapping.findForward("list");
    }

    
    /**
     * Method listReturn
     * 退回客戶清單 action
     */
    public ActionForward listReturn(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
    	ActionMessages messages = new ActionMessages();
        JobBagForm myForm = (JobBagForm) form;

        try {
        	ValueList dataList = getValueList(request, myForm,"jobbagList_Return_LG");
            request.setAttribute("dataList", dataList);
            
            String job_bag_nos = "";
            for(Object obj : dataList.getList()){
            	job_bag_nos += "'" + BeanUtils.getProperty(obj, "job_bag_no") + "',";
            }
            request.setAttribute("idList", job_bag_nos);

            
            String backToListURL = request.getRequestURI() +"?" + request.getQueryString();
            //request.getSession().setAttribute("backToListURL", backToListURL);             
            request.setAttribute("backToListURL", URLEncoder.encode(backToListURL, "UTF-8"));
        } catch (Exception e) {
            log.error("", e);
            messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
                    Global.MESSAGE_SYSTEMERROR_KEY));
            this.saveMessages(request, messages);
            return mapping.findForward(Global.FORWARD_INCLUDE_MESSAGE_KEY);
        }
        return mapping.findForward("list_return");
    }    
    
    public ActionForward view(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        JobBagForm myForm = (JobBagForm) form;
        String jobBagNo = myForm.getJobBagNo();
        
        try {
        	JobBag jobbag = jobbagService.findById(jobBagNo);
        	

        	List lplist = customerService.getCustomerLPList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("lpinfoJSON", lplist);  
    		
        	List mplist = customerService.getCustomerMPList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("mpinfoJSON", mplist);    		
    		
        	List pslist = customerService.getCustomerPSList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("psinfoJSON", pslist);    		
    		
        	List lglist = customerService.getCustomerLGList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("lginfoJSON", lglist);    		
    		
        	List returnlist = customerService.getCustomerReturnList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("returninfoJSON", returnlist);    		
    		
        	List lclist = customerService.getCustomerLCList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("lcinfoJSON", lclist);    		
    		
        	request.setAttribute("ACTION_MODE", "VIEW");
            request.setAttribute("jobbag", jobbag);

        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("editInit");
    }
    
    
    /**
     * Method listReturn
     * 產生郵資單+交寄管制表 action
     */
    public ActionForward batchGenerateLGFormSumbit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        JobBagForm myForm = (JobBagForm) form;


        try {
        	String jobBagNos[] = myForm.getJobBagNos();
        	
        	if (null ==jobBagNos ) {
                request.setAttribute("message", "無勾選工單");
                return mapping.findForward("message");        		
        	}
        	
        	String jobBagList=null;
        	//先找到submint的jobbag no
        	for (int i=0;i<jobBagNos.length;i++) {
        		String[] tokens = jobBagNos[i].split(";"); //jobCodeNo;row_index
        		String jobBagNo = tokens[0];//jobBagNo
        		Integer row_index = Integer.parseInt(tokens[1]);//row_index
        		JobBag jobbag = jobbagService.findById(jobBagNo);

        		if (null == jobBagList)
        			jobBagList = "'" + jobbag.getJobBagNo()+"'";
        		else
        			jobBagList = jobBagList +  ", '" + jobbag.getJobBagNo()+"'";
        	}
        	
    		//產生LGForm
        	List lgformList = null;
        	lgformList = lginfoService.batchGenerateLGForm(jobBagList);
        	request.getSession().setAttribute("jobBagList", jobBagList); //jobBagList 存入session, 列印管制表 需要 
        	
        	
            // HibernateSessionFactory.getSession().getTransaction().commit();        	
        	if (null!=lgformList &&  lgformList.size() >0) {
        		Lgform lgform = (Lgform)lgformList.get(0);
        		request.getSession().setAttribute("lgformList", lgformList);
        		//response.sendRedirect("lgform.do?fid=editInit&custNo=" + lgform.getIdfCustNo() + "&statementNo=" + lgform.getStatementNo());
        		
        		LGFormForm lgFormForm = new LGFormForm();
        		lgFormForm.setCustNo(lgform.getIdfCustNo());
        		lgFormForm.setStatementNo(lgform.getStatementNo());
        		new LGFormAction().editInit(mapping, lgFormForm, request, response);
        		return mapping.findForward("lgFormEditInit");
        		
        		
        	} else {
        		lgformList = null;  // 清空 lgformList
        		request.getSession().setAttribute("lgformList", lgformList);
            	return mapping.findForward("lcFormEditInit");

        	}

        } catch (Exception e) {
            log.error("", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        //return mapping.findForward("viewAccount");
    }        
    
    
    
    
    
    
    



	/**
     * Method listReturn
     * 批次記錄完成 action
     */    
    public ActionForward batchCompletedSumbit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        JobBagForm myForm = (JobBagForm) form;


        try {
        	HibernateSessionFactory.getSession().clear();
        	HibernateSessionFactory.getSession().getTransaction().begin();
        	
        	Employee employee = new Employee();
        	employee = SessionUtil.getAccount(request);
        	
        	String jobBagNos[] = myForm.getJobBagNos();

        	
        	if (null ==jobBagNos ) {
                request.setAttribute("message", "無勾選工單");
                return mapping.findForward("message");        		
        	}
        	
        	
    		//取得系統時間
			Calendar calendar = Calendar.getInstance();
			Date now = new Date();
			calendar.setTime(now); 
			
			
        	String jobBagList=null;
        	for (int i=0;i<jobBagNos.length;i++) {
        		String[] tokens = jobBagNos[i].split(";"); //jobCodeNo;row_index
        		String jobBagNo = tokens[0];//jobBagNo
        		Integer row_index = Integer.parseInt(tokens[1]);//row_index
        		JobBag jobbag = jobbagService.findById(jobBagNo);
    			//原JobBagSplite 押上  交寄作業已完成時間
        		Set<JobBagSplite> splites = jobbag.getJobBagSplites();
        		Iterator iterator = splites.iterator();
        		while (iterator.hasNext()) {
        			JobBagSplite jobBagSplite =  (JobBagSplite)iterator.next();
        			if (null!= jobBagSplite && null!=jobBagSplite.getJobBagSpliteNo()) {
        				jobBagSplite.setLgCompletedUser(employee.getUserId());
	            		jobBagSplite.setLgCompletedDateByUser(calendar.getTime());
	            		jobbagSpliteService.save(jobBagSplite);
        			}
        		}
        		if(!"ACCT_DN_GENERATED".equals(jobbag.getJobBagStatus()) && !"ACCOUNTING_LOCKED".equals(jobbag.getJobBagStatus()) && !"ACCOUNTING_EP1".equals(jobbag.getJobBagStatus()) && !"EDD".equals(jobbag.getJobBagStatus()))
	    		   jobbag.setJobBagStatus("COMPLETED_LG"); //交寄作業已完成
	    		jobbag.setCompletedDate(calendar.getTime()); //交寄完成日期
	    		jobbagService.save(jobbag);

        	}
        	

        	
            HibernateSessionFactory.getSession().getTransaction().commit();
            request.setAttribute("message", "批次記錄完成");
            return mapping.findForward("message");
        } catch (Exception e) {
            log.error("", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        //return mapping.findForward("viewAccount");
    }        
    
    

	/**
     * 批次列印 郵資單 及 管制表  action
     * input 挑選的 lgformList 
     */       
    public ActionForward batchPrintLGFormSumbit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        JobBagForm myForm = (JobBagForm) form;


        try {
        	HibernateSessionFactory.getSession().clear();
        	HibernateSessionFactory.getSession().getTransaction().begin();
        	
        	@SuppressWarnings("deprecation")
			Connection conn= HibernateSessionFactory.getSession().connection();  
        	
        	//從session 取出 lgformList 
        	List lgformList= (List)request.getSession().getAttribute("lgformList");    
        	//從session 取出 jobBagList         	
        	String jobBagList= (String)request.getSession().getAttribute("jobBagList");
        	
        	
        	String custNoStatementNoList=null;

        	if (null!= lgformList && lgformList.size() > 0) { //若有郵資單
	        	for (int i=0;i<lgformList.size();i++) {
	        		Lgform lgform = (Lgform)lgformList.get(i);
	        		//組合 groupby key List 
	        		if (null == custNoStatementNoList )
	        			custNoStatementNoList = "'" + lgform.getIdfCustNo() + lgform.getStatementNo()+"'"; 
	        		else
	        			custNoStatementNoList = custNoStatementNoList +  ", '" + lgform.getIdfCustNo() + lgform.getStatementNo()+"'";
	        	}
        	}
    	

            try {
            	
            	String serverPath = request.getSession().getServletContext().getRealPath("");
            	
            	
        		//產生郵資單PDF 檔
            	if (null!= lgformList && lgformList.size() > 0) { //若有郵資單
	                String fileName = serverPath + "\\report\\postage.jasper";
	                String pdfFileName = "postage_" +new SimpleDateFormat("yyyyMMddHHmmssMs").format(new Date())+".pdf";
	
	                String outFileName = serverPath +"\\pdf\\"+pdfFileName;
	                String jbmHome = Util.getString("jbm.home.local") + "PostageImage\\";
	                HashMap hm = new HashMap();
	                
	                hm.put("custNoStatementNoList", custNoStatementNoList);
	                hm.put("jbmHome", jbmHome);
	                
	                JasperPrint print = JasperFillManager.fillReport(fileName, hm, conn);
	                JRExporter exporter = new JRPdfExporter();
	                exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, outFileName);
	                exporter.setParameter(JRExporterParameter.JASPER_PRINT, print);
	                exporter.exportReport();
					request.setAttribute("message", "列印郵資單+交寄管制表 成功");
	                request.setAttribute("pdfFileName", pdfFileName);
	                
	                // 埋入HistoryReport
	                HistoryReport historyReport = new HistoryReport();
	                historyReport.setReportName(pdfFileName);
	                historyReport.setPdfPath(outFileName);
	                Employee employee = SessionUtil.getAccount(request.getSession());
	                historyReport.setEmpNo(employee.getEmpNo());
	                Calendar today = Calendar.getInstance();
	                historyReport.setCreateDate(today.getTime());
	                historyReportService.save(historyReport);
	                // end HistoryReport
	                
	                
            	} else {
	                request.setAttribute("message", "列印 交寄管制表 成功");            		
            	}
        		//產生交寄管制表PDF 檔_以郵局分頁
                
                String querySession = lcinfoService.batchGenerateLCForm(jobBagList,"STANDARD_POST_OFFICE");
	
                if (null!= querySession && querySession.length() >0) {

	                String fileName_PostOffice = serverPath + "\\report\\lodgmentControlSheet_PostOffice.jasper";
	                String pdfFileName_PostOffice = "lodgmentControlSheet_PostOffice_" +new SimpleDateFormat("yyyyMMddHHmmssMs").format(new Date())+".pdf";
	
	                String outFileName_PostOffice = serverPath +"\\pdf\\"+pdfFileName_PostOffice;
	                HashMap hm_PostOffice = new HashMap();
	                hm_PostOffice.put("querySession", querySession);
	                JasperPrint print = JasperFillManager.fillReport(fileName_PostOffice, hm_PostOffice, conn);
	                JRExporter exporter = new JRPdfExporter();
	                exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, outFileName_PostOffice);
	                exporter.setParameter(JRExporterParameter.JASPER_PRINT, print);
	                exporter.exportReport();
	                request.setAttribute("pdfFileName_PostOffice", pdfFileName_PostOffice);  
	                
	                // 埋入HistoryReport
	                HistoryReport historyReport = new HistoryReport();
	                historyReport.setReportName(pdfFileName_PostOffice);
	                historyReport.setPdfPath(outFileName_PostOffice);
	                Employee employee = SessionUtil.getAccount(request.getSession());
	                historyReport.setEmpNo(employee.getEmpNo());
	                Calendar today = Calendar.getInstance();
	                historyReport.setCreateDate(today.getTime());
	                historyReportService.save(historyReport);
	                // end HistoryReport
	                
	                
                }
                
        		//產生交寄管制表PDF 檔_以郵局分頁+客戶 分頁
                
                String querySession2 = lcinfoService.batchGenerateLCForm(jobBagList,"STANDARD_POST_OFFICE_CUSTOMER");

                if (null!= querySession2 && querySession2.length() >0) {

	                String fileName_PostOffice_customer = serverPath + "\\report\\lodgmentControlSheet_PostOffice_customer.jasper";
	                String pdfFileName_PostOffice_customer = "lodgmentControlSheet_PostOffice_customer" +new SimpleDateFormat("yyyyMMddHHmmssMs").format(new Date())+".pdf";
	
	                String outFileName_PostOffice_customer = serverPath +"\\pdf\\"+pdfFileName_PostOffice_customer;
	                HashMap hm_PostOffice_customer = new HashMap();
	                hm_PostOffice_customer.put("querySession", querySession2);
	                JasperPrint print = JasperFillManager.fillReport(fileName_PostOffice_customer, hm_PostOffice_customer, conn);
	                JRExporter exporter = new JRPdfExporter();
	                exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, outFileName_PostOffice_customer);
	                exporter.setParameter(JRExporterParameter.JASPER_PRINT, print);
	                exporter.exportReport();     
	                request.setAttribute("pdfFileName_PostOffice_customer", pdfFileName_PostOffice_customer);   
	                
	                // 埋入HistoryReport
	                HistoryReport historyReport = new HistoryReport();
	                historyReport.setReportName(pdfFileName_PostOffice_customer);
	                historyReport.setPdfPath(outFileName_PostOffice_customer);
	                Employee employee = SessionUtil.getAccount(request.getSession());
	                historyReport.setEmpNo(employee.getEmpNo());
	                Calendar today = Calendar.getInstance();
	                historyReport.setCreateDate(today.getTime());
	                historyReportService.save(historyReport);
	                // end HistoryReport
	                
                }
                
        		//產生交寄管制表PDF 檔_FUBON 
                
                String querySession3 = lcinfoService.batchGenerateLCForm(jobBagList,"FUBON");

                if (null!= querySession3 && querySession3.length() >0) {

	                String fileName_Fubon = serverPath + "\\report\\lodgmentControlSheet_Fubon.jasper";
	                String pdfFileName_Fubon = "lodgmentControlSheet_Fubon" +new SimpleDateFormat("yyyyMMddHHmmssMs").format(new Date())+".pdf";
	
	                String outFileName_Fubon = serverPath +"\\pdf\\"+pdfFileName_Fubon;
	                HashMap hm_Fubon = new HashMap();
	                hm_Fubon.put("querySession", querySession3);
	                JasperPrint print = JasperFillManager.fillReport(fileName_Fubon, hm_Fubon, conn);
	                JRExporter exporter = new JRPdfExporter();
	                exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, outFileName_Fubon);
	                exporter.setParameter(JRExporterParameter.JASPER_PRINT, print);
	                exporter.exportReport();     
	                request.setAttribute("pdfFileName_Fubon", pdfFileName_Fubon);   
	                
	                
	                // 產生合計報表
	                String fileName_Fubon_subTotal = serverPath + "\\report\\lodgmentControlSheet_Fubon_subTotal.jasper";
	                String pdfFileName_Fubon_subTotal = "lodgmentControlSheet_Fubon_subTotal" +new SimpleDateFormat("yyyyMMddHHmmssMs").format(new Date())+".pdf";
	
	                String outFileName_Fubon_subTotal = serverPath +"\\pdf\\"+pdfFileName_Fubon_subTotal;
	                HashMap hm_Fubon_subTotal = new HashMap();
	                hm_Fubon_subTotal.put("querySession", querySession3);
	                JasperPrint print_subTotal = JasperFillManager.fillReport(fileName_Fubon_subTotal, hm_Fubon_subTotal, conn);
	                JRExporter exporter_subTotal = new JRPdfExporter();
	                exporter_subTotal.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, outFileName_Fubon_subTotal);
	                exporter_subTotal.setParameter(JRExporterParameter.JASPER_PRINT, print_subTotal);
	                exporter_subTotal.exportReport();     
	                request.setAttribute("pdfFileName_Fubon_subTotal", pdfFileName_Fubon_subTotal);   
	                
	                
	                // 埋入HistoryReport
	                HistoryReport historyReport = new HistoryReport();
	                historyReport.setReportName(pdfFileName_Fubon);
	                historyReport.setPdfPath(outFileName_Fubon);
	                Employee employee = SessionUtil.getAccount(request.getSession());
	                String emp_no = employee.getEmpNo();
	                historyReport.setEmpNo(emp_no);
	                historyReport.setCreateDate(new Date());
	                historyReportService.save(historyReport);
	                // end HistoryReport
	                
	                
	                // 埋入HistoryReport
	                HistoryReport historyReport_subTotal = new HistoryReport();
	                historyReport_subTotal.setReportName(pdfFileName_Fubon_subTotal);
	                historyReport_subTotal.setPdfPath(outFileName_Fubon_subTotal);
	                historyReport_subTotal.setEmpNo(emp_no);
	                historyReport_subTotal.setCreateDate(new Date());
	                historyReportService.save(historyReport_subTotal);
	                // end HistoryReport	                
                }                
                
        		//更新工單狀態 = 已列印郵資單
                Boolean ret = jobbagService.updateJobStatus(jobBagList,"PRINTED_LG_FORM");

            } catch (JRException e) {
            	log.error("", e);
                e.printStackTrace();
                //HibernateSessionFactory.getSession().getTransaction().rollback();
            } catch (Exception e) {
            	log.error("", e);
                e.printStackTrace();
                //HibernateSessionFactory.getSession().getTransaction().rollback();
            }       
        	
        	HibernateSessionFactory.getSession().getTransaction().commit();
            return mapping.findForward("pdfDownload");
        } catch (Exception e) {
            log.error("", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }finally{
        	if(HibernateSessionFactory.getSession().isOpen())
        	   HibernateSessionFactory.closeSession();
        }
        //return mapping.findForward("viewAccount");
    }        
    
    
	/**
     * Method listReturn
     * 批次列印 退回客戶清單  action
     */       
    public ActionForward batchPrintReturnListSumbit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
    	//System.out.println("into here ");
        JobBagForm myForm = (JobBagForm) form;


        try {
        	HibernateSessionFactory.getSession().clear();
        	HibernateSessionFactory.getSession().getTransaction().begin();
        	
        	
        	@SuppressWarnings("deprecation")
			Connection conn= HibernateSessionFactory.getSession().connection();  
        	
        	
        	String jobBagNos[] = myForm.getJobBagNos();
        	Integer spliteCounts[]= myForm.getSpliteCounts();
        	

        	
        	if (null ==jobBagNos ) {
                request.setAttribute("message", "無勾選工單");
                return mapping.findForward("message");        		
        	}
        	
        	String jobBagList=null;
        	for (int i=0;i<jobBagNos.length;i++) {
        		String[] tokens = jobBagNos[i].split(";"); //jobCodeNo;row_index
        		String jobBagNo = tokens[0];//jobBagNo
        		Integer row_index = Integer.parseInt(tokens[1]);//row_index
        		JobBag jobbag = jobbagService.findById(jobBagNo);

        		if (null == jobBagList)
        			jobBagList = "'" + jobbag.getJobBagNo()+"'";
        		else
        			jobBagList = jobBagList +  ", '" + jobbag.getJobBagNo()+"'";
        	}
        	
    	
    		//產生PDF 檔
        	String serverPath = request.getSession().getServletContext().getRealPath("");;
            String fileName = serverPath + "\\report\\return_to_custom.jasper";
            String pdfFileName = "return_to_customer_" + new SimpleDateFormat("yyyyMMddHHmmssMs").format(new Date())+".pdf";

            String outFileName = serverPath +"\\pdf\\"+pdfFileName;
            HashMap hm = new HashMap();
            hm.put("jobbagList", jobBagList);
            try {
                JasperPrint print = JasperFillManager.fillReport(fileName, hm, conn);
                JRExporter exporter = new JRPdfExporter();
                exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, outFileName);
                exporter.setParameter(JRExporterParameter.JASPER_PRINT, print);
                exporter.exportReport();
                
                // 埋入HistoryReport
                HistoryReport historyReport = new HistoryReport();
                historyReport.setReportName(pdfFileName);
                historyReport.setPdfPath(outFileName);
                Employee employee = SessionUtil.getAccount(request.getSession());
                historyReport.setEmpNo(employee.getEmpNo());
                Calendar today = Calendar.getInstance();
                historyReport.setCreateDate(today.getTime());
                historyReportService.save(historyReport);
                // end HistoryReport
                
            } catch (JRException e) {
                e.printStackTrace();
                //System.exit(1);
            } catch (Exception e) {
                e.printStackTrace();
                //System.exit(1);
            }       
            
            // from here
            String querySession = lcinfoService.batchGenerateReturnLCForm(jobBagList,"STANDARD_POST_OFFICE");
        	
            if (null!= querySession && querySession.length() >0) {

                String fileName_PostOffice = serverPath + "\\report\\lodgmentControlSheet_PostOffice.jasper";
                String pdfFileName_PostOffice = "lodgmentControlSheet_PostOffice_" +new SimpleDateFormat("yyyyMMddHHmmssMs").format(new Date())+".pdf";

                String outFileName_PostOffice = serverPath +"\\pdf\\"+pdfFileName_PostOffice;
                HashMap hm_PostOffice = new HashMap();
                hm_PostOffice.put("querySession", querySession);
                JasperPrint print = JasperFillManager.fillReport(fileName_PostOffice, hm_PostOffice, conn);
                JRExporter exporter = new JRPdfExporter();
                exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, outFileName_PostOffice);
                exporter.setParameter(JRExporterParameter.JASPER_PRINT, print);
                exporter.exportReport();
                request.setAttribute("pdfFileName_PostOffice", pdfFileName_PostOffice);  
                
                // 埋入HistoryReport
                HistoryReport historyReport = new HistoryReport();
                historyReport.setReportName(pdfFileName_PostOffice);
                historyReport.setPdfPath(outFileName_PostOffice);
                Employee employee = SessionUtil.getAccount(request.getSession());
                historyReport.setEmpNo(employee.getEmpNo());
                Calendar today = Calendar.getInstance();
                historyReport.setCreateDate(today.getTime());
                historyReportService.save(historyReport);
                // end HistoryReport
                
                
            }
            
    		//產生交寄管制表PDF 檔_以郵局分頁+客戶 分頁
            
            String querySession2 = lcinfoService.batchGenerateReturnLCForm(jobBagList,"STANDARD_POST_OFFICE_CUSTOMER");

            if (null!= querySession2 && querySession2.length() >0) {

                String fileName_PostOffice_customer = serverPath + "\\report\\lodgmentControlSheet_PostOffice_customer.jasper";
                String pdfFileName_PostOffice_customer = "lodgmentControlSheet_PostOffice_customer" +new SimpleDateFormat("yyyyMMddHHmmssMs").format(new Date())+".pdf";

                String outFileName_PostOffice_customer = serverPath +"\\pdf\\"+pdfFileName_PostOffice_customer;
                HashMap hm_PostOffice_customer = new HashMap();
                hm_PostOffice_customer.put("querySession", querySession2);
                JasperPrint print = JasperFillManager.fillReport(fileName_PostOffice_customer, hm_PostOffice_customer, conn);
                JRExporter exporter = new JRPdfExporter();
                exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, outFileName_PostOffice_customer);
                exporter.setParameter(JRExporterParameter.JASPER_PRINT, print);
                exporter.exportReport();     
                request.setAttribute("pdfFileName_PostOffice_customer", pdfFileName_PostOffice_customer);   
                
                // 埋入HistoryReport
                HistoryReport historyReport = new HistoryReport();
                historyReport.setReportName(pdfFileName_PostOffice_customer);
                historyReport.setPdfPath(outFileName_PostOffice_customer);
                Employee employee = SessionUtil.getAccount(request.getSession());
                historyReport.setEmpNo(employee.getEmpNo());
                Calendar today = Calendar.getInstance();
                historyReport.setCreateDate(today.getTime());
                historyReportService.save(historyReport);
                // end HistoryReport
                
            }
            
    		//產生交寄管制表PDF 檔_FUBON 
            
            String querySession3 = lcinfoService.batchGenerateReturnLCForm(jobBagList,"FUBON");

            if (null!= querySession3 && querySession3.length() >0) {

                String fileName_Fubon = serverPath + "\\report\\lodgmentControlSheet_Fubon.jasper";
                String pdfFileName_Fubon = "lodgmentControlSheet_Fubon" +new SimpleDateFormat("yyyyMMddHHmmssMs").format(new Date())+".pdf";

                String outFileName_Fubon = serverPath +"\\pdf\\"+pdfFileName_Fubon;
                HashMap hm_Fubon = new HashMap();
                hm_Fubon.put("querySession", querySession3);
                JasperPrint print = JasperFillManager.fillReport(fileName_Fubon, hm_Fubon, conn);
                JRExporter exporter = new JRPdfExporter();
                exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, outFileName_Fubon);
                exporter.setParameter(JRExporterParameter.JASPER_PRINT, print);
                exporter.exportReport();     
                request.setAttribute("pdfFileName_Fubon", pdfFileName_Fubon);   
                
                
                // 產生合計報表
                String fileName_Fubon_subTotal = serverPath + "\\report\\lodgmentControlSheet_Fubon_subTotal.jasper";
                String pdfFileName_Fubon_subTotal = "lodgmentControlSheet_Fubon_subTotal" +new SimpleDateFormat("yyyyMMddHHmmssMs").format(new Date())+".pdf";

                String outFileName_Fubon_subTotal = serverPath +"\\pdf\\"+pdfFileName_Fubon_subTotal;
                HashMap hm_Fubon_subTotal = new HashMap();
                hm_Fubon_subTotal.put("querySession", querySession3);
                JasperPrint print_subTotal = JasperFillManager.fillReport(fileName_Fubon_subTotal, hm_Fubon_subTotal, conn);
                JRExporter exporter_subTotal = new JRPdfExporter();
                exporter_subTotal.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, outFileName_Fubon_subTotal);
                exporter_subTotal.setParameter(JRExporterParameter.JASPER_PRINT, print_subTotal);
                exporter_subTotal.exportReport();     
                request.setAttribute("pdfFileName_Fubon_subTotal", pdfFileName_Fubon_subTotal);   
                
                
                // 埋入HistoryReport
                HistoryReport historyReport = new HistoryReport();
                historyReport.setReportName(pdfFileName_Fubon);
                historyReport.setPdfPath(outFileName_Fubon);
                Employee employee = SessionUtil.getAccount(request.getSession());
                String emp_no = employee.getEmpNo();
                historyReport.setEmpNo(emp_no);
                historyReport.setCreateDate(new Date());
                historyReportService.save(historyReport);
                // end HistoryReport
                
                
                // 埋入HistoryReport
                HistoryReport historyReport_subTotal = new HistoryReport();
                historyReport_subTotal.setReportName(pdfFileName_Fubon_subTotal);
                historyReport_subTotal.setPdfPath(outFileName_Fubon_subTotal);
                historyReport_subTotal.setEmpNo(emp_no);
                historyReport_subTotal.setCreateDate(new Date());
                historyReportService.save(historyReport_subTotal);
                // end HistoryReport	                
            }
            
        	
            HibernateSessionFactory.getSession().getTransaction().commit();
            request.setAttribute("message", "批次列印 退回客戶清單 成功");
            request.setAttribute("pdfFileName", pdfFileName);
            return mapping.findForward("pdfDownload");
        } catch (Exception e) {
            log.error("", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        //return mapping.findForward("viewAccount");
    }        
    

    
    
    
    private ValueList getValueList(HttpServletRequest request, JobBagForm myForm, String entryKey) {
        Map param = new HashMap();



        String[] jobBagStatuses = myForm.getJobBagStatuses();
        String job_bag_status=""; // INIT 當作預設值
        
        if (null == jobBagStatuses) {
        	job_bag_status="'COMPLETED_MP','NON_MP'";
        }
        else {
	        for (int i=0; i<jobBagStatuses.length; i++)  {
	        	if (i==0 ) 
	        		job_bag_status = "'" + jobBagStatuses[i] + "'";
	        	else
	        		job_bag_status = job_bag_status + ", '" + jobBagStatuses[i] + "'";
	        }
        }
        param.put("job_bag_status", job_bag_status);  



        
        String job_bag_no = myForm.getJobBagNo();
        if (null != job_bag_no && job_bag_no.length() >0  )
        	param.put("job_bag_no", job_bag_no);
        String idf_cust_no = myForm.getCustNo();
        if (null != idf_cust_no && idf_cust_no.length() >0   )
        	param.put("idf_cust_no", idf_cust_no);
        
        String cycle_date = myForm.getCycleDate_form();        
        if (null != cycle_date && cycle_date.length() >0   )        	
        	param.put("cycle_date", cycle_date);
        
        String receive_date = myForm.getReceiveDate_form();      
        if (null != receive_date && receive_date.length() >0   )        
        	param.put("receive_date", receive_date);        
        
        String hasDamage = myForm.getHasDamage_form();         
        if (null != hasDamage && hasDamage.equalsIgnoreCase("1"))
        	param.put("has_damage", " j.has_damage = 1 ");      
        if (null != hasDamage && hasDamage.equalsIgnoreCase("0"))
        	param.put("has_damage", " (j.has_damage is null or j.has_damage =0 ) ");    
        
        String isDamage = myForm.getIsDamage_form();         
        if (null != isDamage && isDamage.equalsIgnoreCase("1"))
        	param.put("is_damage", " j.is_damage = 1 ");      
        else if (null != isDamage && isDamage.equalsIgnoreCase("0"))
        	param.put("is_damage", " (j.is_damage is null or j.is_damage =0 ) ");
        else if(null == isDamage )
        	param.put("is_damage", " (j.is_damage is null or j.is_damage =0 ) ");
        
        String isDeleted = myForm.getIsDeleted_form();         
        if (null != isDeleted && isDeleted.equalsIgnoreCase("1"))
        	param.put("is_deleted", " j.is_deleted = 1 " );      
        if (null != isDeleted && isDeleted.equalsIgnoreCase("0"))
        	param.put("is_deleted", " (j.is_deleted is null or j.is_deleted =0 )  ");       
        if (null == isDeleted )
        	param.put("is_deleted", " (j.is_deleted is null or j.is_deleted =0 )  ");   
        

        String isConvertResult = myForm.getIsConvertResult_form();         
        if (null != isConvertResult && isConvertResult.equalsIgnoreCase("1"))
        	param.put("is_convert_result", " j.is_convert_result = 1 ");      
        if (null != isConvertResult && isConvertResult.equalsIgnoreCase("0"))
        	param.put("is_convert_result", " (j.is_convert_result is null or j.is_convert_result=0 )  ");

        
        Integer code_lg_type = myForm.getCodeLgType();
        if (null != code_lg_type && code_lg_type >0  )
        	param.put("code_lg_type", code_lg_type);        
        
        Integer code_mail_category = myForm.getCodeMailCategory();
        if (null != code_mail_category && code_mail_category >0  )
        	param.put("code_mail_category",code_mail_category);        
        
        Integer code_mail_to_postoffice = myForm.getCodeMailToPostoffice();
        if (null != code_mail_to_postoffice && code_mail_to_postoffice >0  )
        	param.put("code_mail_to_postoffice", code_mail_to_postoffice);    
        
        //Thor add 2011/10/20
        String orderColumns = request.getParameter("sortColumn");
    	String sortDirection = request.getParameter("sortDirection");
        if(sortDirection != null && !"".equals(sortDirection.trim())){
        	sortDirection = sortDirection.trim();
        	if(sortDirection.equals("1"))
        		sortDirection = " asc ";
        	else
        		sortDirection = " desc ";
        }
    	if(orderColumns == null || "".equals(orderColumns.trim()))
    		orderColumns = "cycle_date desc, idf_cust_no asc, job_bag_no desc, dead_line asc";
    	else if("cycle_date".equals(orderColumns)){
    		orderColumns += sortDirection + " , idf_cust_no asc ,job_bag_no desc";
    	}else if("job_bag_no".equals(orderColumns)){
    		orderColumns += sortDirection + " , cycle_date desc , idf_cust_no asc";
    	}else{
    		orderColumns += sortDirection + ", cycle_date desc, idf_cust_no asc, job_bag_no desc";
    	}
    	param.put("orderColumns", orderColumns);

        
        ValueList valueList = valueListService.getValueList(request, entryKey, param);
        return valueList;
    }    
    
    
  
}