/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.salmat.jbm.struts.action;

import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.mlw.vlh.ValueList;
import net.mlw.vlh.ValueListInfo;
import net.mlw.vlh.web.ValueListRequestUtil;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.action.DynaActionForm;
import org.apache.struts.actions.DispatchAction;
import org.hibernate.Transaction;

import com.salmat.jbm.hibernate.*;
import com.salmat.jbm.service.CodeService;
import com.salmat.jbm.service.CustomerService;
import com.salmat.jbm.service.EmployeeService;
import com.salmat.jbm.service.CodeService;
import com.salmat.jbm.service.ValueListService;
import com.salmat.jbm.struts.form.*;
import com.salmat.jbm.hibernate.HibernateSessionFactory;
import com.painter.util.Global;
import com.painter.util.SessionUtil;
import com.painter.util.Util;


/**
 * MyEclipse Struts Creation date: 02-23-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action parameter="fid" validate="true"
 * @struts.action-forward name="init" path=".findUserAccount"
 */
public class CodeAction extends DispatchAction {
    /*
     * Generated Methods
     */
    private static final CodeService codeService = CodeService.getInstance();
    private static final CustomerService customerService = CustomerService.getInstance();
    private static ValueListService valueListService = ValueListService.getInstance();    
    private static Logger log = Logger.getLogger(CodeAction.class);

    /**
     * Method execute
     * 
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    protected ActionForward unspecified(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) {

        return mapping.findForward("homepage");
    }

    //複製新增
    public ActionForward saveAsNewInit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        CodeForm myForm = (CodeForm) form;
        Integer id = myForm.getId();

        try {
        	Code code = codeService.findById(id);
            request.setAttribute("code", code);
            request.setAttribute("ACTION_MODE", "SAVE_AS_NEW");
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("editInit");
    }    
    
    
    
    public ActionForward addInit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        CodeForm myForm = (CodeForm) form;

        try {
        	Code code = new Code();

            request.setAttribute("code", code);
            request.setAttribute("ACTION_MODE", "ADD");
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("editInit");
    }    
    
    public ActionForward addSubmit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        CodeForm myForm = (CodeForm) form;
        Integer id = myForm.getId();

        try {
        	HibernateSessionFactory.getSession().clear();
        	HibernateSessionFactory.getSession().getTransaction().begin();

        	Code code = new Code();
        	BeanUtils.copyProperties(code,myForm);


        	codeService.save(code);
            HibernateSessionFactory.getSession().getTransaction().commit();
            request.setAttribute("message", "新增成功");
            return mapping.findForward("message");
        } catch (Exception e) {
            log.error("", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }

    }    
    
    
    public ActionForward listCS(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
    	ActionMessages messages = new ActionMessages();
        CodeForm myForm = (CodeForm) form;

        try {
        	ValueList dataList = getValueList(request, myForm,"codeList_CS");
            request.setAttribute("dataList", dataList);

        } catch (Exception e) {
            log.error("", e);
            messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
                    Global.MESSAGE_SYSTEMERROR_KEY));
            this.saveMessages(request, messages);
            return mapping.findForward(Global.FORWARD_INCLUDE_MESSAGE_KEY);
        }
        return mapping.findForward("list");
    }
    
    
    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
    	ActionMessages messages = new ActionMessages();
        CodeForm myForm = (CodeForm) form;

        try {
        	ValueList dataList = getValueList(request, myForm,"codeList");
            request.setAttribute("dataList", dataList);

        } catch (Exception e) {
            log.error("", e);
            messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
                    Global.MESSAGE_SYSTEMERROR_KEY));
            this.saveMessages(request, messages);
            return mapping.findForward(Global.FORWARD_INCLUDE_MESSAGE_KEY);
        }
        return mapping.findForward("list");
    }


    
    public ActionForward checkPKExist(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        CodeForm myForm = (CodeForm) form;
        Integer id = myForm.getId();

        try {
        	Code code = codeService.findById(id);
        	if (null ==code)
        		request.setAttribute("result", "NON_EXIST");
        	else
        		request.setAttribute("result", "EXIST");
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("jsonMessage");
    }       
        
    
    public ActionForward editInit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        CodeForm myForm = (CodeForm) form;
        Integer id = myForm.getId();
        String codeTypeName = myForm.getCodeTypeName();
        try{
        	HibernateSessionFactory.getSession().clear();
        	List codeList = codeService.findByCodeTypeName(codeTypeName);
        	request.setAttribute("ACTION_MODE", "EDIT");
            request.setAttribute("codeList", codeList);
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("editInit");
    }
    
    
    
    
    public ActionForward editSubmit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        CodeForm myForm = (CodeForm) form;

        try {
        	HibernateSessionFactory.getSession().clear();
        	HibernateSessionFactory.getSession().getTransaction().begin();

        	Integer ids[] = myForm.getIds();
        	String codeTypeNames[] = myForm.getCodeTypeNames();
        	String codeTypeNameTws[]= myForm.getCodeTypeNameTws();
        	String codeKeys[]= myForm.getCodeKeys();
        	String codeValueTws[]= myForm.getCodeValueTws();
        	String f1s[]= myForm.getF1s();
        	String f2s[]= myForm.getF2s();
        	String f3s[]= myForm.getF3s();
        	//Integer orderbyIds[]= myForm.getOrderbyIds();
        	//Boolean isHiddens[]= myForm.getIsHiddens();
        	
        	
        	for(int i=0;i<ids.length;i++) {
        		Code code = null;
        		if (ids[i] == 0 && codeValueTws[i].length()>0  ) {
        			//新增Code 
        			code = new Code();
	        		code.setCodeTypeName(codeTypeNames[i]);
	        		code.setCodeTypeNameTw(codeTypeNameTws[i]);
	        		code.setCodeValueTw(codeValueTws[i]); 
	        		code.setCodeKey(codeKeys[i]);
	        		code.setF1(f1s[i]);
	        		code.setF2(f2s[i]);
	        		code.setF3(f3s[i]);
	        		//code.setIsHidden(isHiddens[i]);
	        		codeService.save(code);
        		}
        		else if (ids[i] != 0  ) {
        			code = codeService.findById(ids[i]);
            		code.setCodeTypeName(codeTypeNames[i]);
            		code.setCodeTypeNameTw(codeTypeNameTws[i]);
            		code.setCodeValueTw(codeValueTws[i]);
            		code.setCodeKey(codeKeys[i]);
	        		code.setF1(f1s[i]);
	        		code.setF2(f2s[i]);
	        		code.setF3(f3s[i]);
            		//code.setIsHidden(isHiddens[i]);
            		codeService.save(code);        			
        		}

        	}
            HibernateSessionFactory.getSession().getTransaction().commit();
            request.setAttribute("message", "修改成功");
            return mapping.findForward("message");
        } catch (Exception e) {
            log.error("", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
    }
    
    
    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        CodeForm myForm = (CodeForm) form;
        Integer id = myForm.getId();

        try {
        	HibernateSessionFactory.getSession().getTransaction().begin();
        	Code code = codeService.findById(id);

        	codeService.delete(code);
            HibernateSessionFactory.getSession().getTransaction().commit();
            request.setAttribute("message", "刪除成功");  

        } catch (Exception e) {
            log.error("delete catch exception", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
        	request.setAttribute("message", "資料被引用, 不能刪除");  
			return mapping.findForward("message");
        }
        return mapping.findForward("message");
    }    
    
    
    private ValueList getValueList(HttpServletRequest request, CodeForm myForm, String entryKey) {
        Map param = new HashMap();


        
        ValueList valueList = valueListService.getValueList(request, entryKey, param);
        return valueList;
    }    
}