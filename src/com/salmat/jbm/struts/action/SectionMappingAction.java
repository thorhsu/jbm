/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.salmat.jbm.struts.action;

import java.net.URLEncoder;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.mlw.vlh.ValueList;
import net.mlw.vlh.ValueListInfo;
import net.mlw.vlh.web.ValueListRequestUtil;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.action.DynaActionForm;
import org.apache.struts.actions.DispatchAction;
import org.hibernate.Transaction;

import com.salmat.jbm.hibernate.*;
import com.salmat.jbm.service.AcctSectionJobCodeMappingService;
import com.salmat.jbm.service.AcctSectionReceiverMappingService;
import com.salmat.jbm.service.CodeService;
import com.salmat.jbm.service.AcctSectionReceiverMappingService;
import com.salmat.jbm.service.CustomerReceiverService;
import com.salmat.jbm.service.CustomerService;
import com.salmat.jbm.service.EmployeeService;
import com.salmat.jbm.service.JobCodeService;
import com.salmat.jbm.service.ReturnInfoService;
import com.salmat.jbm.service.ValueListService;
import com.salmat.jbm.struts.form.*;
import com.salmat.jbm.hibernate.HibernateSessionFactory;
import com.painter.util.Global;
import com.painter.util.SessionUtil;
import com.painter.util.Util;


/**
 * MyEclipse Struts Creation date: 02-23-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action parameter="fid" validate="true"
 * @struts.action-forward name="init" path=".findUserAccount"
 */
public class SectionMappingAction extends DispatchAction {
    /*
     * Generated Methods
     */
    private static final AcctSectionJobCodeMappingService sectionJobCodeMappingService = AcctSectionJobCodeMappingService.getInstance();
    private static final AcctSectionReceiverMappingService sectionReceiverMappingService = AcctSectionReceiverMappingService.getInstance();
    private static final CustomerReceiverService customerReceiverService = CustomerReceiverService.getInstance();
    private static final CustomerService customerService = CustomerService.getInstance();
    private static final JobCodeService jobCodeService = JobCodeService.getInstance();
    private static final CodeService codeService = CodeService.getInstance();
    private static ValueListService valueListService = ValueListService.getInstance();    
    private static Logger log = Logger.getLogger(SectionMappingAction.class);

    /**
     * Method execute
     * 
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    protected ActionForward unspecified(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) {

        return mapping.findForward("homepage");
    }

    

    
    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
    	ActionMessages messages = new ActionMessages();
        SectionMappingForm myForm = (SectionMappingForm) form;

        try {
        	ValueList dataList = getValueList(request, myForm,"sectionMappingList");
            request.setAttribute("dataList", dataList);

            //將dataList 放到session 
            request.getSession().setAttribute("dataList", dataList);
            
            String backToListURL = request.getRequestURI() +"?" + request.getQueryString();
            //request.getSession().setAttribute("backToListURL", backToListURL);
            request.setAttribute("backToListURL", URLEncoder.encode(backToListURL, "UTF-8"));
        } catch (Exception e) {
            log.error("", e);
            messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
                    Global.MESSAGE_SYSTEMERROR_KEY));
            this.saveMessages(request, messages);
            return mapping.findForward(Global.FORWARD_INCLUDE_MESSAGE_KEY);
        }
        return mapping.findForward("list");
    }



    
    public ActionForward editInit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        SectionMappingForm myForm = (SectionMappingForm) form;

        try{
        	HibernateSessionFactory.getSession().clear();
            Integer id = myForm.getId();
            String custNo = myForm.getCustNo();
            String section = myForm.getSection();
            if (null == section || section.length() ==0 ) {
	            request.setAttribute("message", "請先設定 Section ");
	            return mapping.findForward("message");            
            }
            
    		Customer customer = customerService.findById(custNo);            
        	AcctSectionReceiverMapping sectionReceiverMapping = new AcctSectionReceiverMapping();
        	if (null!=id && id > 0)
        		sectionReceiverMapping = sectionReceiverMappingService.findById(id);
        	else {

        		sectionReceiverMapping.setCustomer(customer);
        		sectionReceiverMapping.setSection(section);
        	}

        	request.setAttribute("ACTION_MODE", "EDIT");
        	request.setAttribute("customer", customer);
            request.setAttribute("sectionReceiverMapping", sectionReceiverMapping);
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("editInit");
    }
    
    
    
    
    public ActionForward batchSectionToJobCodeMappingSumbit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
    	SectionMappingForm myForm = (SectionMappingForm) form;


        try {
        	HibernateSessionFactory.getSession().clear();
        	HibernateSessionFactory.getSession().getTransaction().begin();
        	
        	Integer mappingIds[] = myForm.getMappingIds();
        	String jobCodeNos[] = myForm.getJobCodeNos();
        	String custNos[]= myForm.getCustNos();
        	String sections[]= myForm.getSections();
        	
        	if (null!= jobCodeNos) {
	        	for (int i=0;i<jobCodeNos.length;i++) {
	        		//刪除 section to job_code Mapping 
	        		if (mappingIds[i] >0 && sections[i].length() ==0) {
        				AcctSectionJobCodeMapping sectionJobCodeMapping = sectionJobCodeMappingService.findById(mappingIds[i]);
        				sectionJobCodeMappingService.delete(sectionJobCodeMapping);		        			
	        		}
	        		
	        		//新增/修改  section to job_code Mapping
	        		if ( sections[i].length() > 0 ) {
	        			if (mappingIds[i] >0) { 
	        				AcctSectionJobCodeMapping sectionJobCodeMapping = sectionJobCodeMappingService.findById(mappingIds[i]);
	        				Customer customer = customerService.findById(custNos[i]);
	        				JobCode jobCode = jobCodeService.findById(jobCodeNos[i]);
	        				sectionJobCodeMapping.setCustomer(customer);
	        				sectionJobCodeMapping.setJobCode(jobCode);
	        				sectionJobCodeMapping.setSection(sections[i]);
	        				sectionJobCodeMappingService.save(sectionJobCodeMapping);	        				
	        				
	        			} else {
	        				AcctSectionJobCodeMapping sectionJobCodeMapping = new AcctSectionJobCodeMapping();
	        				Customer customer = customerService.findById(custNos[i]);
	        				JobCode jobCode = jobCodeService.findById(jobCodeNos[i]);
	        				sectionJobCodeMapping.setCustomer(customer);
	        				sectionJobCodeMapping.setJobCode(jobCode);
	        				sectionJobCodeMapping.setSection(sections[i]);
	        				sectionJobCodeMappingService.save(sectionJobCodeMapping);
	        			}		
	        			
	        		}
	        	}

        	}
        	
            HibernateSessionFactory.getSession().getTransaction().commit();
            request.setAttribute("message", "修改成功");
            return mapping.findForward("message");
        } catch (Exception e) {
            log.error("", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        //return mapping.findForward("viewAccount");
    }        
    
    
    public ActionForward editSubmit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        SectionMappingForm myForm = (SectionMappingForm) form;
        

        try {
        	HibernateSessionFactory.getSession().clear();
        	HibernateSessionFactory.getSession().getTransaction().begin();
        	
        	
        	Integer id = myForm.getId();
        	String receiverNo = myForm.getReceiverNo();
        	
        	AcctSectionReceiverMapping sectionReceiverMapping = new AcctSectionReceiverMapping();
        	if (null!=id && id > 0)
        		sectionReceiverMapping = sectionReceiverMappingService.findById(id);
        	
        	
        	BeanUtils.copyProperties(sectionReceiverMapping,myForm);

        	//設定客戶代碼
        	String custNo = myForm.getCustNo();
        	Customer customer = customerService.findById(custNo);
        	sectionReceiverMapping.setCustomer(customer);
        	
        	CustomerReceiver customerReceiver = customerReceiverService.findById(receiverNo);
        	sectionReceiverMapping.setCustomerReceiver(customerReceiver);
        	
        	sectionReceiverMappingService.save(sectionReceiverMapping);
            HibernateSessionFactory.getSession().getTransaction().commit();
            request.setAttribute("message", "修改成功");
            

            
        } catch (Exception e) {
            log.error("", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("message");
    }
    
    
    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        SectionMappingForm myForm = (SectionMappingForm) form;
        String id = myForm.getReceiverNo();


        try {
        	HibernateSessionFactory.getSession().getTransaction().begin();
        	AcctSectionReceiverMapping sectionReceiverMapping = sectionReceiverMappingService.findById(0);

        	sectionReceiverMappingService.delete(sectionReceiverMapping);
            HibernateSessionFactory.getSession().getTransaction().commit();
            request.setAttribute("message", "刪除成功");  

        } catch (Exception e) {
            log.error("delete catch exception", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
        	request.setAttribute("message", "資料被引用, 不能刪除");  
			return mapping.findForward("message");
        }
        return mapping.findForward("message");
    }    
    
    
    private ValueList getValueList(HttpServletRequest request, SectionMappingForm myForm, String entryKey) {
        Map param = new HashMap();


        String idf_cust_no = myForm.getCustNo();
        if (idf_cust_no != null )
        	param.put("idf_cust_no", idf_cust_no);

        String job_code_no = myForm.getJobCodeNo();
        if (job_code_no != null )
        	param.put("job_code_no", job_code_no);        
        
        String section = myForm.getSection();
        if (section != null )
        	param.put("section", section);              
        
        ValueList valueList = valueListService.getValueList(request, entryKey, param);
        return valueList;
    }    
}