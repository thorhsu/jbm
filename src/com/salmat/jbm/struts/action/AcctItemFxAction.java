/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.salmat.jbm.struts.action;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.mlw.vlh.ValueList;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessages;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.springframework.beans.BeanUtils;

import com.salmat.jbm.hibernate.AcctChargeItem;
import com.salmat.jbm.hibernate.AcctItemFx;
import com.salmat.jbm.hibernate.AcctItem;
import com.salmat.jbm.hibernate.HibernateSessionFactory;
import com.salmat.jbm.hibernate.SysLog;
import com.salmat.jbm.struts.form.*;

/**
 * MyEclipse Struts Creation date: 02-23-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action parameter="fid" validate="true"
 * @struts.action-forward name="init" path=".findUserAccount"
 */
public class AcctItemFxAction extends BaseAction {
    /*
     * Generated Methods
     */
	private static String entryKey = "acctItemFxList";
    private static Logger log = Logger.getLogger(AcctItemFxAction.class);
    private static final String success_class = "success";
    private static final String info_class = "info";
    private static final String warning_class = "warning";
    private static final String error_class = "danger";
    
    public ActionForward addInit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
    	ActionMessages messages = new ActionMessages();
        AcctItemFxForm myForm = (AcctItemFxForm) form;

        try {
        	AcctItemFx acctItemFx = new AcctItemFx();
        	myForm.setAcctItemFx(acctItemFx);
        	request.setAttribute("ACTION_MODE", "SAVE_AS_NEW");
            
        } catch (Exception e) {        	
            log.error("", e);
            SysLog syslog = new SysLog();
        	syslog.setCreateDate(new Date());
        	syslog.setIsException(true);
        	syslog.setLogType("ACCT_ITEM_FX");
        	syslog.setMessageBody(e.getMessage());
        	syslog.setSubject("查詢AcctItemFX 失敗" );
        	HibernateSessionFactory.getSession().save(syslog);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message_cs");
        }
        return mapping.findForward("editInit");
    }    
    
    public ActionForward editInit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
    	
        AcctItemFxForm myForm = (AcctItemFxForm) form;

        try {
        	Session session = HibernateSessionFactory.getSession();
        	AcctItemFx acctItemFx = (AcctItemFx) session.get(AcctItemFx.class, myForm.getId());
        	myForm.setAcctItemFx(acctItemFx);
        	request.setAttribute("ACTION_MODE", "EDIT");
            
        } catch (Exception e) {
            log.error("", e);
            this.saveSysLog(true, e, "ACCT_ITEM_FX", "編輯AcctItemFX失敗", myForm.getId() + "編輯AcctItemFX:" + myForm.getId() + "失敗");
            
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message_cs");
        }
        return mapping.findForward("editInit");
    }
    
    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
    	
        AcctItemFxForm myForm = (AcctItemFxForm) form;
        Transaction tx = null;
        try {
        	Session session = HibernateSessionFactory.getSession();
        	tx = session.beginTransaction();
        	AcctItemFx acctItemFx = (AcctItemFx) session.get(AcctItemFx.class, myForm.getId());
        	session.delete(acctItemFx);
            tx.commit();
            request.setAttribute("message", "刪除成功");
        } catch (Exception e) {
        	if(tx != null)
        		tx.rollback();
            log.error("", e);
            this.saveSysLog(true, e, "ACCT_ITEM_FX", "刪除AcctItemFX失敗", myForm.getId() + "資料被其它table引用，無法刪除");            
			request.setAttribute("message", e.getMessage() + "<br/>" + "資料被其它table引用，無法刪除");
			return mapping.findForward("message_cs");
        }
        return mapping.findForward("message_cs");
    }
    public ActionForward editSubmit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {    	
    	return this.addSubmit(mapping, form, request, response);
    }
    
    public ActionForward saveAsNewInit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {    	
        AcctItemFxForm myForm = (AcctItemFxForm) form;

        try {
        	AcctItemFx acctItemFx = new AcctItemFx();
        	BeanUtils.copyProperties(myForm, acctItemFx);
        	acctItemFx.setId(null);
        	myForm.setAcctItemFx(acctItemFx);
        	request.setAttribute("ACTION_MODE", "SAVE_AS_NEW");
            
        } catch (Exception e) {
            log.error("", e);            
			request.setAttribute("message", "系統失敗 ");
			this.saveSysLog(true, e, "ACCT_ITEM_FX", "複製失敗", "複製:" + myForm.getId() + "失敗");
			return mapping.findForward("message_cs");
        }
        request.setAttribute("alert_message", "請輸入欲更動的欄位");
 	    request.setAttribute("alert_class", info_class);
        return mapping.findForward("editInit");
    } 
    
    public ActionForward addSubmit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {    	
        AcctItemFxForm myForm = (AcctItemFxForm) form;
        Transaction tx = null;
        try {        	
        	AcctItemFx acctItemFx = new AcctItemFx();
        	BeanUtils.copyProperties(myForm, acctItemFx);
        	Session session = HibernateSessionFactory.getSession(); 
        	if(myForm.getNonJbChargeItemId() != null && myForm.getNonJbChargeItemId() != 0){
        	   AcctChargeItem aci = (AcctChargeItem) session.get(AcctChargeItem.class, myForm.getNonJbChargeItemId());
        	   acctItemFx.setAcctChargeItem(aci);
        	}
        	if(myForm.getPound() != null && myForm.getPound() == 0){
        		acctItemFx.setPound(null);
        	}
        	if(myForm.getLength() != null && myForm.getLength() == 0){
        		acctItemFx.setLength(null);
        	}
        	if(myForm.getWidth() != null && myForm.getWidth() == 0){
        		acctItemFx.setWidth(null);
        	}
        	if(myForm.getCategoryCode() != null && myForm.getCategoryCode() == 0){
        		acctItemFx.setCategoryCode(null);
        	}
        	if(myForm.getCost() != null && myForm.getCost() == 0){
        		acctItemFx.setCost(null);
        	}
        	if(myForm.getAcctPrice() != null && myForm.getAcctPrice() == 0){
        		acctItemFx.setAcctPrice(null);
        	}
        	if(myForm.getWeight() != null && myForm.getWeight() == 0){
        		acctItemFx.setWeight(null);
        	}
        	tx = session.beginTransaction();        	
        	if(acctItemFx.getId() == null || acctItemFx.getId() == 0){
        		//success, info, warning, danger         	   
        	   request.setAttribute("alert_message", "新增成功");
        	   session.save(acctItemFx);
        	}else{
        	   request.setAttribute("alert_message", "更新成功");
        	   session.update(acctItemFx);
        	}
        	request.setAttribute("alert_class", success_class);
        	myForm.setAcctItemFx(acctItemFx);
        	List<AcctItem> acctItems = session.createQuery("select a from AcctItem a inner join a.acctItemFx afx where afx.id = " + acctItemFx.getId()).list();
        	if(acctItems != null && acctItems.size() > 0){
        		for(AcctItem ai : acctItems){
        			String custNo = ai.getCustNo();
        			BeanUtils.copyProperties(acctItemFx, ai);
        			ai.setCustNo(custNo);
        			session.update(ai);
        		}
        	}
        	
        	request.setAttribute("ACTION_MODE", "EDIT");
        	tx.commit();
        	return mapping.findForward("editInit");        	
        } catch (Exception e) {
        	if(tx != null)
        		tx.rollback();
            log.error("", e);
            this.saveSysLog(true, e, "ACCT_ITEM_FX", "AcctItemFx_Persist", "persist:" + myForm.getId() + "失敗");
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message_cs");
        }
        
    } 
    
    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
    	ActionMessages messages = new ActionMessages();
        AcctItemFxForm myForm = (AcctItemFxForm) form;

        try {
            Map<String, String> params = new HashMap<String, String>();

            
            String cust_no = myForm.getCustNo();
            
            params.put("cust_no", cust_no);
            
           
            Boolean isMaterial = myForm.getIsMaterial();
            
            if (isMaterial != null && isMaterial)
            	params.put("isMaterial", "1");
            else if (isMaterial != null && !isMaterial)
        	    params.put("isMaterial", "0");
        	
            String name = myForm.getName();
            if (name != null && !name.trim().equals(""))
            	params.put("name", name);

        	
        	ValueList dataList = this.getValueList(request, params, entryKey);
        	
        	this.setGeneralAttribute(request, dataList, "id");
                        
        } catch (Exception e) {
            log.error("", e);
            this.saveSysLog(true, e, "ACCT_ITEM_FX", "查詢失敗", "查詢失敗");
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("list");
    }    
    
}