/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.salmat.jbm.struts.action;

import java.net.URLEncoder;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.mlw.vlh.ValueList;
import net.mlw.vlh.ValueListInfo;
import net.mlw.vlh.web.ValueListRequestUtil;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.action.DynaActionForm;
import org.apache.struts.actions.DispatchAction;
import org.hibernate.Transaction;

import com.salmat.jbm.hibernate.*;
import com.salmat.jbm.service.CodeService;
import com.salmat.jbm.service.CustomerService;
import com.salmat.jbm.service.EmployeeService;
import com.salmat.jbm.service.LGInfoService;
import com.salmat.jbm.service.ValueListService;
import com.salmat.jbm.struts.form.*;
import com.salmat.jbm.hibernate.HibernateSessionFactory;
import com.painter.util.Global;
import com.painter.util.SessionUtil;
import com.painter.util.Util;


/**
 * MyEclipse Struts Creation date: 02-23-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action parameter="fid" validate="true"
 * @struts.action-forward name="init" path=".findUserAccount"
 */
public class LGInfoAction extends DispatchAction {
    /*
     * Generated Methods
     */
    private static final LGInfoService lginfoService = LGInfoService.getInstance();
    private static final CustomerService customerService = CustomerService.getInstance();
    private static final CodeService codeService = CodeService.getInstance();
    private static ValueListService valueListService = ValueListService.getInstance();    
    private static Logger log = Logger.getLogger(LGInfoAction.class);

    /**
     * Method execute
     * 
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    protected ActionForward unspecified(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) {

        return mapping.findForward("homepage");
    }

    //複製新增
    public ActionForward saveAsNewInit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        LGInfoForm myForm = (LGInfoForm) form;
        String lgNo = myForm.getLgNo();

        try {
        	Lginfo lginfo = lginfoService.findById(lgNo);
            request.setAttribute("lginfo", lginfo);
            request.setAttribute("ACTION_MODE", "SAVE_AS_NEW");
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("editInit");
    }    
    
    
    
    public ActionForward addInit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        LGInfoForm myForm = (LGInfoForm) form;

        try {
        	Lginfo lginfo = new Lginfo();

            request.setAttribute("lginfo", lginfo);
            request.setAttribute("ACTION_MODE", "ADD");
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("editInit");
    }    
    
    public ActionForward addSubmit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        LGInfoForm myForm = (LGInfoForm) form;
        String lgNo = myForm.getLgNo();

        try {
        	HibernateSessionFactory.getSession().clear();
        	HibernateSessionFactory.getSession().getTransaction().begin();

        	Lginfo lginfo = new Lginfo();
        	BeanUtils.copyProperties(lginfo,myForm);
        	if(myForm.getLgDisplayQty() == null)
        		myForm.setLgDisplayQty(true);
        	if(myForm.getNextLgDisplayQty() == null)
        		myForm.setNextLgDisplayQty(true);
        	

        	if (null== myForm.getNextEffectiveDate() || (null!= myForm.getNextEffectiveDate() && myForm.getNextEffectiveDate().length() == 0 ))
        		lginfo.setNextEffectiveDate(null);
        	
        	
        	//設定客戶代碼
        	String custNo = myForm.getCustNo();
        	Customer customer = customerService.findById(custNo);
        	lginfo.setCustomer(customer);
        	

        	
        	//設定郵資單總類
        	Integer codeLgType = myForm.getCodeLgType();
        	Code _codeLgType = codeService.findById(codeLgType);
        	lginfo.setCodeByCodeLgType(_codeLgType);
        	
        	//設定交寄郵局或公司
        	Integer codeMailToPostoffice = myForm.getCodeMailToPostoffice();
        	Code _codeMailToPostoffice = codeService.findById(codeMailToPostoffice);
        	lginfo.setCodeByCodeMailToPostoffice(_codeMailToPostoffice);
        	
        	//設定交寄方式
        	Integer codeMailCategory = myForm.getCodeMailCategory();
        	Code _codeMailCategory = codeService.findById(codeMailCategory);
        	lginfo.setCodeByCodeMailCategory(_codeMailCategory);
        	
        	//郵資單寄送地區
        	String mailToAreaDisplay="";

        	Integer[] codeMailToArea = myForm.getCodeMailToArea();
        	for(int i=0;i<codeMailToArea.length;i++) {
        		if (codeMailToArea[i]>0) {
		        	Code _codeMailToArea = codeService.findById(codeMailToArea[i]);
		        	mailToAreaDisplay += _codeMailToArea.getCodeValueTw() +",";
		        	if (i==0) lginfo.setCodeByCodeMailToArea1(_codeMailToArea);
		        	if (i==1) lginfo.setCodeByCodeMailToArea2(_codeMailToArea);
		        	if (i==2) lginfo.setCodeByCodeMailToArea3(_codeMailToArea);
		        	if (i==3) lginfo.setCodeByCodeMailToArea4(_codeMailToArea);
		        	if (i==4) lginfo.setCodeByCodeMailToArea5(_codeMailToArea);
		        	if (i==5) lginfo.setCodeByCodeMailToArea6(_codeMailToArea);
        		}
        	}
        	
        	lginfo.setMailToAreaDisplay(mailToAreaDisplay);
        	
        	//設定Next郵資單總類
        	Integer nextCodeLgType = myForm.getNextCodeLgType();
        	Code _nextCodeLgType = codeService.findById(nextCodeLgType);
        	lginfo.setCodeByNextCodeLgType(_nextCodeLgType);
        	
        	//設定Next交寄郵局或公司
        	Integer nextCodeMailToPostoffice = myForm.getNextCodeMailToPostoffice();
        	Code _nextCodeMailToPostoffice = codeService.findById(nextCodeMailToPostoffice);
        	lginfo.setCodeByNextCodeMailToPostoffice(_nextCodeMailToPostoffice);
        	
        	//設定交寄方式
        	Integer nextCodeMailCategory = myForm.getNextCodeMailCategory();
        	Code _nextCodeMailCategory = codeService.findById(nextCodeMailCategory);
        	lginfo.setCodeByNextCodeMailCategory(_nextCodeMailCategory);
        	
        	//郵資單寄送地區
        	Integer[] nextCodeMailToArea = myForm.getNextCodeMailToArea();
        	if (null != nextCodeMailToArea ) {
	        	for(int i=0;i<nextCodeMailToArea.length;i++) {
	        		if (nextCodeMailToArea[i]>0) {
			        	Code _codeMailToArea = codeService.findById(nextCodeMailToArea[i]);
			        	if (i==0) lginfo.setCodeByNextCodeMailToArea1(_codeMailToArea);
			        	if (i==1) lginfo.setCodeByNextCodeMailToArea2(_codeMailToArea);
			        	if (i==2) lginfo.setCodeByNextCodeMailToArea3(_codeMailToArea);
			        	if (i==3) lginfo.setCodeByNextCodeMailToArea4(_codeMailToArea);
			        	if (i==4) lginfo.setCodeByNextCodeMailToArea5(_codeMailToArea);
			        	if (i==5) lginfo.setCodeByNextCodeMailToArea6(_codeMailToArea);
	        		}
	        	}
        	}

        	lginfoService.save(lginfo);
            HibernateSessionFactory.getSession().getTransaction().commit();
            request.setAttribute("message", "新增成功");
            return mapping.findForward("message");
        } catch (Exception e) {
            log.error("", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }

    }    
    
    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
    	ActionMessages messages = new ActionMessages();
        LGInfoForm myForm = (LGInfoForm) form;

        try {
        	ValueList dataList = getValueList(request, myForm,"lginfoList");
            request.setAttribute("dataList", dataList);
            
        	String idList = "";
        	for(Object obj : dataList.getList()){
            	idList += BeanUtils.getProperty(obj, "lg_no") + ",";
            }
            request.setAttribute("idList", idList);
            
            String backToListURL = request.getRequestURI() +"?" + request.getQueryString();
            //request.getSession().setAttribute("backToListURL", backToListURL);
            request.setAttribute("backToListURL", URLEncoder.encode(backToListURL, "UTF-8"));

        } catch (Exception e) {
            log.error("", e);
            messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
                    Global.MESSAGE_SYSTEMERROR_KEY));
            this.saveMessages(request, messages);
            return mapping.findForward(Global.FORWARD_INCLUDE_MESSAGE_KEY);
        }
        return mapping.findForward("list");
    }

    
    public ActionForward view(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        LGInfoForm myForm = (LGInfoForm) form;
        String lgNo=null;
        Lginfo lginfo = null;
        if (null != myForm.getLgNo()) {
        	lgNo = myForm.getLgNo();
        	lginfo = lginfoService.findById(lgNo);
        }

        try {
        	request.setAttribute("ACTION_MODE", "VIEW");
            request.setAttribute("lginfo", lginfo);
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("editInit");
    }
    
    public ActionForward checkPKExist(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        LGInfoForm myForm = (LGInfoForm) form;
        String lgNo = myForm.getLgNo();

        try {
        	Lginfo lginfo = lginfoService.findById(lgNo);
        	if (null ==lginfo)
        		request.setAttribute("result", "NON_EXIST");
        	else
        		request.setAttribute("result", "EXIST");
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("jsonMessage");
    }       
        
    
    public ActionForward editInit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        LGInfoForm myForm = (LGInfoForm) form;
        String lgNo = myForm.getLgNo();
        
        String prevJobCodeNo = "";
        String nextJobCodeNo = "";
        String[] idList = request.getParameter("idList") == null ? null : request.getParameter("idList").split(",");
        int nowPage = 0;
        if(idList != null){
           for(int i = 0 ; i < idList.length ; i++){
                if(idList[i].equalsIgnoreCase(lgNo)){
                	nowPage = i + 1;
                	if(i != 0)
                		prevJobCodeNo = idList[i - 1];
                	if(i != idList.length -1)
                		nextJobCodeNo = idList[i + 1];
                }
           }
        }
        request.setAttribute("pagesIndex", nowPage + "/" + idList.length);
        request.setAttribute("prevId", prevJobCodeNo);
        request.setAttribute("nextId", nextJobCodeNo);
        
        
        try{
        	HibernateSessionFactory.getSession().clear();
        	Lginfo lginfo = lginfoService.findById(lgNo);
        	request.setAttribute("ACTION_MODE", "EDIT");
            request.setAttribute("lginfo", lginfo);
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("editInit");
    }
    
    
    
    
    public ActionForward editSubmit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        LGInfoForm myForm = (LGInfoForm) form;
        String lgNo = myForm.getLgNo();

        try {
        	HibernateSessionFactory.getSession().clear();
        	HibernateSessionFactory.getSession().getTransaction().begin();

        	Lginfo lginfo = lginfoService.findById(lgNo);
        	if(myForm.getLgDisplayQty() == null)
        		myForm.setLgDisplayQty(true);
        	if(myForm.getNextLgDisplayQty() == null)
        		myForm.setNextLgDisplayQty(true);
        	BeanUtils.copyProperties(lginfo,myForm);

        	if (null== myForm.getNextEffectiveDate() || (null!= myForm.getNextEffectiveDate() && myForm.getNextEffectiveDate().length() == 0 ))
        		lginfo.setNextEffectiveDate(null);
        	
        	
        	//設定客戶代碼
        	String custNo = myForm.getCustNo();
        	Customer customer = customerService.findById(custNo);
        	lginfo.setCustomer(customer);
        	
        	//設定郵資單總類
        	Integer codeLgType = myForm.getCodeLgType();
        	Code _codeLgType = codeService.findById(codeLgType);
        	lginfo.setCodeByCodeLgType(_codeLgType);
        	
        	//設定交寄郵局或公司
        	Integer codeMailToPostoffice = myForm.getCodeMailToPostoffice();
        	Code _codeMailToPostoffice = codeService.findById(codeMailToPostoffice);
        	lginfo.setCodeByCodeMailToPostoffice(_codeMailToPostoffice);
        	
        	//設定交寄方式
        	Integer codeMailCategory = myForm.getCodeMailCategory();
        	Code _codeMailCategory = codeService.findById(codeMailCategory);
        	lginfo.setCodeByCodeMailCategory(_codeMailCategory);
        	
        	//郵資單寄送地區
        	String mailToAreaDisplay="";

        	Integer[] codeMailToArea = myForm.getCodeMailToArea();
        	for(int i=0;i<codeMailToArea.length;i++) {
        		if (codeMailToArea[i]>0) {
		        	Code _codeMailToArea = codeService.findById(codeMailToArea[i]);
		        	mailToAreaDisplay += _codeMailToArea.getCodeValueTw() +",";
		        	if (i==0) lginfo.setCodeByCodeMailToArea1(_codeMailToArea);
		        	if (i==1) lginfo.setCodeByCodeMailToArea2(_codeMailToArea);
		        	if (i==2) lginfo.setCodeByCodeMailToArea3(_codeMailToArea);
		        	if (i==3) lginfo.setCodeByCodeMailToArea4(_codeMailToArea);
		        	if (i==4) lginfo.setCodeByCodeMailToArea5(_codeMailToArea);
		        	if (i==5) lginfo.setCodeByCodeMailToArea6(_codeMailToArea);
        		}
        	}
        	
        	lginfo.setMailToAreaDisplay(mailToAreaDisplay);
        	
        	
        	//設定Next郵資單總類
        	Integer nextCodeLgType = myForm.getNextCodeLgType();
        	Code _nextCodeLgType = codeService.findById(nextCodeLgType);
        	lginfo.setCodeByNextCodeLgType(_nextCodeLgType);
        	
        	//設定Next交寄郵局或公司
        	Integer nextCodeMailToPostoffice = myForm.getNextCodeMailToPostoffice();
        	Code _nextCodeMailToPostoffice = codeService.findById(nextCodeMailToPostoffice);
        	lginfo.setCodeByNextCodeMailToPostoffice(_nextCodeMailToPostoffice);
        	
        	//設定交寄方式
        	Integer nextCodeMailCategory = myForm.getNextCodeMailCategory();
        	Code _nextCodeMailCategory = codeService.findById(nextCodeMailCategory);
        	lginfo.setCodeByNextCodeMailCategory(_nextCodeMailCategory);
        	
        	//郵資單寄送地區
        	Integer[] nextCodeMailToArea = myForm.getNextCodeMailToArea();
        	if (null != nextCodeMailToArea ) {
	        	for(int i=0;i<nextCodeMailToArea.length;i++) {
	        		if (nextCodeMailToArea[i]>0) {
			        	Code _codeMailToArea = codeService.findById(nextCodeMailToArea[i]);
			        	if (i==0) lginfo.setCodeByNextCodeMailToArea1(_codeMailToArea);
			        	if (i==1) lginfo.setCodeByNextCodeMailToArea2(_codeMailToArea);
			        	if (i==2) lginfo.setCodeByNextCodeMailToArea3(_codeMailToArea);
			        	if (i==3) lginfo.setCodeByNextCodeMailToArea4(_codeMailToArea);
			        	if (i==4) lginfo.setCodeByNextCodeMailToArea5(_codeMailToArea);
			        	if (i==5) lginfo.setCodeByNextCodeMailToArea6(_codeMailToArea);
	        		}
	        	}
        	}
        	
        	lginfoService.save(lginfo);
            HibernateSessionFactory.getSession().getTransaction().commit();
            request.setAttribute("message", "修改成功");
            
            
          //導回編輯頁面
        	request.setAttribute("ACTION_MODE", "EDIT");
            request.setAttribute("lginfo", lginfo);
            return mapping.findForward("editInit");
            
            //return mapping.findForward("message");
        } catch (Exception e) {
            log.error("", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
    }
    
    
    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        LGInfoForm myForm = (LGInfoForm) form;
        String lpNo = myForm.getLgNo();

        try {
        	HibernateSessionFactory.getSession().getTransaction().begin();
        	Lginfo lginfo = lginfoService.findById(lpNo);

        	lginfoService.delete(lginfo);
            HibernateSessionFactory.getSession().getTransaction().commit();
            request.setAttribute("message", "刪除成功");  

        } catch (Exception e) {
            log.error("delete catch exception", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
        	request.setAttribute("message", "資料被引用, 不能刪除");  
			return mapping.findForward("message");
        }
        return mapping.findForward("message");
    }    
    
    
    private ValueList getValueList(HttpServletRequest request, LGInfoForm myForm, String entryKey) {
        Map param = new HashMap();

        String lg_no = myForm.getLgNo();
        if (lg_no != null )
        	param.put("lg_no", lg_no);
        String idf_cust_no = myForm.getCustNo();
        if (idf_cust_no != null )
        	param.put("idf_cust_no", idf_cust_no);
        
        ValueList valueList = valueListService.getValueList(request, entryKey, param);
        return valueList;
    }    
}