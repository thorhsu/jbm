/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.salmat.jbm.struts.action;

import java.io.IOException;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.mlw.vlh.ValueList;
import net.mlw.vlh.ValueListInfo;
import net.mlw.vlh.web.ValueListRequestUtil;
import net.sf.json.JSONArray;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.beanutils.ConvertUtils;
import org.apache.commons.beanutils.converters.DateConverter;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.action.DynaActionForm;
import org.apache.struts.actions.DispatchAction;
import org.hibernate.Transaction;

import com.salmat.jbm.bean.LpinfoJSON;
import com.salmat.jbm.hibernate.*;
import com.salmat.jbm.service.*;
import com.salmat.jbm.struts.form.*;
import com.salmat.jbm.hibernate.HibernateSessionFactory;
import com.painter.util.Global;
import com.painter.util.SessionUtil;
import com.painter.util.Util;


/**
 * MyEclipse Struts Creation date: 02-23-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action parameter="fid" validate="true"
 * @struts.action-forward name="init" path=".findUserAccount"
 */
public class JobBagAction extends DispatchAction {
    /*
     * Generated Methods
     */
	private static final LPInfoService lpinfoService = LPInfoService.getInstance();
	private static final MPInfoService mpinfoService = MPInfoService.getInstance();
	private static final PSInfoService psinfoService = PSInfoService.getInstance();
	private static final LGInfoService lginfoService = LGInfoService.getInstance();
	private static final ReturnInfoService returninfoService = ReturnInfoService.getInstance();
	private static final LCInfoService lcinfoService = LCInfoService.getInstance();
	private static final JobCodeService jobcodeService = JobCodeService.getInstance();
    private static final JobBagService jobbagService = JobBagService.getInstance();
    private static final CustomerService customerService = CustomerService.getInstance();
    private static final CodeService codeService = CodeService.getInstance();
    private static final JobBagSpliteService jobbagSpliteService = JobBagSpliteService.getInstance();
    private static ValueListService valueListService = ValueListService.getInstance();    
    private static Logger log = Logger.getLogger(JobBagAction.class);
    private static final SyslogService syslogService = SyslogService.getInstance();

    /**
     * Method execute
     * 
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    protected ActionForward unspecified(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) {

        return mapping.findForward("homepage");
    }

    //複製新增
    public ActionForward saveAsNewInit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        JobBagForm myForm = (JobBagForm) form;
        String jobBagNo = myForm.getJobBagNo();

        try {
        	JobBag jobbag = jobbagService.findById(jobBagNo);

        	List lplist = customerService.getCustomerLPList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("lpinfoJSON", lplist);  
    		
        	List mplist = customerService.getCustomerMPList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("mpinfoJSON", mplist);    		
    		
        	List pslist = customerService.getCustomerPSList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("psinfoJSON", pslist);    		
    		
        	List lglist = customerService.getCustomerLGList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("lginfoJSON", lglist);    		
    		
        	List returnlist = customerService.getCustomerReturnList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("returninfoJSON", returnlist);    		
    		
        	List lclist = customerService.getCustomerLCList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("lcinfoJSON", lclist);    	
    		
    		//RESET 工單account/cycle date .. 等資訊
    		jobbag.setAccounts(null);
    		jobbag.setPages(null);
    		jobbag.setSheets(null);
    		jobbag.setCycleDate(null);
    		jobbag.setReceiveDate(null);
    		jobbag.setJobBagStatus("INIT");
    		jobbag.setAfpName("");
            request.setAttribute("jobbag", jobbag);
            request.setAttribute("ACTION_MODE", "SAVE_AS_NEW");
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("editInit");
    }    
    
    
    
    public ActionForward addInit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        JobBagForm myForm = (JobBagForm) form;
        String jobCodeNo = myForm.getJobCodeNo();
        try {
        	JobCode jobcode = jobcodeService.findById(jobCodeNo);
        	Code code = jobcode.getCodeByCodeJobCodeType();
        	if("SplitAccounts".equals(code.getCodeKey()) || "拆帳".equals(code.getCodeValueTw())){
    			request.setAttribute("message", "拆帳工單樣本不可用來產生正常工單 ");
    			return mapping.findForward("message");
        	}
        	
        	JobBag jobbag = new JobBag();
        	BeanUtils.copyProperties(jobbag,jobcode);
        	
			Lpinfo selectedLpinfo = jobcode.getLpinfoByIdfLpNo1();
			if (null!=selectedLpinfo && null != selectedLpinfo.getLpNo() && jobbag.getIsLp()) {
				jobbag.setLpProdmemo(selectedLpinfo.getProdmemo());
				jobbag.setCodeByLpCodePrinter(selectedLpinfo
						.getCodeByCodePrinter());
				jobbag.setCodeByLpCodePrintType(selectedLpinfo
						.getCodeByCodePrintType());
				jobbag.setLpPcode1(selectedLpinfo.getPcode1());
				jobbag.setLpPcode2(selectedLpinfo.getPcode2());
				jobbag.setLpPcode3(selectedLpinfo.getPcode3());
				jobbag.setLpPcode4(selectedLpinfo.getPcode4());
				jobbag.setLpPcode5(selectedLpinfo.getPcode5());
				jobbag.setLpPcode6(selectedLpinfo.getPcode6());
				jobbag.setLpPcode7(selectedLpinfo.getPcode7());
				jobbag.setLpPcode8(selectedLpinfo.getPcode8());
				jobbag.setLpRemark(selectedLpinfo.getRemark());
			}

			Mpinfo selectedMpinfo  = jobcode.getMpinfoByIdfMpNo1();
			if (null!=selectedMpinfo && null != selectedMpinfo.getMpNo()
					&& jobbag.getMpDmPs().equalsIgnoreCase("MP")) {
				jobbag.setMpProdmemo(selectedMpinfo.getProdmemo());
				jobbag.setMpPrintCode(selectedMpinfo.getPrintCode());
				jobbag.setMpStampSetFg(selectedMpinfo.getStampSetFg());
				jobbag.setMpZipFg(selectedMpinfo.getZipFg());
				jobbag.setMpMp1Iflag(selectedMpinfo.getMp1Iflag());
				jobbag.setMpMp2Iflag(selectedMpinfo.getMp2Iflag());
				jobbag.setMpMp3Iflag(selectedMpinfo.getMp3Iflag());
				jobbag.setMpMp4Iflag(selectedMpinfo.getMp4Iflag());
				jobbag.setMpMp1Word(selectedMpinfo.getMp1Word());
				jobbag.setMpMp2Word(selectedMpinfo.getMp2Word());
				jobbag.setMpMp3Word(selectedMpinfo.getMp3Word());
				jobbag.setMpMp4Word(selectedMpinfo.getMp4Word());
				jobbag.setMpRemark(selectedMpinfo.getRemark());
			}

			// Clone PS into to job_bag, 切斷 job_bag 跟 psinfo reference 關係,
			if (null != jobbag.getPsinfo()
					&& jobbag.getMpDmPs().equalsIgnoreCase("PS")) {
				jobbag.setPsProdmemo(jobbag.getPsinfo().getProdmemo());
				jobbag.setCodeByPsCodePsType(jobbag.getPsinfo()
						.getCodeByCodePsType());
				jobbag.setPsZipFg(jobbag.getPsinfo().getZipFg());
				jobbag.setPsRemark(jobbag.getPsinfo().getRemark());
			}

			// Clone LG into to job_bag, 切斷 job_bag 跟lginfo reference 關係,
			if (null != jobbag.getLginfo() && jobbag.getIsLg()
					&& null != jobbag.getDispatchType()
					&& jobbag.getDispatchType().equalsIgnoreCase("MAIL")) {
				jobbag.setLgProgNm(jobbag.getLginfo().getProgNm());
				jobbag.setCodeByLgCodeMailToArea1(jobbag.getLginfo()
						.getCodeByCodeMailToArea1());
				jobbag.setCodeByLgCodeMailToArea2(jobbag.getLginfo()
						.getCodeByCodeMailToArea2());
				jobbag.setCodeByLgCodeMailToArea3(jobbag.getLginfo()
						.getCodeByCodeMailToArea3());
				jobbag.setCodeByLgCodeMailToArea4(jobbag.getLginfo()
						.getCodeByCodeMailToArea4());
				jobbag.setCodeByLgCodeMailToArea5(jobbag.getLginfo()
						.getCodeByCodeMailToArea5());
				jobbag.setCodeByLgCodeMailToArea6(jobbag.getLginfo()
						.getCodeByCodeMailToArea6());
				jobbag.setLgPList(jobbag.getLginfo().getPList());
				jobbag.setLgMailToAreaDisplay(jobbag.getLginfo()
						.getMailToAreaDisplay());
				jobbag.setCodeByCodeLgType(jobbag.getLginfo()
						.getCodeByCodeLgType());
				jobbag.setCodeByCodeMailCategory(jobbag.getLginfo()
						.getCodeByCodeMailCategory());
				jobbag.setCodeByCodeMailToPostoffice(jobbag.getLginfo()
						.getCodeByCodeMailToPostoffice());
				jobbag.setLgDisplayQty(jobbag.getLginfo().getLgDisplayQty());
			}

			// Clone LC into to job_bag, 切斷 job_bag 跟lcinfo reference 關係,
			if (null != jobbag.getLcinfo() && jobbag.getIsLg()) {
				jobbag.setLcProgNm(jobbag.getLcinfo().getProgNm());
				jobbag.setLcPList(jobbag.getLcinfo().getPList());
				jobbag.setLcTemplate(jobbag.getLcinfo().getTemplate());
			}
			// Clone return into to job_bag, 切斷 job_bag 跟lcinfo reference 關係,
			if (null != jobbag.getReturninfo()
					&& jobbag.getIsLg()
					&& jobbag.getDispatchType().equalsIgnoreCase(
							"RETURN_CUSTOMER")) {
				jobbag.setRetReturnAddress(jobbag.getReturninfo()
						.getReturnAddress());
				jobbag.setRetUserCompany(jobbag.getReturninfo()
						.getUserCompany());
				jobbag.setRetUserName(jobbag.getReturninfo().getUserName());
				jobbag.setRetUserTel(jobbag.getReturninfo().getUserTel());
			}
			
        	
        	List lplist = customerService.getCustomerLPList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("lpinfoJSON", lplist);  
    		
        	List mplist = customerService.getCustomerMPList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("mpinfoJSON", mplist);    		
    		
        	List pslist = customerService.getCustomerPSList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("psinfoJSON", pslist);    		
    		
        	List lglist = customerService.getCustomerLGList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("lginfoJSON", lglist);    		
    		
        	List returnlist = customerService.getCustomerReturnList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("returninfoJSON", returnlist);    		
    		
        	List lclist = customerService.getCustomerLCList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("lcinfoJSON", lclist);   
    		
    		
            request.setAttribute("jobbag", jobbag);
            request.setAttribute("ACTION_MODE", "ADD");
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("editInit");
    }    
    
    public ActionForward addSubmit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        JobBagForm myForm = (JobBagForm) form;
        String jobCodeNo = myForm.getCustNo() + myForm.getJobCodeId();

        try {
        	HibernateSessionFactory.getSession().clear();
        	HibernateSessionFactory.getSession().getTransaction().begin();

        	JobCode jobcode = jobcodeService.findById(jobCodeNo);
			String cycleDate_form = myForm.getCycleDate_form();
			Date cycleDate = new Date();
			SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");

			if (null != cycleDate_form && cycleDate_form.length()>1 ) {
				cycleDate = (Date) formatter.parse(cycleDate_form);		
			}

			String receiveDate_form = myForm.getReceiveDate_form();
			Date receiveDate = new Date();			
			if (null != receiveDate_form && receiveDate_form.length()>1 ) {
				receiveDate = (Date) formatter.parse(receiveDate_form);		
			}			

			Integer accounts=myForm.getAccounts() ;
			Integer pages=myForm.getPages();
			Integer sheets=myForm.getPages();
			String afpName=myForm.getAfpName();
			
			//SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyyMMddHHmmssSSS");
			
			
			String logFilename ="手動開單:" + SessionUtil.getAccount(request).getUserId() ;
			
        	//設定批號
        	jobcode.setLogFileSeq("001");

        	JobBag jobbag = jobbagService.createNewJobBag(jobcode, accounts,pages, sheets, afpName ,  cycleDate,  receiveDate,  logFilename,0,0,0,0,0,0,0,0,0,0,0,0,"",0,0,0,0,0,0,0,true);
        	String jobbagNo = jobbag.getJobBagNo();
        	String jobBagStatus = jobbag.getJobBagStatus();
        	//處理 copyProperties date == null 
        	java.util.Date defaultValue = null;
        	DateConverter converter = new DateConverter(defaultValue);
        	ConvertUtils.register(converter, java.util.Date.class);        	
        	BeanUtils.copyProperties(jobbag, myForm);
        	String deadLineStr = myForm.getDeadLine_form();        	
        	if(deadLineStr != null && !"".equals(deadLineStr)){
        		jobbag.setDeadLine(formatter.parse(deadLineStr));
        	}
        	
        	jobbag.setJobBagNo(jobbagNo);
        	jobbag.setJobBagStatus(jobBagStatus);
        	jobbag.setSpliteCount(1); //設定 工單批次
        	jobbag.setCtAcctsOri(accounts);
        	
			
			//以下同 jobCode 處理流程

        	//設定客戶代碼
        	String custNo = myForm.getCustNo();
        	Customer customer = customerService.findById(custNo);
        	jobbag.setCustomer(customer);
        	
        	//設定 LP/MP/PS/LG/Return/LC
        	String lpNo1 = myForm.getLpNo1();
        	String mpNo1 = myForm.getMpNo1();
        	String psNo = myForm.getPsNo();
        	String lgNo = myForm.getLgNo();
        	String returnNo = myForm.getReturnNo();
        	String lcNo = myForm.getLcNo();
        	String mpDmPs = myForm.getMpDmPs();

        	// RE-SET lp1/lp2/lp3/mp1/mp2/mp3/ps
        	jobbag.setLpinfoByIdfLpNo1(null);
        	jobbag.setLpinfoByIdfLpNo2(null);
        	jobbag.setLpinfoByIdfLpNo3(null);
        	jobbag.setMpinfoByIdfMpNo1(null);
        	jobbag.setMpinfoByIdfMpNo2(null);
        	jobbag.setMpinfoByIdfMpNo3(null);
        	jobbag.setPsinfo(null);
        	jobbag.setLginfo(null);
        	jobbag.setReturninfo(null);
        	jobbag.setLcinfo(null);        	

        	if (null!= lpNo1 && lpNo1.length() >0 && jobbag.getIsLp()) {
        		Lpinfo lpinfoByIdfLpNo1 = lpinfoService.findById(lpNo1);
        		jobbag.setLpinfoByIdfLpNo1(lpinfoByIdfLpNo1);
        	}
      	
        	
        	if (null!= mpNo1 && mpNo1.length() >0 && mpDmPs.equalsIgnoreCase("MP")) {
        		Mpinfo mpinfoByIdfMpNo1 = mpinfoService.findById(mpNo1);
        		jobbag.setMpinfoByIdfMpNo1(mpinfoByIdfMpNo1);
        	}

        	
        	if (null!= psNo && psNo.length() >0 && mpDmPs.equalsIgnoreCase("PS")) {
        		Psinfo psinfo = psinfoService.findById(psNo);
        		jobbag.setPsinfo(psinfo);
        	}     
        	
        	if (null!= lgNo && lgNo.length() >0 && jobbag.getIsLg() && jobbag.getDispatchType().equalsIgnoreCase("MAIL") && jobbag.getUseLg()) {
        		Lginfo lginfo = lginfoService.findById(lgNo);
        		jobbag.setLginfo(lginfo);
        	}    
        	
        	if (null!= returnNo && returnNo.length() >0 && jobbag.getIsLg() && jobbag.getDispatchType().equalsIgnoreCase("RETURN_CUSTOMER")) {
        		Returninfo returninfo = returninfoService.findById(returnNo);
        		jobbag.setReturninfo(returninfo);
        	} 
        	
        	if (null!= lcNo && lcNo.length() >0 && jobbag.getIsLg() && (jobbag.getDispatchType().equalsIgnoreCase("MAIL") || jobbag.getDispatchType().equalsIgnoreCase("RETURN_CUSTOMER"))) {
        		Lcinfo lcinfo = lcinfoService.findById(lcNo);
        		jobbag.setLcinfo(lcinfo);
        	}         	
        	
        	//設定 工作種類
        	Integer jobCodeType = myForm.getJobCodeType();
        	Code codeByCodeJobCodeType = codeService.findById(jobCodeType);
        	jobbag.setCodeByCodeJobCodeType(codeByCodeJobCodeType);
        	
        	//設定 交寄郵局或公司
        	Integer mailToPostoffice = myForm.getCodeMailToPostoffice();
        	if (null!= mailToPostoffice) {
	        	Code codeByCodeMailToPostoffice = codeService.findById(mailToPostoffice);
	        	jobbag.setCodeByCodeMailToPostoffice(codeByCodeMailToPostoffice);
        	}
        	
        	//設定 郵資單總類
        	Integer codeLgType = myForm.getCodeLgType();
        	if (null!= codeLgType) {
	        	Code codeByCodeLgType = codeService.findById(codeLgType);
	        	jobbag.setCodeByCodeLgType(codeByCodeLgType) ;      	
        	}        	
   	
        	//設定 交寄方式
        	Integer codeMailCategory = myForm.getCodeMailCategory();
        	if (null!= codeMailCategory) {
	        	Code codeByCodeMailCategory = codeService.findById(codeMailCategory);
	        	jobbag.setCodeByCodeMailCategory(codeByCodeMailCategory) ;      	
        	}               	
        	
    		
        	
        	//設定 在job_bag 值接修改下拉選單的資料
        	Integer codeLpPrintType = myForm.getCodeLpPrintType();
        	if (null!= codeLpPrintType) {
	        	Code codeByLpCodePrintType = codeService.findById(codeLpPrintType);
	        	jobbag.setCodeByLpCodePrintType(codeByLpCodePrintType); 	
        	}  
        	
        	Integer codeLpPrinter = myForm.getCodeLpPrinter();
        	if (null!= codeLpPrinter) {
	        	Code codeByLpCodePrinter = codeService.findById(codeLpPrinter);
	        	jobbag.setCodeByLpCodePrinter(codeByLpCodePrinter); 	
        	}  
        	
        	Integer codePsType = myForm.getCodePsType();
        	if (null!= codeLpPrinter) {
	        	Code codeByPsCodePsType = codeService.findById(codePsType);
	        	jobbag.setCodeByPsCodePsType(codeByPsCodePsType)	;
        	}          	
        	
        	//郵資單寄送地區
        	String mailToAreaDisplay="";

        	Integer[] codeMailToArea = myForm.getCodeMailToArea();
        	if (null != codeMailToArea) {
	        	for(int i=0;i<codeMailToArea.length;i++) {
	        		if (codeMailToArea[i]>0) {
			        	Code _codeMailToArea = codeService.findById(codeMailToArea[i]);
			        	mailToAreaDisplay += _codeMailToArea.getCodeValueTw() +",";
			        	if (i==0) jobbag.setCodeByLgCodeMailToArea1(_codeMailToArea);
			        	if (i==1) jobbag.setCodeByLgCodeMailToArea2(_codeMailToArea);
			        	if (i==2) jobbag.setCodeByLgCodeMailToArea3(_codeMailToArea);
			        	if (i==3) jobbag.setCodeByLgCodeMailToArea4(_codeMailToArea);
			        	if (i==4) jobbag.setCodeByLgCodeMailToArea5(_codeMailToArea);
			        	if (i==5) jobbag.setCodeByLgCodeMailToArea6(_codeMailToArea);
	        		}
	        	}
        	}
        	jobbag.setLgMailToAreaDisplay(mailToAreaDisplay);        	
        	
        	
        	jobbagService.save(jobbag);
            HibernateSessionFactory.getSession().getTransaction().commit();
      	    SysLog syslog = new SysLog();
  		    syslog.setLogType("CREATE_JOBBAG_MANUALLY");
  		    syslog.setSubject("完成建立工單");     		   
  		    syslog.setMessageBody(jobbag.getJobBagNo() + ":" + logFilename);
  	        syslog.setCreateDate(new Date());
  		    syslogService.save(syslog);
            
            request.setAttribute("message", "新增成功");
            return mapping.findForward("message");
        } catch (Exception e) {
            log.error("", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }

    }    
    
    public ActionForward updateJobBagStatus(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
    	response.setContentType("text/json;charset=UTF-8");
    	ActionMessages messages = new ActionMessages();
        JobBagForm myForm = (JobBagForm) form;
        String jsonString = "";
        String jobBagNos = request.getParameter("idList");
        List<Map<String, String>> retJobs = null;
        if(jobBagNos != null && jobBagNos.endsWith(",")){
        	jobBagNos = jobBagNos.substring(0, jobBagNos.length() - 1);
            retJobs = jobbagService.findJobBagInList(jobBagNos);
        
            try {
        	    JSONArray json = JSONArray.fromObject(retJobs);
        	    jsonString = json.toString();
			    response.getWriter().write(jsonString);
        	
		    } catch (IOException e) {
                log.error("", e);
			    e.printStackTrace();
		    }
        }
        return null;    
    }
    
    public ActionForward list(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
    	//System.out.println("into");
    	ActionMessages messages = new ActionMessages();
        JobBagForm myForm = (JobBagForm) form;

        try {
        	ValueList dataList = getValueList(request, myForm,"jobbagList");
        	
        	String job_bag_nos = "";
            for(Object obj : dataList.getList()){            	
            	job_bag_nos += "'" + BeanUtils.getProperty(obj, "job_bag_no") + "',";
            }
            request.setAttribute("idList", job_bag_nos);
        	
            request.setAttribute("dataList", dataList);
            String backToListURL = request.getRequestURI() +"?" + request.getQueryString();
            //request.getSession().setAttribute("backToListURL", backToListURL);
            request.setAttribute("backToListURL", URLEncoder.encode(backToListURL, "UTF-8"));
        } catch (Exception e) {
            log.error("", e);
            messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
                    Global.MESSAGE_SYSTEMERROR_KEY));
            this.saveMessages(request, messages);
            return mapping.findForward(Global.FORWARD_INCLUDE_MESSAGE_KEY);
        }
        return mapping.findForward("list");
    }

    
    public ActionForward view(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        JobBagForm myForm = (JobBagForm) form;
        String jobBagNo = myForm.getJobBagNo();
        
        try {
        	JobBag jobbag = jobbagService.findById(jobBagNo);
        	

        	List lplist = customerService.getCustomerLPList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("lpinfoJSON", lplist);  
    		
        	List mplist = customerService.getCustomerMPList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("mpinfoJSON", mplist);    		
    		
        	List pslist = customerService.getCustomerPSList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("psinfoJSON", pslist);    		
    		
        	List lglist = customerService.getCustomerLGList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("lginfoJSON", lglist);    		
    		
        	List returnlist = customerService.getCustomerReturnList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("returninfoJSON", returnlist);    		
    		
        	List lclist = customerService.getCustomerLCList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("lcinfoJSON", lclist);    		
    		
        	request.setAttribute("ACTION_MODE", "VIEW");
            request.setAttribute("jobbag", jobbag);

        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("editInit");
    }
    
    public ActionForward checkPKExist(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        JobBagForm myForm = (JobBagForm) form;
        String jobBagNo = myForm.getJobBagNo();

        try {
        	JobBag jobbag = jobbagService.findById(jobBagNo);
        	if (null ==jobbag)
        		request.setAttribute("result", "NON_EXIST");
        	else
        		request.setAttribute("result", "EXIST");
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("jsonMessage");
    }       
        
    
    public ActionForward editInit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        ActionMessages messages = new ActionMessages();
        JobBagForm myForm = (JobBagForm) form;
        String jobBagNo = myForm.getJobBagNo();
        try{
        	HibernateSessionFactory.getSession().clear();
        	HibernateSessionFactory.getSession();
        	JobBag jobbag = jobbagService.findById(jobBagNo);

        	List lplist = customerService.getCustomerLPList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("lpinfoJSON", lplist);  
    		
        	List mplist = customerService.getCustomerMPList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("mpinfoJSON", mplist);    		
    		
        	List pslist = customerService.getCustomerPSList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("psinfoJSON", pslist);    		
    		
        	List lglist = customerService.getCustomerLGList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("lginfoJSON", lglist);    		
    		
        	List returnlist = customerService.getCustomerReturnList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("returninfoJSON", returnlist);    		
    		
        	List lclist = customerService.getCustomerLCList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("lcinfoJSON", lclist);    		
    		
        	request.setAttribute("ACTION_MODE", "EDIT");
            request.setAttribute("jobbag", jobbag);
        } catch (Exception e) {
            log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        return mapping.findForward("editInit");
    }
    
    
    
    
    public ActionForward editSubmit(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        JobBagForm myForm = (JobBagForm) form;
        String jobBagNo = myForm.getJobBagNo();

        try {
        	HibernateSessionFactory.getSession().clear();
        	JobBag jobbag = jobbagService.findById(jobBagNo);
        	
        	
        	String status = jobbag.getJobBagStatus();
        	if(!"INIT".equalsIgnoreCase(status) && !"EDD".equals(status) && !"NON_LP".equals(status) && !"NON_MP".equals(status)){
        		request.setAttribute("message", jobbag.getJobBagNo() + "目前不處於「工單產生」狀態，無法修改");
    			return mapping.findForward("message");
        	}
        	
        	Set<JobBagSplite> jobBagSplites = jobbag.getJobBagSplites();
        	
        	HibernateSessionFactory.getSession().getTransaction().begin();
        	//處理 copyProperties date == null 
        	java.util.Date defaultValue = null;
        	DateConverter converter = new DateConverter(defaultValue);
        	ConvertUtils.register(converter, java.util.Date.class);        	
        	BeanUtils.copyProperties(jobbag, myForm);
        	SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
        	
        	String deadLineStr = myForm.getDeadLine_form();        	
        	if(deadLineStr != null && !"".equals(deadLineStr)){
        		jobbag.setDeadLine(formatter.parse(deadLineStr));
        	}
        	
        	if(myForm.getCustConfirmDate() == null || myForm.getCustConfirmDate().trim().equals("")){
        		jobbag.setCustConfirmDate(null);
        	}else{
        		jobbag.setCustConfirmDate(formatter.parse(myForm.getCustConfirmDate()));
        	}        	
        	jobbag.setJobBagNo(jobBagNo);
        	
        	
			String cycleDate_form = myForm.getCycleDate_form();
			Date cycleDate = new Date();
			
			
			if (null != cycleDate_form && cycleDate_form.length() > 1 ) {
				cycleDate = (Date) formatter.parse(cycleDate_form);		
			}
			jobbag.setCycleDate(cycleDate);
			
			String receiveDate_form = myForm.getReceiveDate_form();
			Date receiveDate = new Date();			
			if (null != receiveDate_form && receiveDate_form.length()>1 ) {
				receiveDate = (Date) formatter.parse(receiveDate_form);		
			}
			
			jobbag.setReceiveDate(receiveDate);
			
			//以下同 jobCode 處理流程

        	//設定客戶代碼
        	String custNo = myForm.getCustNo();
        	Customer customer = customerService.findById(custNo);
        	jobbag.setCustomer(customer);
        	
        	//設定 LP/MP/PS/LG/Return/LC
        	String lpNo1 = myForm.getLpNo1();
        	String mpNo1 = myForm.getMpNo1();
        	String psNo = myForm.getPsNo();
        	String lgNo = myForm.getLgNo();
        	String returnNo = myForm.getReturnNo();
        	String lcNo = myForm.getLcNo();
        	String mpDmPs = myForm.getMpDmPs();

        	// RE-SET lp1/lp2/lp3/mp1/mp2/mp3/ps
        	jobbag.setLpinfoByIdfLpNo1(null);
        	jobbag.setLpinfoByIdfLpNo2(null);
        	jobbag.setLpinfoByIdfLpNo3(null);
        	jobbag.setMpinfoByIdfMpNo1(null);
        	jobbag.setMpinfoByIdfMpNo2(null);
        	jobbag.setMpinfoByIdfMpNo3(null);
        	jobbag.setPsinfo(null);
        	jobbag.setLginfo(null);
        	jobbag.setReturninfo(null);
        	jobbag.setLcinfo(null);        	

        	if (null!= lpNo1 && lpNo1.length() >0 && jobbag.getIsLp()) {
        		Lpinfo lpinfoByIdfLpNo1 = lpinfoService.findById(lpNo1);
        		jobbag.setLpinfoByIdfLpNo1(lpinfoByIdfLpNo1);
        	}
      	
        	
        	if (null!= mpNo1 && mpNo1.length() >0 && mpDmPs.equalsIgnoreCase("MP")) {
        		Mpinfo mpinfoByIdfMpNo1 = mpinfoService.findById(mpNo1);
        		jobbag.setMpinfoByIdfMpNo1(mpinfoByIdfMpNo1);
        	}

        	
        	if (null!= psNo && psNo.length() >0 && mpDmPs.equalsIgnoreCase("PS")) {
        		Psinfo psinfo = psinfoService.findById(psNo);
        		jobbag.setPsinfo(psinfo);
        	}     
        	
        	if (null!= lgNo && lgNo.length() >0 && jobbag.getIsLg() && jobbag.getDispatchType().equalsIgnoreCase("MAIL") && jobbag.getUseLg()) {
        		Lginfo lginfo = lginfoService.findById(lgNo);
        		jobbag.setLginfo(lginfo);
        		if(lginfo != null)
        		   jobbag.setLgDisplayQty(jobbag.getLginfo().getLgDisplayQty());
        	}    
        	
        	if (null!= returnNo && returnNo.length() >0 && jobbag.getIsLg() && jobbag.getDispatchType().equalsIgnoreCase("RETURN_CUSTOMER")) {
        		Returninfo returninfo = returninfoService.findById(returnNo);
        		jobbag.setReturninfo(returninfo);
        	} 
        	
        	if (null!= lcNo && lcNo.length() >0 && jobbag.getIsLg() && (jobbag.getDispatchType().equalsIgnoreCase("MAIL") || jobbag.getDispatchType().equalsIgnoreCase("RETURN_CUSTOMER"))) {
        		Lcinfo lcinfo = lcinfoService.findById(lcNo);
        		jobbag.setLcinfo(lcinfo);
        	}         	
        	
        	//設定 工作種類
        	Integer jobCodeType = myForm.getJobCodeType();
        	Code codeByCodeJobCodeType = codeService.findById(jobCodeType);
        	jobbag.setCodeByCodeJobCodeType(codeByCodeJobCodeType);
        	
        	//設定 交寄郵局或公司
        	Integer mailToPostoffice = myForm.getCodeMailToPostoffice();
        	if (null!= mailToPostoffice) {
	        	Code codeByCodeMailToPostoffice = codeService.findById(mailToPostoffice);
	        	jobbag.setCodeByCodeMailToPostoffice(codeByCodeMailToPostoffice);
        	}
        	
        	//設定 郵資單總類
        	Integer codeLgType = myForm.getCodeLgType();
        	if (null!= codeLgType) {
	        	Code codeByCodeLgType = codeService.findById(codeLgType);
	        	jobbag.setCodeByCodeLgType(codeByCodeLgType) ; 
        	}        	
   	
        	//設定 交寄方式
        	Integer codeMailCategory = myForm.getCodeMailCategory();
        	if (null!= codeMailCategory) {
	        	Code codeByCodeMailCategory = codeService.findById(codeMailCategory);
	        	jobbag.setCodeByCodeMailCategory(codeByCodeMailCategory) ;      	
        	}               	
        	
    		
        	
        	//設定 在job_bag 值接修改下拉選單的資料
        	Integer codeLpPrintType = myForm.getCodeLpPrintType();
        	if (null!= codeLpPrintType) {
	        	Code codeByLpCodePrintType = codeService.findById(codeLpPrintType);
	        	jobbag.setCodeByLpCodePrintType(codeByLpCodePrintType); 	
        	}  
        	
        	Integer codeLpPrinter = myForm.getCodeLpPrinter();
        	if (null!= codeLpPrinter) {
	        	Code codeByLpCodePrinter = codeService.findById(codeLpPrinter);
	        	jobbag.setCodeByLpCodePrinter(codeByLpCodePrinter); 	
        	}  
        	
        	Integer codePsType = myForm.getCodePsType();
        	if (null!= codeLpPrinter) {
	        	Code codeByPsCodePsType = codeService.findById(codePsType);
	        	jobbag.setCodeByPsCodePsType(codeByPsCodePsType)	;
        	}          	
        	
        	//郵資單寄送地區
        	String mailToAreaDisplay="";

        	Integer[] codeMailToArea = myForm.getCodeMailToArea();
        	if (null != codeMailToArea) {
	        	for(int i=0;i<codeMailToArea.length;i++) {
	        		if (codeMailToArea[i]>0) {
			        	Code _codeMailToArea = codeService.findById(codeMailToArea[i]);
			        	mailToAreaDisplay += _codeMailToArea.getCodeValueTw() +",";
			        	if (i==0) jobbag.setCodeByLgCodeMailToArea1(_codeMailToArea);
			        	if (i==1) jobbag.setCodeByLgCodeMailToArea2(_codeMailToArea);
			        	if (i==2) jobbag.setCodeByLgCodeMailToArea3(_codeMailToArea);
			        	if (i==3) jobbag.setCodeByLgCodeMailToArea4(_codeMailToArea);
			        	if (i==4) jobbag.setCodeByLgCodeMailToArea5(_codeMailToArea);
			        	if (i==5) jobbag.setCodeByLgCodeMailToArea6(_codeMailToArea);
	        		}
	        	}
        	}
        	jobbag.setLgMailToAreaDisplay(mailToAreaDisplay);        	
        	
        	
        	//有分檔批次時進入
        	if(jobBagSplites != null ){
        	   int jobBagSplitesSize = jobBagSplites.size();
        	   for(JobBagSplite jobBagSplite: jobBagSplites){
        		  //重設分檔批次中的數字
        		  jobBagSplite.setAccounts(myForm.getAccounts());
        		  jobBagSplite.setPages(myForm.getPages());
        		  jobBagSplite.setSheets(myForm.getSheets());
        		
        		  if(jobBagSplitesSize > 1){
        			//如果不只一個批次，重設分檔批次中的數字
        			 jobBagSplite.setLpAccountSeqBegin(null);
              		 jobBagSplite.setLpAccountSeqEnd(null);
              		 jobBagSplite.setLpAccountSeqDiff(null);
              		 jobBagSplite.setLpPagesSeqBegin(null);
              		 jobBagSplite.setLpPagesSeqEnd(null);
              		 jobBagSplite.setLpPagesSeqDiff(null);
        		  }else{
        			//如果只有一個批次，重設預設的accounts及pages起迄
        			 jobBagSplite.setLpAccountSeqBegin(1);
              		 jobBagSplite.setLpAccountSeqEnd(myForm.getAccounts());
              		 jobBagSplite.setLpAccountSeqDiff(myForm.getAccounts());
              		 jobBagSplite.setLpPagesSeqBegin(1);
              		 jobBagSplite.setLpPagesSeqEnd(myForm.getPages());
              		 jobBagSplite.setLpPagesSeqDiff(myForm.getPages());
        		  }
        		  jobbagSpliteService.save(jobBagSplite);
        	   }
        	}
        	Employee employee = SessionUtil.getAccount(request.getSession());
      	    SysLog syslog = new SysLog();
  		    syslog.setLogType("Mod_Job_Bag");
  		    syslog.setSubject("修改工單內容");     		   
  		    syslog.setMessageBody(employee.getEName() + "修改" + jobbag.getJobBagNo() + ": accounts " +  jobbag.getAccounts() + 
  				  ". pages " +  jobbag.getPages() +
  				  ". sheets " +  jobbag.getSheets() + ". cycle date " + (jobbag.getCycleDate() == null ? "" : formatter.format(jobbag.getCycleDate())));
  	        syslog.setCreateDate(new Date());
  		    syslogService.save(syslog);
        	jobbagService.save(jobbag);
            HibernateSessionFactory.getSession().getTransaction().commit();
            request.setAttribute("message", "修改成功");
            
            
            //導回編輯頁面
            
        	List lplist = customerService.getCustomerLPList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("lpinfoJSON", lplist);  
    		
        	List mplist = customerService.getCustomerMPList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("mpinfoJSON", mplist);    		
    		
        	List pslist = customerService.getCustomerPSList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("psinfoJSON", pslist);    		
    		
        	List lglist = customerService.getCustomerLGList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("lginfoJSON", lglist);    		
    		
        	List returnlist = customerService.getCustomerReturnList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("returninfoJSON", returnlist);    		
    		
        	List lclist = customerService.getCustomerLCList(jobbag.getCustomer().getCustNo());
    		request.setAttribute("lcinfoJSON", lclist);    		
    		
        	request.setAttribute("ACTION_MODE", "EDIT");
            request.setAttribute("jobbag", jobbag);

            return mapping.findForward("editInit");
            
            
            //return mapping.findForward("message");
        } catch (Exception e) {
            log.error("", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
        }
        //return mapping.findForward("viewAccount");
    }
    
    public ActionForward deleteJobBag(ActionMapping mapping, ActionForm form, HttpServletRequest request,HttpServletResponse response) {
    	return mapping.findForward("deleteJobBag");
    } 
    
    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        JobBagForm myForm = (JobBagForm) form;
        String jobBagNo = myForm.getJobBagNo();
        if(jobBagNo != null && jobBagNo.length() >= 18){
        	if(jobBagNo.endsWith("L") || jobBagNo.endsWith("M") || jobBagNo.endsWith("I")){
        		jobBagNo = jobBagNo.substring(0, jobBagNo.length() - 4);  //扣掉batchNo + "L || M || I"
        	}else{
        		jobBagNo = jobBagNo.substring(0, jobBagNo.length() - 3); //扣掉batchNo
        	}
        }


        try {
        	JobBag jobbag = jobbagService.findById(jobBagNo);
        	String status = null;
        	if(jobbag != null)
        	   status = jobbag.getJobBagStatus();
        	if("ACCOUNTING_EP1".equals(status) || "ACCOUNTING_LOCKED".equals(status) || "ACCT_DN_GENERATED".equals(status)){
        		request.setAttribute("message", jobBagNo + "此工單已進入會計立帳程序，請先與會計部門協調後再刪除");  
    			return mapping.findForward("message");
        	}
        	
        	if(jobbag != null){
        		HibernateSessionFactory.getSession().getTransaction().begin();
        		jobbagService.delete(jobbag); //會cascade delete掉jobbagSplite，所以不用刪除jobbagSplite
            	jobbagSpliteService.deleteLineCheck(jobbag.getJobBagNo()); //有重複轉檔的，會有lineCheck的行，也要刪除
                HibernateSessionFactory.getSession().getTransaction().commit();
                request.setAttribute("message", jobBagNo + "刪除成功");
            	Employee employee = SessionUtil.getAccount(request.getSession());  
            	SysLog syslog = new SysLog();
        		syslog.setLogType("Del_Job_Bag");
        		syslog.setSubject("刪除工單");
        		syslog.setMessageBody(employee.getEmpNo() + ":" + employee.getUserId() + "刪除" + jobBagNo + "成功");
        	    syslog.setCreateDate(new Date());
        		syslogService.save(syslog);
        	}else{
        		request.setAttribute("message", "查無" + jobBagNo + "此工單，無法刪除");
        	}
        } catch (Exception e) {
            log.error("delete catch exception", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
        	request.setAttribute("message", e.getMessage());  
			return mapping.findForward("message");
        }
        return mapping.findForward("message");
    }    
    
    public ActionForward markDelete(ActionMapping mapping, ActionForm form, HttpServletRequest request,
            HttpServletResponse response) {
        JobBagForm myForm = (JobBagForm) form;
        String jobBagNo = myForm.getJobBagNo();
        if(jobBagNo != null && jobBagNo.length() >= 18){
        	if(jobBagNo.endsWith("L") || jobBagNo.endsWith("M") || jobBagNo.endsWith("I")){
        		jobBagNo = jobBagNo.substring(0, jobBagNo.length() - 4);  //扣掉batchNo + "L || M || I"
        	}else{
        		jobBagNo = jobBagNo.substring(0, jobBagNo.length() - 3); //扣掉batchNo
        	}
        }

        try {
        	JobBag jobbag = jobbagService.findById(jobBagNo);
        	String status = null;
        	if(jobbag != null)
        	   status = jobbag.getJobBagStatus();
        	if("ACCOUNTING_EP1".equals(status) || "ACCOUNTING_LOCKED".equals(status) || "ACCT_DN_GENERATED".equals(status)){
        		request.setAttribute("message", jobBagNo + "此工單已進入會計立帳程序，請先與會計部門協調後再刪除");  
    			return mapping.findForward("message");
        	}
        	if(jobbag != null){
        		HibernateSessionFactory.getSession().getTransaction().begin();
        		jobbag.setIsDeleted(true);
        		jobbagService.save(jobbag);
                HibernateSessionFactory.getSession().getTransaction().commit();
                request.setAttribute("message", jobBagNo + "標記刪除成功");
            	Employee employee = SessionUtil.getAccount(request.getSession());  
            	SysLog syslog = new SysLog();
        		syslog.setLogType("Del_Job_Bag");
        		syslog.setSubject("標記刪除工單");
        		syslog.setMessageBody(employee.getEmpNo() + ":" + employee.getUserId() + "標記刪除" + jobBagNo + "成功");
        	    syslog.setCreateDate(new Date());
        		syslogService.save(syslog);
        	}else{
        		request.setAttribute("message", "查無" + jobBagNo + "此工單，無法刪除");
        	}
        } catch (Exception e) {
            log.error("delete catch exception", e);
            HibernateSessionFactory.getSession().getTransaction().rollback();
        	request.setAttribute("message", e.getMessage());  
			return mapping.findForward("message");
        }
        return mapping.findForward("message");
    }    
    
    
    private ValueList getValueList(HttpServletRequest request, JobBagForm myForm, String entryKey) {
        Map param = new HashMap();

        String job_bag_no = myForm.getJobBagNo();
        if (null != job_bag_no && job_bag_no.length() >0  )
        	param.put("job_bag_no", job_bag_no);
        String idf_cust_no = myForm.getCustNo();
        if (null != idf_cust_no && idf_cust_no.length() >0   )
        	param.put("idf_cust_no", idf_cust_no);
        
        String job_code_no = myForm.getJobCodeNo();        
        if (job_code_no != null )
        	param.put("job_code_no", job_code_no);        
        
        String cycle_date = myForm.getCycleDate_form();        
        if (null != cycle_date && cycle_date.length() >0   )        	
        	param.put("cycle_date", cycle_date);
        
        String receive_date = myForm.getReceiveDate_form();      
        if (null != receive_date && receive_date.length() >0   )        
        	param.put("receive_date", receive_date);
        
        String afp_name = myForm.getAfpName();
        if (null != afp_name && !"".equals(afp_name.trim()))        
        	param.put("afp_name", afp_name);
        
        String hasDamage = myForm.getHasDamage_form();         
        if (null != hasDamage && hasDamage.equalsIgnoreCase("1"))
        	param.put("has_damage", " j.has_damage = 1 ");      
        if (null != hasDamage && hasDamage.equalsIgnoreCase("0"))
        	param.put("has_damage", " (j.has_damage is null or j.has_damage =0 ) ");        
        
        String isDamage = myForm.getIsDamage_form();         
        if (null != isDamage && isDamage.equalsIgnoreCase("1"))
        	param.put("is_damage", " j.is_damage = 1 ");      
        if (null != isDamage && isDamage.equalsIgnoreCase("0"))
        	param.put("is_damage", " (j.is_damage is null or j.is_damage =0 ) ");   
        String isCustConfirm = myForm.getIsCustConfirm();
        if (null != isCustConfirm && isCustConfirm.equalsIgnoreCase("1"))
        	param.put("isCustConfirm", " j.custConfirm = 1 ");      
        if (null != isCustConfirm && isCustConfirm.equalsIgnoreCase("0"))
        	param.put("isCustConfirm", " j.custConfirm = 0 or j.custConfirm is null ");      
        
        String isDeleted = myForm.getIsDeleted_form();         
        if (null != isDeleted && isDeleted.equalsIgnoreCase("1"))
        	param.put("is_deleted", " j.is_deleted = 1 " );      
        if (null != isDeleted && isDeleted.equalsIgnoreCase("0"))
        	param.put("is_deleted", " (j.is_deleted is null or j.is_deleted =0 )  ");       
        if (null == isDeleted )
        	param.put("is_deleted", " (j.is_deleted is null or j.is_deleted =0 )  ");         
        
        if(myForm.getCreate_date_begin() != null && !"".equals(myForm.getCreate_date_begin()))
        	param.put("create_date_begin", myForm.getCreate_date_begin());
        if(myForm.getCreate_date_end() != null && !"".equals(myForm.getCreate_date_end()))
        	param.put("create_date_end", myForm.getCreate_date_end());

        String isConvertResult = myForm.getIsConvertResult_form();         
        if (null != isConvertResult && isConvertResult.equalsIgnoreCase("1"))
        	param.put("is_convert_result", " j.is_convert_result = 1 ");      
        if (null != isConvertResult && isConvertResult.equalsIgnoreCase("0"))
        	param.put("is_convert_result", " (j.is_convert_result is null or j.is_convert_result=0 )  ");  
        
         
        
        String[] jobBagStatuses = myForm.getJobBagStatuses();
        String job_bag_status=""; 
        
        if (null != jobBagStatuses && jobBagStatuses.length >0) {
	        for (int i=0; i<jobBagStatuses.length; i++)  {
	        	if (i==0 ) 
	        		job_bag_status = "'" + jobBagStatuses[i] + "'";
	        	else
	        		job_bag_status = job_bag_status + ", '" + jobBagStatuses[i] + "'";
	        }
	    	param.put("job_bag_status", job_bag_status);   
        }
    
       
        
        ValueList valueList = valueListService.getValueList(request, entryKey, param);
        return valueList;
    }    
}