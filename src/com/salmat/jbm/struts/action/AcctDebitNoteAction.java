/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.salmat.jbm.struts.action;

import java.lang.reflect.InvocationTargetException;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.mlw.vlh.ValueList;
import net.mlw.vlh.ValueListInfo;
import net.mlw.vlh.web.ValueListRequestUtil;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.beanutils.ConvertUtils;
import org.apache.commons.beanutils.converters.DateConverter;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.action.DynaActionForm;
import org.apache.struts.actions.DispatchAction;
import org.hibernate.SQLQuery;
import org.hibernate.Transaction;
import org.nfunk.jep.JEP;

import com.salmat.jbm.bean.DebitNoteFullInfo;
import com.salmat.jbm.hibernate.*;
import com.salmat.jbm.service.AcctChargeItemService;
import com.salmat.jbm.service.AcctCustomerContractService;
import com.salmat.jbm.service.AcctDebitNoteService;
import com.salmat.jbm.service.AcctInvoiceService;
import com.salmat.jbm.service.AcctSectionJobCodeMappingService;
import com.salmat.jbm.service.AcctSectionReceiverMappingService;
import com.salmat.jbm.service.AcctSum1Service;
import com.salmat.jbm.service.AcctSum2Service;
import com.salmat.jbm.service.AcctSum3Service;
import com.salmat.jbm.service.CodeService;
import com.salmat.jbm.service.AcctSectionReceiverMappingService;
import com.salmat.jbm.service.CustomerReceiverService;
import com.salmat.jbm.service.CustomerService;
import com.salmat.jbm.service.EmployeeService;
import com.salmat.jbm.service.JobBagService;
import com.salmat.jbm.service.JobCodeService;
import com.salmat.jbm.service.ReturnInfoService;
import com.salmat.jbm.service.ValueListService;
import com.salmat.jbm.struts.form.*;
import com.salmat.jbm.hibernate.HibernateSessionFactory;
import com.painter.util.Global;
import com.painter.util.SessionUtil;
import com.painter.util.Util;

/**
 * MyEclipse Struts Creation date: 02-23-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action parameter="fid" validate="true"
 * @struts.action-forward name="init" path=".findUserAccount"
 */
public class AcctDebitNoteAction extends DispatchAction {
	/*
	 * Generated Methods
	 */
	private static final AcctCustomerContractService acctCustomerContractService = AcctCustomerContractService
			.getInstance();
	private static final AcctSectionReceiverMappingService sectionReceiverMappingService = AcctSectionReceiverMappingService
			.getInstance();
	private static final AcctInvoiceService acctInvoiceService = AcctInvoiceService
			.getInstance();
	private static final AcctSum1Service acctSum1Service = AcctSum1Service
			.getInstance();
	private static final AcctSum2Service acctSum2Service = AcctSum2Service
			.getInstance();
	private static final AcctSum3Service acctSum3Service = AcctSum3Service
			.getInstance();
	private static final AcctInvoiceService acctSInvoiceService = AcctInvoiceService
			.getInstance();
	private static final AcctChargeItemService acctChargeItemService = AcctChargeItemService
			.getInstance();
	private static final AcctDebitNoteService acctDebitNoteService = AcctDebitNoteService
			.getInstance();
	private static final CustomerService customerService = CustomerService
			.getInstance();
	private static final JobCodeService jobCodeService = JobCodeService
			.getInstance();
	private static final JobBagService jobBagService = JobBagService
			.getInstance();
	private static final CodeService codeService = CodeService.getInstance();
	private static ValueListService valueListService = ValueListService
			.getInstance();
	private static Logger log = Logger.getLogger(AcctDebitNoteAction.class);
	
	private static String[] specialJobs = Util.getString("acounting.ct.special.splite").split(",");

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	protected ActionForward unspecified(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		return mapping.findForward("homepage");
	}

	public ActionForward list(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionMessages messages = new ActionMessages();
		AcctDebitNoteForm myForm = (AcctDebitNoteForm) form;

		try {
			ValueList dataList = getValueListLike(request, myForm,
					"acctDebitNoteList");
			request.setAttribute("dataList", dataList);

			// 將dataList 放到session
			request.getSession().setAttribute("dataList", dataList);
			String backToListURL = request.getRequestURI() + "?"
					+ request.getQueryString();
			//request.getSession().setAttribute("backToListURL", backToListURL);
			request.setAttribute("backToListURL", URLEncoder.encode(backToListURL, "UTF-8"));
		} catch (Exception e) {
			log.error("", e);
			messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
					Global.MESSAGE_SYSTEMERROR_KEY));
			this.saveMessages(request, messages);
			return mapping.findForward(Global.FORWARD_INCLUDE_MESSAGE_KEY);
		}
		return mapping.findForward("list");
	}

	public ActionForward funbonReportList(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		ActionMessages messages = new ActionMessages();
		AcctDebitNoteForm myForm = (AcctDebitNoteForm) form;

		try {
			ValueList dataList = getValueList(request, myForm,
					"acctFubonReportList");
			request.setAttribute("dataList", dataList);

			// 將dataList 放到session
			request.getSession().setAttribute("dataList", dataList);
			String backToListURL = request.getRequestURI() + "?"
					+ request.getQueryString();
			//request.getSession().setAttribute("backToListURL", backToListURL);
			request.setAttribute("backToListURL", URLEncoder.encode(backToListURL, "UTF-8"));
		} catch (Exception e) {
			log.error("", e);
			messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
					Global.MESSAGE_SYSTEMERROR_KEY));
			this.saveMessages(request, messages);
			return mapping.findForward(Global.FORWARD_INCLUDE_MESSAGE_KEY);
		}
		return mapping.findForward("fubonReportList");
	}

	public ActionForward funbonReportSubmit(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		ActionMessages messages = new ActionMessages();
		AcctDebitNoteForm myForm = (AcctDebitNoteForm) form;

		try {
			String[] debitNos = myForm.getDebitNotesNos();

			if (null == debitNos) {
				request.setAttribute("message", "無勾選Debit Note");
				return mapping.findForward("message");
			}

			String debitNotesList = null;
			for (int i = 0; i < debitNos.length; i++) {
				if (null == debitNotesList)
					debitNotesList = "'" + debitNos[i] + "'";
				else
					debitNotesList = debitNotesList + ", '" + debitNos[i] + "'";
			}

			request.setAttribute("debitNotesList", debitNotesList);

		} catch (Exception e) {
			log.error("", e);
			HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("popup_message");
		}
		return mapping.findForward("funbonReportSubmit");
	}

	public ActionForward checkPKExist(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionMessages messages = new ActionMessages();
		AcctDebitNoteForm myForm = (AcctDebitNoteForm) form;

		try {
			String debitNo = myForm.getDebitNo();

			AcctDno acctDno = acctDebitNoteService.findById(debitNo);
			if (null == acctDno)
				request.setAttribute("result", "NON_EXIST");
			else
				request.setAttribute("result", "EXIST");
		} catch (Exception e) {
			log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
		}
		return mapping.findForward("jsonMessage");
	}

	// 複製新增
	public ActionForward saveAsNewInit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionMessages messages = new ActionMessages();
		AcctDebitNoteForm myForm = (AcctDebitNoteForm) form;

		try {
			String debitNo = myForm.getDebitNo();
			AcctDno acctDno = acctDebitNoteService.findById(debitNo);
			acctDno.setDebitNo(null);
			acctDno.setInDt(null);
			acctDno.setInNo(null);
			acctDno.setTax(0D);
			acctDno.setInDuedt(null);
			acctDno.setEp1(false);
			acctDno.setRefund(null);
			acctDno.setRefundamt(0D);
			request.setAttribute("ACTION_MODE", "SAVE_AS_NEW");
			request.setAttribute("acctDno", acctDno);

			DebitNoteFullInfo debitNoteFullInfo = new DebitNoteFullInfo();
			request.setAttribute("acctDno", acctDno);
			request.setAttribute("debitNoteFullInfo", debitNoteFullInfo);

		} catch (Exception e) {
			log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
		}
		return mapping.findForward("editInit");
	}

	public ActionForward addInit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionMessages messages = new ActionMessages();
		AcctDebitNoteForm myForm = (AcctDebitNoteForm) form;

		try {
			AcctDno acctDno = new AcctDno();
			DebitNoteFullInfo debitNoteFullInfo = new DebitNoteFullInfo();
			request.setAttribute("ACTION_MODE", "ADD");
			request.setAttribute("acctDno", acctDno);
			request.setAttribute("debitNoteFullInfo", debitNoteFullInfo);
		} catch (Exception e) {
			log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
		}
		return mapping.findForward("editInit");
	}

	public ActionForward addSubmit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		AcctDebitNoteForm myForm = (AcctDebitNoteForm) form;

		try {
			String debitNo = myForm.getDebitNo();
			String custNo = myForm.getCustNo();
			String cycleSdt = myForm.getCycleSdt();
			String cycleEdt = myForm.getCycleEdt();
			String desSdt = myForm.getDesSdt();
			String desEdt = myForm.getDesEdt();
			String inDt = myForm.getInDt();
			String inDuedt = myForm.getInDuedt();

			HibernateSessionFactory.getSession().clear();
			HibernateSessionFactory.getSession().getTransaction().begin();

			java.util.Date defaultValue = null;
			DateConverter converter = new DateConverter(defaultValue);
			ConvertUtils.register(converter, java.util.Date.class);
			AcctDno acctDno = new AcctDno();
			BeanUtils.copyProperties(acctDno, myForm);

			Customer customer = customerService.findById(custNo);
			acctDno.setDebitNo(debitNo);
			acctDno.setCustomer(customer);

			// 檢查客戶+Section 是否完整
			Boolean ret = sectionReceiverMappingService
					.checkCustomerSectionInfo(acctDno);
			if (!ret) {
				HibernateSessionFactory.getSession().getTransaction()
						.rollback();
				request.setAttribute("message",
						"請檢查 客戶 + section mapping 資料是否完整... ");
				return mapping.findForward("message");
			}

			if (null != cycleSdt && cycleSdt.length() > 0) {
				acctDno.setCycleSdt(cycleSdt);
			} else {
				acctDno.setCycleSdt(null);
			}
			if (null != cycleEdt && cycleEdt.length() > 0) {
				acctDno.setCycleEdt(cycleEdt);
			} else {
				acctDno.setCycleEdt(null);
			}
			if (null != desSdt && desSdt.length() > 0) {
				acctDno.setDesSdt(desSdt);
			} else {
				acctDno.setDesSdt(null);
			}
			if (null != desEdt && desEdt.length() > 0) {
				acctDno.setDesEdt(desEdt);
			} else {
				acctDno.setDesEdt(null);
			}

			if (null == inDt || inDt.length() == 0) {
				acctDno.setInDt(null);
			}
			if (null == inDuedt || inDuedt.length() == 0) {
				acctDno.setInDuedt(null);
			}
            acctDno.setModifiedDate(new SimpleDateFormat("yyyy-MM-dd").format(new Date()));
			acctDebitNoteService.save(acctDno);
			HibernateSessionFactory.getSession().getTransaction().commit();
			request.setAttribute("message", "新增成功");

			// 引到至編輯頁面
			String purpose = "'','DISPLAY_ONLY'";
			DebitNoteFullInfo debitNoteFullInfo = acctDebitNoteService
					.getDebitNoteFullInfo(acctDno, purpose);

			request.setAttribute("ACTION_MODE", "EDIT");
			request.setAttribute("acctDno", acctDno);
			request.setAttribute("debitNoteFullInfo", debitNoteFullInfo);
			return mapping.findForward("editInit");

		} catch (Exception e) {
			log.error("", e);
			HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
		}

	}

	public ActionForward editInit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionMessages messages = new ActionMessages();
		AcctDebitNoteForm myForm = (AcctDebitNoteForm) form;

		try {
			HibernateSessionFactory.getSession().clear();
			String debitNo = myForm.getDebitNo();

			AcctDno acctDno = acctDebitNoteService.findById(debitNo);
			String purpose = "'','DISPLAY_ONLY'";
			DebitNoteFullInfo debitNoteFullInfo = acctDebitNoteService
					.getDebitNoteFullInfo(acctDno, purpose);
			if (debitNoteFullInfo == null) {
				request.setAttribute("message", "尚未設定section與工單對應");
				return mapping.findForward("message");
			}
			request.setAttribute("ACTION_MODE", "EDIT");
			request.setAttribute("acctDno", acctDno);
			request.setAttribute("debitNoteFullInfo", debitNoteFullInfo);
		} catch (Exception e) {
			log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
		}
		return mapping.findForward("editInit");
	}

	public ActionForward editSubmit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		AcctDebitNoteForm myForm = (AcctDebitNoteForm) form;

		try {
			String debitNo = myForm.getDebitNo();
			String custNo = myForm.getCustNo();
			String section = myForm.getSection();
			if(section != null)
				section = section.trim();
			String cycleSdt = myForm.getCycleSdt();
			String cycleEdt = myForm.getCycleEdt();
			String desSdt = myForm.getDesSdt();
			String desEdt = myForm.getDesEdt();
			String inNo = myForm.getInNo();
			String inDt = myForm.getInDt();
			String inDuedt = myForm.getInDuedt();
			Integer tax = myForm.getTax();
			
			Integer amountIncludeTax = myForm.getAmountIncludeTax();
			Integer amountExcludeTax = myForm.getAmountExcludeTax();
			Integer digitsLen = myForm.getDigitsLen();
			String refund = myForm.getRefund() == null ? null : myForm.getRefund().trim();
			Double refundAmt = myForm.getRefundamt();
			Boolean acctsShow = "1".equals(myForm.getAcctsShow());
			Boolean pagesShow = "1".equals(myForm.getPagesShow()); 
			Boolean sheetsShow = "1".equals(myForm.getSheetsShow());
			Short pageBreak = myForm.getPageBreak() ;
			Boolean displayOriAnymore = "1".equals(myForm.getDisplayOriAnymore());

			HibernateSessionFactory.getSession().clear();
			HibernateSessionFactory.getSession().getTransaction().begin();

			AcctDno acctDno = acctDebitNoteService.findById(debitNo);

			// 檢查客戶+Section 是否完整
			Boolean ret = sectionReceiverMappingService
					.checkCustomerSectionInfo(acctDno);
			if (!ret) {
				HibernateSessionFactory.getSession().getTransaction()
						.rollback();
				request.setAttribute("message",
						"請檢查 客戶 + section mapping 資料是否完整... ");
				return mapping.findForward("message");
			}

			if (null != cycleSdt && cycleSdt.length() > 0) {
				acctDno.setCycleSdt(cycleSdt);
			} else {
				acctDno.setCycleSdt(null);
			}
			if (null != cycleEdt && cycleEdt.length() > 0) {
				acctDno.setCycleEdt(cycleEdt);
			} else {
				acctDno.setCycleEdt(null);
			}
			if (null != desSdt && desSdt.length() > 0) {
				acctDno.setDesSdt(desSdt);
			} else {
				acctDno.setDesSdt(null);
			}
			if (null != desEdt && desEdt.length() > 0) {
				acctDno.setDesEdt(desEdt);
			} else {
				acctDno.setDesEdt(null);
			}
			if (null != inNo && inNo.length() > 0) {
				acctDno.setInNo(inNo);
			}
			if (null != inDt && inDt.length() > 0) {
				acctDno.setInDt(inDt);
			}
			if (null != inDuedt && inDuedt.length() > 0) {
				acctDno.setInDuedt(inDuedt);
			}

			acctDno.setTax(new Double(tax));
			acctDno.setAmountExcludeTax(amountExcludeTax);
			acctDno.setAmountIncludeTax(amountIncludeTax);
			acctDno.setDigitsLen(digitsLen);
			acctDno.setRefund(refund);
			acctDno.setRefundamt(refundAmt);
			acctDno.setSection(section);
			acctDno.setAcctsShow(acctsShow);
			acctDno.setPagesShow(pagesShow);
			acctDno.setSheetsShow(sheetsShow);
			acctDno.setPageBreak(pageBreak);
			acctDno.setDisplayOriAnymore(displayOriAnymore);
			acctDno.setModifiedDate(new SimpleDateFormat("yyyy-MM-dd").format(new Date()));
			acctDebitNoteService.save(acctDno);
			HibernateSessionFactory.getSession().getTransaction().commit();
			request.setAttribute("message", "修改成功");

			// 引到至編輯頁面
			String purpose = "'','DISPLAY_ONLY'";
			DebitNoteFullInfo debitNoteFullInfo = acctDebitNoteService
					.getDebitNoteFullInfo(acctDno, purpose);
			

			request.setAttribute("ACTION_MODE", "EDIT");
			request.setAttribute("acctDno", acctDno);
			request.setAttribute("debitNoteFullInfo", debitNoteFullInfo);
			return mapping.findForward("editInit");
		} catch (Exception e) {
			log.error("", e);
			HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("message");
		}
	}

	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		AcctDebitNoteForm myForm = (AcctDebitNoteForm) form;
		String debitNo = myForm.getDebitNo();

		try {
			
			AcctDno acctDno = acctDebitNoteService.findById(debitNo);

			if (null != acctDno.getEp1Confirm() && acctDno.getEp1Confirm()) {
				request.setAttribute("message", "Debit Note 已經確認轉入EP1, 不能刪除");
				return mapping.findForward("message");
			}
		    if(acctDno.getCustomer() != null && acctDno.getCustomer().getCustNo().equalsIgnoreCase("CT")){
		    	acctDebitNoteService.ctUnlockJobBagStatus(debitNo);
		    } else if (acctDno.getCustomer() != null){
		    	acctDebitNoteService.unlockJobBagStatus(debitNo);
		    }
		    HibernateSessionFactory.getSession().getTransaction().begin();
			acctDebitNoteService.delete(acctDno);
			HibernateSessionFactory.getSession().getTransaction().commit();
			request.setAttribute("message", "刪除成功");

		} catch (Exception e) {
			log.error("delete catch exception", e);
			HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "資料被引用, 不能刪除");
			return mapping.findForward("message");
		}
		return mapping.findForward("message");
	}

	public ActionForward exportToEP1(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		AcctDebitNoteForm myForm = (AcctDebitNoteForm) form;
		String debitNo = myForm.getDebitNo();

		try {
			// 儲存 轉出 EP1 Flag
			HibernateSessionFactory.getSession().clear();
			HibernateSessionFactory.getSession().getTransaction().begin();

			AcctDno acctDno = acctDebitNoteService.findById(debitNo);
			// 檢查 Debit Note 狀態
			/*
			 * if (null== acctDno.getProcessdt() || (null!=
			 * acctDno.getProcessdt() && acctDno.getProcessdt().length() ==0) )
			 * { request.setAttribute("message", "結帳步驟 1  尚未完成!!"); return
			 * mapping.findForward("message"); }
			 * 
			 * if (null== acctDno.getProcessdt2() || (null!=
			 * acctDno.getProcessdt2() && acctDno.getProcessdt2().length() ==0)
			 * ) { request.setAttribute("message", "結帳步驟 4  尚未完成!!"); return
			 * mapping.findForward("message"); }
			 * 
			 * if (null== acctDno.getProcessdt3() || (null!=
			 * acctDno.getProcessdt3() && acctDno.getProcessdt3().length() ==0)
			 * ) { request.setAttribute("message", "結帳步驟7  尚未完成!!"); return
			 * mapping.findForward("message"); }
			 */
			if (null == acctDno.getInNo()
					|| (null != acctDno.getInNo() && acctDno.getInNo().length() == 0)) {
				request.setAttribute("message", "Invoice No  尚未輸入!!");
				return mapping.findForward("message");
			}

			if (null == acctDno.getInDt()
					|| (null != acctDno.getInDt() && acctDno.getInDt().length() == 0)) {
				request.setAttribute("message", "Invoice Date  尚未輸入!!");
				return mapping.findForward("message");
			}

			if (null == acctDno.getInDuedt()
					|| (null != acctDno.getInDuedt() && acctDno.getInDuedt()
							.length() == 0)) {
				request.setAttribute("message", "Invoice Due Date  尚未輸入!!");
				return mapping.findForward("message");
			}
/*
			if (null == acctDno.getTax()
					|| (null != acctDno.getTax() && acctDno.getTax().compareTo(
							0.0) == 0)) {
				request.setAttribute("message", "TAX  尚未輸入!!");
				return mapping.findForward("message");
			}
*/
			if (null != acctDno.getEp1Confirm() && acctDno.getEp1Confirm()) {
				request.setAttribute("message", "Debit Note 已經確認轉入EP1, 不能再匯出");
				return mapping.findForward("message");
			}

			acctDno.setEp1(true);
			acctDno.setModifiedDate(new SimpleDateFormat("yyyy-MM-dd").format(new Date()));
			acctDebitNoteService.save(acctDno);
			request.setAttribute("acctDno", acctDno);
			HibernateSessionFactory.getSession().getTransaction().commit();

		} catch (Exception e) {
			return mapping.findForward("message");
		}
		return mapping.findForward("exportToEP1");
	}

	public ActionForward batchExportToEP1(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		AcctDebitNoteForm myForm = (AcctDebitNoteForm) form;
		String[] debitNos = myForm.getDebitNotesNos();
		if (debitNos == null) {
			request.setAttribute("message", "請勾選欲轉出ep1的Debit Note");
			return mapping.findForward("message");
		} else {
			List<AcctDno> acctDnos = new ArrayList<AcctDno>();
            List<String[]> notExportToEP1s = new ArrayList<String[]> ();
			try {
				for (String debitNo : debitNos) {
					String [] notExportToEP1Dno = new String [6];
					boolean notExport = false;
					// 儲存 轉出 EP1 Flag
					HibernateSessionFactory.getSession().clear();
					AcctDno acctDno = acctDebitNoteService.findById(debitNo);
					
					if (null == acctDno.getInNo()
							|| (null != acctDno.getInNo() && acctDno.getInNo()
									.length() == 0)) {
						request.setAttribute("message", debitNo
								+ "Invoice No  尚未輸入!!");
						notExport = true;
						notExportToEP1Dno[0] = debitNo;
						notExportToEP1Dno[1] = "Invoice No  尚未輸入!!";
					}

					if (null == acctDno.getInDt()
							|| (null != acctDno.getInDt() && acctDno.getInDt()
									.length() == 0)) {
						request.setAttribute("message", debitNo
								+ "Invoice Date  尚未輸入!!");
						notExport = true;
						notExportToEP1Dno[0] = debitNo;
						notExportToEP1Dno[2] = "Invoice Date  尚未輸入!!";
					}

					if (null == acctDno.getInDuedt()
							|| (null != acctDno.getInDuedt() && acctDno
									.getInDuedt().length() == 0)) {
						request.setAttribute("message", debitNo
								+ "Invoice Due Date  尚未輸入!!");
						notExport = true;
						notExportToEP1Dno[0] = debitNo;
						notExportToEP1Dno[3] = "Invoice Due Date  尚未輸入!!";
					}

					if (null == acctDno.getTax()
							//|| (null != acctDno.getTax() && acctDno.getTax().compareTo(0.0) == 0)
							) {
						request.setAttribute("message", debitNo + "TAX  尚未輸入!!");
						notExport = true;
						notExportToEP1Dno[0] = debitNo;
						notExportToEP1Dno[4] = "Tax  尚未輸入!!";
					}

					if (null != acctDno.getEp1Confirm()
							&& acctDno.getEp1Confirm()) {
						request.setAttribute("message", debitNo
								+ "Debit Note 已經確認轉入EP1, 不能再匯出");
						notExport = true;
						notExportToEP1Dno[0] = debitNo;
						notExportToEP1Dno[5] = "Debit Note 已經確認轉入EP1, 不能再匯出";
					}
					
					
					if(!notExport)
					   acctDnos.add(acctDno);
					else
					   notExportToEP1s.add(notExportToEP1Dno);
						
				}
				List<String[]> fileList = new ArrayList<String[]>();
				// 儲存 轉出 EP1 Flag
				HibernateSessionFactory.getSession().clear();
				HibernateSessionFactory.getSession().getTransaction().begin();
				for(AcctDno acctDno: acctDnos){
					acctDno.setEp1(true);
					acctDno.setModifiedDate(new SimpleDateFormat("yyyy-MM-dd").format(new Date()));
					acctDebitNoteService.save(acctDno);
					String[] fileNames = acctDebitNoteService.exportEp1(acctDno);
					String[] returnArray = new String [4];
					returnArray [0] = acctDno.getDebitNo();
					returnArray [1] = fileNames[0];
					returnArray [2] = fileNames[1];
					returnArray [3] = fileNames[2];
					fileList.add(returnArray);					
				}
				HibernateSessionFactory.getSession().getTransaction().commit();
				request.setAttribute("notExport", notExportToEP1s);
				request.setAttribute("fileList", fileList);
			} catch (Exception e) {
				log.error("", e);
				e.printStackTrace();
				request.setAttribute("message", "系統失敗 ");
				return mapping.findForward("message");
			}finally{
				if(HibernateSessionFactory.getSession().isOpen())
				   HibernateSessionFactory.closeSession();
			}
			return mapping.findForward("batchExportToEp1");
			
		}
	}

	public ActionForward confirmToEP1(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		AcctDebitNoteForm myForm = (AcctDebitNoteForm) form;
		String debitNo = myForm.getDebitNo();

		try {
			// 儲存 轉出 EP1 Flag
			HibernateSessionFactory.getSession().clear();
			HibernateSessionFactory.getSession().getTransaction().begin();

			AcctDno acctDno = acctDebitNoteService.findById(debitNo);

			if (null == acctDno.getEp1()
					|| (null != acctDno.getEp1() && !acctDno.getEp1())) {
				request.setAttribute("message", "Debit Note 尚未匯出EP1, 不能確認 ");
				return mapping.findForward("message");
			}

			if (null != acctDno.getEp1Confirm() && acctDno.getEp1Confirm()) {
				request.setAttribute("message", "Debit Note 已經確認轉入EP1, 不能再匯出");
				return mapping.findForward("message");
			}

			acctDno.setEp1Confirm(true);
			acctDno.setModifiedDate(new SimpleDateFormat("yyyy-MM-dd").format(new Date()));
			acctDebitNoteService.save(acctDno);
			acctDebitNoteService.jobBagConfirmToEP1(acctDno);			
			request.setAttribute("acctDno", acctDno);
			HibernateSessionFactory.getSession().getTransaction().commit();
			request.setAttribute("message",
					"確認轉出至EP1, 此Debit Note已被系統鎖定, 無法再修改, 且 無法再轉出EP1");
			return mapping.findForward("message");

		} catch (Exception e) {
			return mapping.findForward("message");
		}

	}

	public ActionForward step1(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionMessages messages = new ActionMessages();
		AcctDebitNoteForm myForm = (AcctDebitNoteForm) form;

		try {
			
			String debitNo = myForm.getDebitNo();
			String extractMode = myForm.getExtractMode(); // ALL, NON_LOCKED
			String custNo = myForm.getCustNo();
			boolean confirmSubmit = "true".equals(request.getParameter("confirmSubmit"))? true : false;
			
			//如果是All要解鎖
			//confirmSubmit=true時代表是從confirmProcess.jsp頁面返回，已經解鎖過了
			if("ALL".equalsIgnoreCase(extractMode) && !confirmSubmit){
				if("CT".equalsIgnoreCase(custNo)){
					acctDebitNoteService.ctUnlockJobBagStatus(debitNo);
				}else{
				    acctDebitNoteService.unlockJobBagStatus(debitNo);
				}
				
			}			
			
			HibernateSessionFactory.getSession().clear();			
			AcctDno acctDno = acctDebitNoteService.findById(debitNo);
			if(acctDno == null){
			   request.setAttribute("message", "查無此Debit Note:" + debitNo + " ，請查明此Debit note是否已被新增或已被刪除？" );
			   return mapping.findForward("popup_message");
			}
			// 從Debit Note 找到該區間的工單清單
			List jobbagList = acctDebitNoteService.findJobBagListByDebitNote(
					acctDno, extractMode);
			List<JobBag> jobbagListCT = new ArrayList<JobBag>();
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			Date cycleDateEnd = null;
			Date cycleDateBegin = null;
			Date processSdt = null;
			Date processEdt = null;
			
			//超過一千支工單時叫出提醒頁
			if(!confirmSubmit && jobbagList != null && jobbagList.size() > 1000){
				request.setAttribute("message", "你所挑選的區間內，共選取了" + jobbagList.size() + "支工單，請問是否要繼續？"  );
				//acctDebitNote.do?fid=step1&debitNo=<%=acctDno.getDebitNo()%>&extractMode=ALL&custNo=<%=custNo%>&backToListURL=${backToListURL}'
				
				request.setAttribute("params", "acctDebitNote.do?fid=step1&debitNo=" + debitNo + "&extractMode=" + extractMode + "&custNo=" + custNo + "&confirmSubmit=true");
				return mapping.findForward("confirmProcess");
			}

			for (int i = 0; i < jobbagList.size(); i++) {
				// 工單狀態 壓為 ACCOUNTING_LOCKED, 會計立帳作業
				JobBag jobBag = (JobBag) jobbagList.get(i);
				
				if (cycleDateEnd == null || jobBag.getCycleDate().compareTo(cycleDateEnd) > 0)
					cycleDateEnd = jobBag.getCycleDate();

				if (cycleDateBegin == null || jobBag.getCycleDate().compareTo(cycleDateBegin) < 0)
					cycleDateBegin = jobBag.getCycleDate();
				
				if(jobBag.getCompletedDate() != null && (processEdt == null || jobBag.getCompletedDate().compareTo(processEdt) > 0)){
					processEdt = jobBag.getCompletedDate();
				}
				if(jobBag.getCompletedDate() != null &&(processSdt == null || jobBag.getCompletedDate().compareTo(processSdt) < 0)){
					processSdt = jobBag.getCompletedDate();
				}
				/*
				 * jobBag.setJobBagStatus("ACCOUNTING_LOCKED");
				 * jobBagService.save(jobBag);
				 */
				JobBag jobBagCT = new JobBag();
				JobBag _jobBagCT = (JobBag) jobbagList.get(i);
				BeanUtils.copyProperties(jobBagCT, _jobBagCT);
				jobbagListCT.add(jobBagCT);
			}
			

			// 若客戶編號 'CT', 要特殊處理 拆帳
			if (acctDno.getCustomer().getCustNo().equalsIgnoreCase("CT")) {
				jobbagList = specialSplitJobCodeRuleForCT(jobbagListCT);
				
				if (null == jobbagList) {
					request.setAttribute("message", "處理  CT 拆帳作業, 系統失敗 ");
					return mapping.findForward("popup_message");
				}
			}

			// 最低收費項目
			Integer minimalChargeItemId = Integer.parseInt(Util
					.getString("accounting.minimalChargeItemId"));
			List<JobBag> itemChargeNotBuiltList = new ArrayList<JobBag>();
			
			HibernateSessionFactory.getSession().getTransaction().begin();
			int counter = 0;
			for (int i = 0; i < jobbagList.size(); i++) {
				counter ++;
				// 尋找每張工單的收費項目清單
				JobBag jobBag = (JobBag) jobbagList.get(i);

				List jobCodeChargeItemList = acctDebitNoteService
						.findJobCodeChargeItemListByJobBag(jobBag);

				if (jobCodeChargeItemList != null
						&& jobCodeChargeItemList.size() > 0) {
					//之前的狀態
					String status = jobBag.getJobBagStatus();
					String prevStatus = jobBag.getPrevStatus();
					jobBag.setJobBagStatus("ACCOUNTING_LOCKED");
					
					//如果是在下列這兩個情況時，prevstatus會變成ACCOUNTING_EP1 || ACCT_DN_GENERATED
					//unlock時狀態會錯誤，所以要先擋掉(企業 邏輯是不會發生，但需預防)
					if( "ACCOUNTING_EP1".equals(status) || "ACCT_DN_GENERATED".equals(status) || ("ACCOUNTING_LOCKED".equals(prevStatus) && "ACCOUNTING_LOCKED".equals(status))){
						//當prevstatus為下列狀態時，回復成completed_lg
						if("ACCOUNTING_EP1".equals(prevStatus) || "ACCT_DN_GENERATED".equals(prevStatus) || "ACCOUNTING_LOCKED".equals(prevStatus)){
							jobBag.setPrevStatus("COMPLETED_LG");
						}else{
							jobBag.setPrevStatus(prevStatus);
						}
					}
					
					jobBagService.save(jobBag);

				} else {
					itemChargeNotBuiltList.add(jobBag);
				}

				for (int j = 0; j < jobCodeChargeItemList.size(); j++) {

					Integer sumQty = 0;
					Integer sumQtyOri = 0;
					AcctJobCodeChargeItem jobCodeChargeItem = (AcctJobCodeChargeItem) jobCodeChargeItemList
							.get(j);

					// 該客戶收費項目的合約價格資訊
					AcctCustomerContract acctCustomerContract = jobCodeChargeItem
							.getAcctCustomerContract();

					// 收費項目
					AcctChargeItem acctChargeItem = jobCodeChargeItem
							.getAcctChargeItem();
					String lpPcode = "";

					// 計算每張工單收費項目 數量
					if (acctChargeItem.getCalculatType()
							.equalsIgnoreCase("SUM")) {						
						if (null != acctChargeItem.getAccounts()
								&& acctChargeItem.getAccounts())
							sumQty = sumQty + jobBag.getAccounts();
						if (null != acctChargeItem.getPages()
								&& acctChargeItem.getPages())
							sumQty = sumQty + jobBag.getPages();
						if (null != acctChargeItem.getSheets()
								&& acctChargeItem.getSheets())
							sumQty = sumQty + jobBag.getSheets();
						if (null != acctChargeItem.getFeeder2()
								&& acctChargeItem.getFeeder2())
							sumQty = sumQty + jobBag.getFeeder2();
						if (null != acctChargeItem.getFeeder3()
								&& acctChargeItem.getFeeder3())
							sumQty = sumQty + jobBag.getFeeder3();
						if (null != acctChargeItem.getFeeder4()
								&& acctChargeItem.getFeeder4())
							sumQty = sumQty + jobBag.getFeeder4();
						if (null != acctChargeItem.getFeeder5()
								&& acctChargeItem.getFeeder5())
							sumQty = sumQty + jobBag.getFeeder5();
						if (null != acctChargeItem.getTray1()
								&& acctChargeItem.getTray1()){
							sumQty = sumQty + jobBag.getTray1();
							if(lpPcode != null && lpPcode.length() > 0 && !lpPcode.endsWith(",") )
								lpPcode += ",";
							lpPcode += (jobBag.getLpPcode1() == null)? "" : jobBag.getLpPcode1().trim();							
						}
						if (null != acctChargeItem.getTray2()
								&& acctChargeItem.getTray2()){
							sumQty = sumQty + jobBag.getTray2();
							if(lpPcode != null && lpPcode.length() > 0 && !lpPcode.endsWith(",") )
								lpPcode += ",";
							lpPcode += (jobBag.getLpPcode2() == null)? "" : jobBag.getLpPcode2().trim();							
						}
						if (null != acctChargeItem.getTray3()
								&& acctChargeItem.getTray3()){
							sumQty = sumQty + jobBag.getTray3();
							if(lpPcode != null && lpPcode.length() > 0 && !lpPcode.endsWith(",") )
								lpPcode += ",";
							lpPcode += (jobBag.getLpPcode3() == null)? "" : jobBag.getLpPcode3().trim();
							
						}
						if (null != acctChargeItem.getTray4()
								&& acctChargeItem.getTray4()){
							sumQty = sumQty + jobBag.getTray4();
							if(lpPcode != null && lpPcode.length() > 0 && !lpPcode.endsWith(",") )
								lpPcode += ",";
							lpPcode += (jobBag.getLpPcode4() == null)? "" : jobBag.getLpPcode4().trim();
						}
						if (null != acctChargeItem.getTray5()
								&& acctChargeItem.getTray5()){
							sumQty = sumQty + (jobBag.getTray5() == null ? 0 : jobBag.getTray5());
							if(lpPcode != null && lpPcode.length() > 0 && !lpPcode.endsWith(",") )
								lpPcode += ",";
							lpPcode += (jobBag.getLpPcode5() == null)? "" : jobBag.getLpPcode5().trim();
						}
						if (null != acctChargeItem.getTray6()
								&& acctChargeItem.getTray6()){
							sumQty = sumQty + (jobBag.getTray6() == null? 0 : jobBag.getTray6());
							if(lpPcode != null && lpPcode.length() > 0 && !lpPcode.endsWith(",") )
								lpPcode += ",";
							lpPcode += (jobBag.getLpPcode6() == null)? "" : jobBag.getLpPcode6().trim();
						}
						if (null != acctChargeItem.getTray7()
								&& acctChargeItem.getTray7()){
							sumQty = sumQty + (jobBag.getTray7() == null? 0 : jobBag.getTray7());
							if(lpPcode != null && lpPcode.length() > 0 && !lpPcode.endsWith(",") )
								lpPcode += ",";
							lpPcode += (jobBag.getLpPcode7() == null)? "" : jobBag.getLpPcode7().trim();
						}
						if (null != acctChargeItem.getTray8()
								&& acctChargeItem.getTray8()){
							sumQty = sumQty + (jobBag.getTray8() == null? 0 : jobBag.getTray8());
							if(lpPcode != null && lpPcode.length() > 0 && !lpPcode.endsWith(",") )
								lpPcode += ",";
							lpPcode += (jobBag.getLpPcode8() == null)? "" : jobBag.getLpPcode8().trim();
						}
						if (null != acctChargeItem.getP1accounts()
								&& acctChargeItem.getP1accounts()
								&& null != jobBag.getP1accounts())
							sumQty = sumQty + jobBag.getP1accounts();
						if (null != acctChargeItem.getP2accounts()
								&& acctChargeItem.getP2accounts()
								&& null != jobBag.getP2accounts())
							sumQty = sumQty + jobBag.getP2accounts();
						if (null != acctChargeItem.getP3accounts()
								&& acctChargeItem.getP3accounts()
								&& null != jobBag.getP3accounts())
							sumQty = sumQty + jobBag.getP3accounts();
						if (null != acctChargeItem.getP4accounts()
								&& acctChargeItem.getP4accounts()
								&& null != jobBag.getP4accounts())
							sumQty = sumQty + jobBag.getP4accounts();
						if (null != acctChargeItem.getP5accounts()
								&& acctChargeItem.getP5accounts()
								&& null != jobBag.getP5accounts())
							sumQty = sumQty + jobBag.getP5accounts();
						if (null != acctChargeItem.getP6accounts()
								&& acctChargeItem.getP6accounts()
								&& null != jobBag.getP6accounts())
							sumQty = sumQty + jobBag.getP6accounts();
						if (null != acctChargeItem.getPxaccounts()
								&& acctChargeItem.getPxaccounts()
								&& null != jobBag.getPxaccounts())
							sumQty = sumQty + jobBag.getPxaccounts();
						if (null != acctChargeItem.getCtaccounts()
								&& acctChargeItem.getCtaccounts()
								&& null != jobBag.getCtAcctsOri())
							sumQty = sumQty + jobBag.getCtAcctsOri();
						if (null != acctChargeItem.getPages2()
								&& acctChargeItem.getPages2()
								&& null != jobBag.getPages2())
							sumQty = sumQty + jobBag.getPages2();
						if (null != acctChargeItem.getPages3()
								&& acctChargeItem.getPages3()
								&& null != jobBag.getPages3())
							sumQty = sumQty + jobBag.getPages3();
						if (null != acctChargeItem.getNotSent()
								&& acctChargeItem.getNotSent()){
							sumQty = sumQty + (jobBag.getNotSent() == null? 0 : jobBag.getNotSent());							
						}
						

						
						String itemNameTw = acctChargeItem.getItemNameTw();
						
						// 若客戶編號 'CT', 要特殊處理 拆帳
						/*
						if (acctDno.getCustomer().getCustNo()
								.equalsIgnoreCase("CT")) {
							if (itemNameTw != null
									&& itemNameTw
											.indexOf("Citi card -On Demond ") >= 0) {
								if (null != acctChargeItem.getPages2()
										&& acctChargeItem.getPages2()
										&& null != jobBag.getVPages2Ori()) {
									sumQty = sumQty + jobBag.getVPages2Ori(); //有值的話直接取
								} else if (null != acctChargeItem.getPages2()
										&& acctChargeItem.getPages2()
										&& null == jobBag.getVPages2Ori()) {
									sumQty = (int) (sumQty + Math.round((jobBag
											.getPages2() / 1.05))); // 沒有值的話，不得已的算法
																	// ，除回來
								}
								if (null != acctChargeItem.getPages3()
										&& acctChargeItem.getPages3()
										&& null != jobBag.getVPages3Ori()) {
									sumQty = sumQty + jobBag.getVPages3Ori(); //有值的話直接取
								} else if (null != acctChargeItem.getPages3()
										&& acctChargeItem.getPages3()
										&& null == jobBag.getVPages3Ori()) {
									sumQty = (int) (sumQty + Math.round((jobBag
											.getPages3() / 1.05))); // 沒有值的話，不得已的算法
								}
							} else {
								if (null != acctChargeItem.getPages2()
										&& acctChargeItem.getPages2()
										&& null != jobBag.getPages2())
									sumQty = sumQty + jobBag.getPages2();
								if (null != acctChargeItem.getPages3()
										&& acctChargeItem.getPages3()
										&& null != jobBag.getPages3())
									sumQty = sumQty + jobBag.getPages3();
							}
						}
						*/
						
						sumQtyOri = sumQty;

					} else if (acctChargeItem.getCalculatType()
							.equalsIgnoreCase("EXPRESSION")) {

						JEP jep = new JEP();
						String expr = acctChargeItem.getExpression(); // get
																		// Expression
						jep.addVariable("$accounts", jobBag.getAccounts() == null ? 0 : jobBag.getAccounts());
						jep.addVariable("$pages",  jobBag.getPages() == null ? 0 : jobBag.getPages());
						jep.addVariable("$pages2", jobBag.getPages2() == null ? 0 : jobBag.getPages2());
						jep.addVariable("$pages3", jobBag.getPages3() == null ? 0 : jobBag.getPages3());
						jep.addVariable("$sheets", jobBag.getSheets()  == null ? 0 : jobBag.getSheets() );
						jep.addVariable("$feeder2", jobBag.getFeeder2() == null ? 0 : jobBag.getFeeder2());
						jep.addVariable("$feeder3", jobBag.getFeeder3() == null ? 0 : jobBag.getFeeder3());
						jep.addVariable("$feeder4", jobBag.getFeeder4() == null ? 0 : jobBag.getFeeder4());
						jep.addVariable("$feeder5", jobBag.getFeeder5() == null ? 0 : jobBag.getFeeder5());
						jep.addVariable("$tray1", jobBag.getTray1() == null ? 0 : jobBag.getTray1());
						jep.addVariable("$tray2", jobBag.getTray2() == null ? 0 : jobBag.getTray2());
						jep.addVariable("$tray3", jobBag.getTray3() == null ? 0 : jobBag.getTray3());
						jep.addVariable("$tray4", jobBag.getTray4() == null ? 0 : jobBag.getTray4());
						jep.addVariable("$tray5", jobBag.getTray5() == null ? 0 : jobBag.getTray5());
						jep.addVariable("$tray6", jobBag.getTray6() == null ? 0 : jobBag.getTray6());
						jep.addVariable("$tray7", jobBag.getTray7() == null ? 0 : jobBag.getTray7());
						jep.addVariable("$tray8", jobBag.getTray8() == null ? 0 : jobBag.getTray8());
						jep.addVariable("$p1accounts", jobBag.getP1accounts() == null ? 0 : jobBag.getP1accounts());
						jep.addVariable("$p2accounts", jobBag.getP2accounts() == null ? 0 : jobBag.getP2accounts());
						jep.addVariable("$p3accounts", jobBag.getP3accounts() == null ? 0 : jobBag.getP3accounts());
						jep.addVariable("$p4accounts", jobBag.getP4accounts() == null ? 0 : jobBag.getP4accounts());
						jep.addVariable("$p5accounts", jobBag.getP5accounts() == null ? 0 : jobBag.getP5accounts());
						jep.addVariable("$p6accounts", jobBag.getP6accounts() == null ? 0 : jobBag.getP6accounts());
						jep.addVariable("$pxaccounts", jobBag.getPxaccounts() == null ? 0 : jobBag.getPxaccounts());
						jep.addVariable("$ctaccounts", jobBag.getCtAcctsOri() == null ? 0 : jobBag.getCtAcctsOri());
						jep.addVariable("$ctaccounts", jobBag.getCtAcctsOri() == null ? 0 : jobBag.getCtAcctsOri());
						jep.addVariable("$N", jobBag.getNotSent() == null ? 0 : jobBag.getNotSent());
						try {
							jep.addStandardFunctions();
							jep.parseExpression(expr);                            
							double value = jep.getValue();
							sumQty = (int) Math.ceil(value); // 無條件進位
							
							//計算結果負值時設為零
							if(acctChargeItem.getZeroExpress() != null && acctChargeItem.getZeroExpress() && sumQty < 0)
								sumQty = 0;
							   
							if(expr.indexOf("$tray1") >= 0){
								if(lpPcode != null && lpPcode.length() > 0 && !lpPcode.endsWith(",") )
									lpPcode += ",";
								lpPcode += (jobBag.getLpPcode1() == null)? "" : jobBag.getLpPcode1();
							}
							if(expr.indexOf("$tray2") >= 0){
								if(lpPcode != null && lpPcode.length() > 0 && !lpPcode.endsWith(",") )
									lpPcode += ",";
								lpPcode += (jobBag.getLpPcode2() == null)? "" : jobBag.getLpPcode2();
							}
							if(expr.indexOf("$tray3") >= 0){
								if(lpPcode != null && lpPcode.length() > 0 && !lpPcode.endsWith(",") )
									lpPcode += ",";
								lpPcode += (jobBag.getLpPcode3() == null)? "" : jobBag.getLpPcode3();
							}
							if(expr.indexOf("$tray4") >= 0){
								if(lpPcode != null && lpPcode.length() > 0 && !lpPcode.endsWith(",") )
									lpPcode += ",";
								lpPcode += (jobBag.getLpPcode4() == null)? "" : jobBag.getLpPcode4();
							}
							if(expr.indexOf("$tray5") >= 0){
								if(lpPcode != null && lpPcode.length() > 0 && !lpPcode.endsWith(",") )
									lpPcode += ",";
								lpPcode += (jobBag.getLpPcode5() == null)? "" : jobBag.getLpPcode5();
							}
							if(expr.indexOf("$tray6") >= 0){
								if(lpPcode != null && lpPcode.length() > 0 && !lpPcode.endsWith(",") )
									lpPcode += ",";
								lpPcode += (jobBag.getLpPcode6() == null)? "" : jobBag.getLpPcode6();
							}
							if(expr.indexOf("$tray7") >= 0){
								if(lpPcode != null && lpPcode.length() > 0 && !lpPcode.endsWith(",") )
									lpPcode += ",";
								lpPcode += (jobBag.getLpPcode7() == null)? "" : jobBag.getLpPcode7();
							}
							if(expr.indexOf("$tray8") >= 0){
								if(lpPcode != null && lpPcode.length() > 0 && !lpPcode.endsWith(",") )
									lpPcode += ",";
								lpPcode += (jobBag.getLpPcode8() == null)? "" : jobBag.getLpPcode8();
							}
							sumQtyOri = sumQty;
						} catch (Exception e) {
							log.error("", e);

						}

					} else if (acctChargeItem.getCalculatType()
							.equalsIgnoreCase("FIXED")) {
						sumQty = acctChargeItem.getFixedValue();
						sumQtyOri = sumQty;
					}
					// 列印次數調整
					if (null != jobCodeChargeItem.getPrintTimes())
						sumQty = sumQty * jobCodeChargeItem.getPrintTimes();

					// 收費係數調整, 數量 四捨五入
					if (null != jobCodeChargeItem.getAdjustmentPercent()) {
						sumQty = (int) Math.round(sumQty
								* jobCodeChargeItem.getAdjustmentPercent());
					}

					// 將結果寫入 sum1
					AcctSum1 acctSum1 = new AcctSum1();
					acctSum1.setCustomer(jobBag.getCustomer());
					acctSum1.setAcctDno(acctDno);
					// job_code 轉換
					// 若job_bag 對應之job_code 有 main_job_code, 表示要合併工單計算,
					// sum1/sum2 之job_code 存 main_job_code
					// 若沒有以job_code 計算 , sum1/sum2 之job_code 存 job_code
					JobCode jobCode = null;

					if (null != jobBag.getJobCode().getMainJobCodeNo()
							&& jobBag.getJobCode().getMainJobCodeNo().length() > 0) {
						// 有指定合併工單
						jobCode = jobCodeService.findById(jobBag.getJobCode()
								.getMainJobCodeNo());
						acctSum1.setIdfJobCodeNo(jobCode.getJobCodeNo());

						if (null != jobBag.getJobCode().getMainJobCodeProgNm()
								&& jobBag.getJobCode().getMainJobCodeProgNm()
										.length() > 0) {
							acctSum1.setProgNm(jobBag.getJobCode()
									.getMainJobCodeProgNm()); // 有指定活動名稱

						} else {
							acctSum1.setProgNm(jobCode.getProgNm()); // 無指定 活動名稱

						}
					} else {
						// 無指定合併工單
						jobCode = jobBag.getJobCode();
						acctSum1.setIdfJobCodeNo(jobCode.getJobCodeNo());
						acctSum1.setProgNm(jobCode.getProgNm());
					}

					acctSum1.setIdfJobBagNo(jobBag.getJobBagNo());

					if (null != jobCode && null != jobCode.getCostCenter()
							&& jobCode.getCostCenter().length() > 0){
						acctSum1.setCostCenter(jobCode.getCostCenter());
						acctSum1.setAutoCostCenter(false);
					}else {
						// 若沒設定 cost_center, 以 cycleDate 為cost_center
						String costCenter = new SimpleDateFormat("MMdd")
								.format(jobBag.getCycleDate());
						acctSum1.setCostCenter(costCenter);
						acctSum1.setAutoCostCenter(true);
					}
					acctSum1.setAcctChargeItem(acctChargeItem);
					acctSum1.setAcctCustomerContract(acctCustomerContract);
					acctSum1.setItemName(acctChargeItem.getItemName());
					acctSum1.setItemNameTw(acctChargeItem.getItemNameTw());
					if (null != acctChargeItem.getCodeByTitle())
						acctSum1.setTitle(acctChargeItem.getCodeByTitle()
								.getCodeValueTw());
					if (null != acctChargeItem.getCodeBySubTitle())
						acctSum1.setSubTitle(acctChargeItem.getCodeBySubTitle()
								.getCodeValueTw());
					acctSum1.setEp1AccountCode(acctChargeItem
							.getEp1AccountCode());
					acctSum1.setCalculatType(acctChargeItem.getCalculatType());
					acctSum1.setUnitPrice(acctCustomerContract.getUnitPrice());
					acctSum1.setSumQty(sumQty);

					acctSum1.setSumQtyOri(sumQtyOri);
					acctSum1.setCycleDate(jobBag.getCycleDate());
					if(lpPcode != null && lpPcode.startsWith(",")){
						lpPcode = lpPcode.substring(1);
					}
					if(lpPcode != null && lpPcode.endsWith(",")){
						lpPcode = lpPcode.substring(0, lpPcode.length() - 1);
					}
				    acctSum1.setLpPcode(lpPcode);
					acctSum1Service.save(acctSum1);

					// 根據 比率拆帳 處理
					// 有SplitJobCodeNo 及 SplitJobCodePercent >0 才要處理
					Integer splitSumQty1 = 0;
					Integer splitSumQty2 = 0;
					Integer splitSumQty3 = 0;
					Integer splitSumQty4 = 0;
					JobCode _jobCode = jobCodeService.findById(acctSum1
							.getIdfJobCodeNo());
					if (null != _jobCode.getSplitJobCodeNo1()
							&& _jobCode.getSplitJobCodeNo1().length() > 0
							&& _jobCode.getSplitJobCodePercent1()
									.compareTo(0.0) > 0) {
						AcctSum1 acctSum11 = new AcctSum1();
						BeanUtils.copyProperties(acctSum11, acctSum1);
						// 覆蓋至拆帳工單樣本
						JobCode jobCode11 = jobCodeService.findById(_jobCode
								.getSplitJobCodeNo1());
						String newJobBagNo11 = jobCode11.getJobCodeNo()
								+ acctSum1.getIdfJobBagNo();
						acctSum11.setIdfJobBagNo(newJobBagNo11);
						acctSum11.setIdfJobCodeNo(jobCode11.getJobCodeNo());
						splitSumQty1 = (int) Math.round(acctSum1.getSumQty()
								* _jobCode.getSplitJobCodePercent1()); // 數量根據比率攤提,
																		// 取整數
						acctSum11.setSumQty(splitSumQty1);

						if (null != jobCode11
								&& null != jobCode11.getCostCenter()
								&& jobCode11.getCostCenter().length() > 0){
							acctSum11.setCostCenter(jobCode11.getCostCenter());
						    acctSum11.setAutoCostCenter(false);
						}else {
							// 若沒設定 cost_center, 以 cycleDate 為cost_center
							String costCenter = new SimpleDateFormat("MMdd")
									.format(acctSum11.getCycleDate());
							acctSum11.setCostCenter(costCenter);
							acctSum11.setAutoCostCenter(true);
						}
						acctSum11.setProgNm(jobCode11.getProgNm());
						acctSum11.setIsMinimalCharge(null);
						acctSum1Service.save(acctSum11);
					}
					if (null != _jobCode.getSplitJobCodeNo2()
							&& _jobCode.getSplitJobCodeNo2().length() > 0
							&& _jobCode.getSplitJobCodePercent1()
									.compareTo(0.0) > 0) {
						AcctSum1 acctSum22 = new AcctSum1();
						BeanUtils.copyProperties(acctSum22, acctSum1);
						// 覆蓋至拆帳工單樣本
						JobCode jobCode22 = jobCodeService.findById(_jobCode
								.getSplitJobCodeNo2());
						acctSum22.setIdfJobCodeNo(jobCode22.getJobCodeNo());
						String newJobBagNo22 = jobCode22.getJobCodeNo()
								+ acctSum1.getIdfJobBagNo();
						acctSum22.setIdfJobBagNo(newJobBagNo22);
						splitSumQty2 = (int) Math.round(acctSum1.getSumQty()
								* _jobCode.getSplitJobCodePercent2()); // 數量根據比率攤提,
																		// 取整數
						acctSum22.setSumQty(splitSumQty2);
						if (null != jobCode22
								&& null != jobCode22.getCostCenter()
								&& jobCode22.getCostCenter().length() > 0){
							acctSum22.setCostCenter(jobCode22.getCostCenter());
							acctSum22.setAutoCostCenter(false);
						}else {
							// 若沒設定 cost_center, 以 cycleDate 為cost_center
							String costCenter = new SimpleDateFormat("MMdd")
									.format(acctSum22.getCycleDate());
							acctSum22.setCostCenter(costCenter);
							acctSum22.setAutoCostCenter(true);
						}
						acctSum22.setProgNm(jobCode22.getProgNm());
						acctSum22.setIsMinimalCharge(null);
						acctSum1Service.save(acctSum22);
					}
					if (null != _jobCode.getSplitJobCodeNo3()
							&& _jobCode.getSplitJobCodeNo3().length() > 0
							&& _jobCode.getSplitJobCodePercent1()
									.compareTo(0.0) > 0) {
						AcctSum1 acctSum33 = new AcctSum1();
						BeanUtils.copyProperties(acctSum33, acctSum1);
						// 覆蓋至拆帳工單樣本
						JobCode jobCode33 = jobCodeService.findById(_jobCode
								.getSplitJobCodeNo3());
						acctSum33.setIdfJobCodeNo(jobCode33.getJobCodeNo());
						String newJobBagNo33 = jobCode33.getJobCodeNo()
								+ acctSum1.getIdfJobBagNo();
						acctSum33.setIdfJobBagNo(newJobBagNo33);
						splitSumQty3 = (int) Math.round(acctSum1.getSumQty()
								* _jobCode.getSplitJobCodePercent3()); // 數量根據比率攤提,
																		// 取整數
						acctSum33.setSumQty(splitSumQty3);
						if (null != jobCode33
								&& null != jobCode33.getCostCenter()
								&& jobCode33.getCostCenter().length() > 0){
							acctSum33.setCostCenter(jobCode33.getCostCenter());
						    acctSum33.setAutoCostCenter(false);
					    }else {
							// 若沒設定 cost_center, 以 cycleDate 為cost_center
							String costCenter = new SimpleDateFormat("MMdd")
									.format(acctSum33.getCycleDate());
							acctSum33.setCostCenter(costCenter);
						}
						acctSum33.setProgNm(jobCode33.getProgNm());
						acctSum33.setIsMinimalCharge(null);
						acctSum1Service.save(acctSum33);
						acctSum33.setAutoCostCenter(true);
					}
					if (null != _jobCode.getSplitJobCodeNo4()
							&& _jobCode.getSplitJobCodeNo4().length() > 0
							&& _jobCode.getSplitJobCodePercent1()
									.compareTo(0.0) > 0) {
						AcctSum1 acctSum44 = new AcctSum1();
						BeanUtils.copyProperties(acctSum44, acctSum1);
						// 覆蓋至拆帳工單樣本
						JobCode jobCode44 = jobCodeService.findById(_jobCode
								.getSplitJobCodeNo4());
						acctSum44.setIdfJobCodeNo(jobCode44.getJobCodeNo());
						String newJobBagNo44 = jobCode44.getJobCodeNo()
								+ acctSum1.getIdfJobBagNo();
						acctSum44.setIdfJobBagNo(newJobBagNo44);
						splitSumQty4 = (int) Math.round(acctSum1.getSumQty()
								* _jobCode.getSplitJobCodePercent4()); // 數量根據比率攤提,
																		// 取整數
						acctSum44.setSumQty(splitSumQty4);
						if (null != jobCode44
								&& null != jobCode44.getCostCenter()
								&& jobCode44.getCostCenter().length() > 0){
							acctSum44.setCostCenter(jobCode44.getCostCenter());
							acctSum44.setAutoCostCenter(false);
						}else {
							// 若沒設定 cost_center, 以 cycleDate 為cost_center
							String costCenter = new SimpleDateFormat("MMdd")
									.format(acctSum44.getCycleDate());
							acctSum44.setCostCenter(costCenter);
							acctSum44.setAutoCostCenter(true);
						}
						acctSum44.setProgNm(jobCode44.getProgNm());
						acctSum44.setIsMinimalCharge(null);
						acctSum1Service.save(acctSum44);
					}

					// 若 splitSumQty1~4 合計 != 0, 表示有拆帳, 拆帳後, 原工單數量 為 原始數量 -
					// splitSumQty1~4
					if (splitSumQty1 + splitSumQty2 + splitSumQty3
							+ splitSumQty4 > 0) {
						Integer netSumQty = acctSum1.getSumQty()
								- (splitSumQty1 + splitSumQty2 + splitSumQty3 + splitSumQty4);
						acctSum1.setSumQty(netSumQty);
						acctSum1Service.save(acctSum1);
					}
					// end 工單拆帳處理
				}
				//一千支submit一次，並清空sesson cache，以增加速度
				if(confirmSubmit && counter > 1000){
					HibernateSessionFactory.getSession().getTransaction().commit();
					counter = 0;
					HibernateSessionFactory.getSession().clear();
					HibernateSessionFactory.getSession().getTransaction().begin();
				}
			}

			String NowTime = new SimpleDateFormat("yyyy-MM-dd")
					.format(new Date());
			acctDno.setProcessdt(NowTime);
			/*
			 * Date cycleDateEnd = null;
			Date cycleDateBegin = null;
			Date processSdt = null;
			Date processEdt = null;
			 若沒輸入 Cycle Date , 則以job_bag list 中的 cycle date 代入
			 */
			DebitNoteFullInfo dnFullInfo = new DebitNoteFullInfo();
			if((acctDno.getDesSdt() == null || acctDno.getDesSdt().equals("")) && processSdt != null){
				acctDno.setDesSdt(sdf.format(processSdt));
			}
			if((acctDno.getDesEdt() == null || acctDno.getDesEdt().equals("")) && processEdt != null){
				acctDno.setDesEdt(sdf.format(processEdt));
			}
			if((acctDno.getCycleSdt() == null || acctDno.getCycleSdt().equals("")) && cycleDateBegin != null){
				acctDno.setCycleSdt(sdf.format(cycleDateBegin));
			}
			if((acctDno.getCycleEdt() == null || acctDno.getCycleEdt().equals("")) && cycleDateEnd != null){
				acctDno.setCycleEdt(sdf.format(cycleDateEnd));
				
			}
			dnFullInfo.setDesSdt(acctDno.getDesSdt());
			dnFullInfo.setDesEdt(acctDno.getDesEdt());
			dnFullInfo.setCycleSdt(acctDno.getCycleSdt());
			dnFullInfo.setCycleEdt(acctDno.getCycleEdt());
			
			request.setAttribute("debitNoteFullInfo", dnFullInfo);
			acctDno.setModifiedDate(new SimpleDateFormat("yyyy-MM-dd").format(new Date()));
			acctDebitNoteService.save(acctDno);

			HibernateSessionFactory.getSession().getTransaction().commit();
			
			if (jobbagList == null || jobbagList.size() == 0)
				request.setAttribute("message", "所挑選的區間蒐尋不到工單");
			else if (itemChargeNotBuiltList.size() == 0)
				request.setAttribute("message", "Step 1.由JBM攫取資料 成功 ");
			else {
				String message = "";
				for (JobBag noItemsJobBag : itemChargeNotBuiltList) {
					message += noItemsJobBag.getJobBagNo() + ",";

				}
				request.setAttribute("message", message + "以上工單均無設定收費資料，或已超過合約截止期限，故不加入計算");
			}
			
			return mapping.findForward("popup_message");
		} catch (Exception e) {
			log.error("", e);
			HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("popup_message");
		}finally{
			if(HibernateSessionFactory.getSession().isOpen())
				   HibernateSessionFactory.closeSession();
		}

	}

	// CT 拆帳的特殊規則
	// job_code 有設定拆帳的虛擬工單
	// 工單編號1 != '' && 拆帳比率1 =0,
	// 當 pages.log / accounts.log >=2, 則拆帳
	private List specialSplitJobCodeRuleForCT(List jobbagList) {
		// TODO Auto-generated method stub
		List retList = new ArrayList();
		List newJobbagList = new ArrayList();
		 

		try {
			for (int i = 0; i < jobbagList.size(); i++) {
				JobBag jobBag = (JobBag) jobbagList.get(i);
				if (null != jobBag.getJobCode().getSplitJobCodeNo1()
						&& jobBag.getJobCode().getSplitJobCodeNo1().length() > 0
						&& jobBag.getJobCode().getSplitJobCodePercent1()
								.compareTo(0.0) == 0 // splitJobCodePercent1
														// ==0, 表示採用 非比例拆帳
				) {
					int pages = jobBag.getPages() == null ? 0 : jobBag.getPages();
					
					//accounts是CtAcctsOri而非mailpacks
					int accounts = jobBag.getCtAcctsOri() == null ? 0 : jobBag.getCtAcctsOri();
					//當抓不到accounts時，以mailpacks計算
					if(accounts == 0){
						accounts = jobBag.getAccounts() == null ? 0 : jobBag.getAccounts();
					}
					if (pages >= accounts * 2 
							&& pages > 1 && (jobBag.getCtSpecialSplite() == null || !jobBag.getCtSpecialSplite())) {
						jobBag.setCtSpecialSplite(true); // CT非比例拆帳設為是
						JobBag newJobBag = new JobBag();
						java.util.Date defaultValue = null;
						DateConverter converter = new DateConverter(
								defaultValue);
						ConvertUtils.register(converter, java.util.Date.class);
						BeanUtils.copyProperties(newJobBag, jobBag);
						JobCode vJobCode = jobCodeService.findById(jobBag
								.getJobCode().getSplitJobCodeNo1());

						// 置換工單號碼
						// 虛擬工單號碼 = 虛擬樣本工單 + 原工單號碼
						String newJobBagNo = vJobCode.getJobCodeNo()
								+ jobBag.getJobBagNo();

						newJobBag.setJobBagNo(newJobBagNo);
						newJobBag.setJobCode(vJobCode);
                        newJobBag.setCtAcctsOri(0);
						newJobBag.setJobBagSplites(null); //虛擬工單此欄位不是true，也不是false，而是null

						// 把原始數據留起來，以備unlock時倒回去
						if (jobBag.getPagesOri() == null
								|| jobBag.getPagesOri() == 0) {
							jobBag.setPagesOri(jobBag.getPages()); // 把原始數據放到Original裡
						}
						if (jobBag.getPages2Ori() == null
								|| jobBag.getPages2Ori() == 0) {
							jobBag.setPages2Ori(jobBag.getPages2()); // 把原始數據放到Original裡
						}
						if (jobBag.getPages3Ori() == null
								|| jobBag.getPages3Ori() == 0) {
							jobBag.setPages3Ori(jobBag.getPages3()); // 把原始數據放到Original裡
						}

						// . accounts(原) = mailPacks
						// . pages(原) = pages.log – ctAcctsOri
						// . accounts(虛) = 0
						// . pages(虛) = ctAcctsOri
						// . pages2(原) = pages(原)*0.83 (調整係數)*1.37
						// . pages3(原) = 0
						// . 只有一頁的話不拆帳
						// 新合約不再乘1.37
						if (jobBag.getPages() > 1) {
							jobBag.setPages(jobBag.getPages()
									- jobBag.getCtAcctsOri());
							//Integer newPages2 = (int) Math.round(jobBag
							//		.getPages() * 0.83 * 1.37);
							Integer newPages2 = (int) Math.round(jobBag
											.getPages() * 0.83 );
							jobBag.setPages2(newPages2);
							jobBag.setPages3(0);

							newJobBag.setAccounts(0);
							newJobBag.setPages(jobBag.getCtAcctsOri());

						} else {
							newJobBag.setAccounts(0);
							newJobBag.setPages(0);
						}

						// . pages2(虛) =sum (Z_accounts.log) * 1.05 Z_......C
						// //Z開頭, C 結尾
						// . pages3(虛) =sum (X_accounts.log) * 1.05 X_.....C
						// //Z開頭, C 結尾
						// getVPages2/getVPages3 於 轉入log 時, 就預先埋入
						// 新合約不再乘1.05
						newJobBag.setPages2(jobBag.getVPages2());
						newJobBag.setPages3(jobBag.getVPages3());
						newJobBag.setCtSpecialSplite(null); // CT非比例拆帳虛擬工單設為null

						newJobBag.setVPages2Ori(jobBag.getVPages2Ori());
						newJobBag.setVPages3Ori(jobBag.getVPages3Ori());
						newJobbagList.add(newJobBag);
					} else {
						jobBag.setCtSpecialSplite(false); // CT非比例拆帳設為否
					}
				} else {
					//檢查不拆出虛擬工單，但仍需拆帳的job
					for(String jobCodeNo : specialJobs){
						if (jobBag.getJobBagNo().indexOf(jobCodeNo) >= 0){
						   if(jobBag.getCtSpecialSplite() == null || !jobBag.getCtSpecialSplite()){
							
							  jobBag.setPagesOri(jobBag.getPages());
							
							  jobBag.setPages2Ori(jobBag.getPages2());
							  jobBag.setPages3Ori(jobBag.getPages3());
							  //新合約不再乘1.37
							  //Integer newPages2 = (int) Math.round(jobBag
								//	.getPages() * 0.83 * 1.37);
							  Integer newPages2 = (int) Math.round(jobBag
										   .getPages() * 0.83 );
							
							  jobBag.setPages2(newPages2);
							  
							  //XDB_10CT            206    211    206    199    0      0      2011/12/11,08:32:06           206    0      0      A
							  //XDC_10CT            5730   5746   5730   5571   0      0      2011/12/11,08:32:30           5730   0      0      A
							  //X_DXX_10B           1436   1442   1436   1413   0      0      2011/12/11,08:32:38           0      0      0      C
							  //ondemand formating(X_DXX)的值會塞在pages3，進行特殊公式 * 1.05
							  //if(jobBag.getPages3()!= null )
								  //jobBag.setPages3((int)Math.round(jobBag.getPages3() * 1.05));
							  
							  //新合約不再乘1.05
							  if(jobBag.getPages3()!= null )
								  jobBag.setPages3(jobBag.getPages3());
							  
							  jobBag.setCtSpecialSplite(true);	
						   }
						   jobBag.setVPages2Ori(jobBag.getPages());
						   jobBag.setVPages3Ori(jobBag.getPages());
							
						}
					}
					if(jobBag.getCtSpecialSplite() == null || !jobBag.getCtSpecialSplite())
					   jobBag.setCtSpecialSplite(false); // CT非比例拆帳設為否
				}
			}

			// 合併兩個jobBagList
			for (int i = 0; i < jobbagList.size(); i++) {
				JobBag jobBag = (JobBag) jobbagList.get(i);
				retList.add(jobBag);
			}

			for (int i = 0; i < newJobbagList.size(); i++) {
				JobBag jobBag = (JobBag) newJobbagList.get(i);
				retList.add(jobBag);
			}
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		} catch (InvocationTargetException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}

		return retList;
	}

	public ActionForward step1_1_MergeDebitNote(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		ActionMessages messages = new ActionMessages();
		AcctDebitNoteForm myForm = (AcctDebitNoteForm) form;

		try {
			String debitNo = myForm.getDebitNo();
			AcctDno acctDno = acctDebitNoteService.findById(debitNo);
			request.setAttribute("acctDno", acctDno);
		} catch (Exception e) {
			log.error("", e);
			messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
					Global.MESSAGE_SYSTEMERROR_KEY));
			this.saveMessages(request, messages);
			return mapping.findForward(Global.FORWARD_INCLUDE_MESSAGE_KEY);
		}
		return mapping.findForward("step1_1_MergeDebitNote");
	}

	public ActionForward step1_1_MergeDebitNoteSubmit(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		ActionMessages messages = new ActionMessages();
		AcctDebitNoteForm myForm = (AcctDebitNoteForm) form;

		try {
			HibernateSessionFactory.getSession().clear();
			HibernateSessionFactory.getSession().getTransaction().begin();
			String debitNo = myForm.getDebitNo();
			String mergedDebitNo = myForm.getMergedDebitNo();
			Boolean ret = acctDebitNoteService.MergedDebitNo(debitNo,
					mergedDebitNo);
			if (!ret) {
				HibernateSessionFactory.getSession().getTransaction()
						.rollback();
				request.setAttribute("message", "Step 1.1 合併Debit Note 失敗 ");
				return mapping.findForward("popup_message");
			}
			HibernateSessionFactory.getSession().getTransaction().commit();
			request.setAttribute("message", "Step 1.1 合併Debit Note 成功 ");
			return mapping.findForward("popup_message");

		} catch (Exception e) {
			HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "Step 1.1 合併Debit Note 失敗 ");
			return mapping.findForward("popup_message");
		}

	}

	public ActionForward step2_list(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionMessages messages = new ActionMessages();
		AcctDebitNoteForm myForm = (AcctDebitNoteForm) form;

		try {
			String debitNo = myForm.getDebitNo();
			AcctDno acctDno = acctDebitNoteService.findById(debitNo);
			request.setAttribute("acctDno", acctDno);

			ValueList dataList = getValueList(request, myForm,
					"acctDebitNoteStep2List");
			request.setAttribute("dataList", dataList);

			// 將dataList 放到session
			request.getSession().setAttribute("dataList", dataList);
			String backToListURL = request.getRequestURI() + "?"
					+ request.getQueryString();
			//request.getSession().setAttribute("backToListURL", backToListURL);
			request.setAttribute("backToListURL", URLEncoder.encode(backToListURL, "UTF-8"));
		} catch (Exception e) {
			log.error("", e);
			messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
					Global.MESSAGE_SYSTEMERROR_KEY));
			this.saveMessages(request, messages);
			return mapping.findForward(Global.FORWARD_INCLUDE_MESSAGE_KEY);
		}
		return mapping.findForward("step2_list");
	}

	public ActionForward step2_editInit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionMessages messages = new ActionMessages();
		AcctDebitNoteForm myForm = (AcctDebitNoteForm) form;

		try {
			String jobBagNo = myForm.getJobBagNo();

			JobBag jobBag = jobBagService.findById(jobBagNo);

			List acctSum1List = acctSum1Service.findByJobBag(jobBagNo);
			if (null != acctSum1List && acctSum1List.size() > 0) {
				AcctSum1 acctSum1 = (AcctSum1) acctSum1List.get(0);
				AcctDno acctDno = acctSum1.getAcctDno();

				// 找出客戶 + 今天 合約上的收費項目跟價格
				String NowTime = new SimpleDateFormat("yyyy-MM-dd")
						.format(new Date());				
				List acctCustomerContractList = null;
				// 虛擬工單
				if (null == jobBag) {
					jobBag = new JobBag();
					jobBag.setCustomer(acctSum1.getCustomer());
					jobBag.setJobBagNo(jobBagNo);
					jobBag.setProgNm(acctSum1.getProgNm());
					jobBag.setCycleDate(acctSum1.getCycleDate());
					acctCustomerContractList = acctCustomerContractService
	                 .getAcctCustomerContractListInDebiteNote(acctDno, acctDno.getCustomer()
		   	             .getCustNo(), NowTime);
					
				}else{
				   //List acctCustomerContractList = acctCustomerContractService
  				   //	.getAcctCustomerContractList( acctDno.getCustomer()
					   //		.getCustNo(), NowTime);
			       acctCustomerContractList = acctCustomerContractService
			                 .getAcctCustomerContractListInDebiteNote(acctDno, acctDno.getCustomer()
				   	             .getCustNo(), NowTime, jobBagNo);
				}



				request.setAttribute("ACTION_MODE", "EDIT");
				request.setAttribute("acctDno", acctDno);
				request.setAttribute("jobBag", jobBag);
				request.setAttribute("acctSum1List", acctSum1List); // 工單收費相目基礎資料
				request.setAttribute("acctCustomerContractList",
						acctCustomerContractList); // 客戶合約上的收費資訊

			}

		} catch (Exception e) {
			log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("popup_message");
		}
		return mapping.findForward("step2_edit");
	}

	public ActionForward step2_editSubmit(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		AcctDebitNoteForm myForm = (AcctDebitNoteForm) form;

		try {
			String debitNo = myForm.getDebitNo();
			AcctDno acctDno = acctDebitNoteService.findById(debitNo);
			String jobBagNo = myForm.getJobBagNo();
			JobBag jobBag = jobBagService.findById(jobBagNo);

			// 虛擬工單
			if (null == jobBag) {
				List acctSum1List = acctSum1Service.findByJobBag(jobBagNo);
				if (null != acctSum1List && acctSum1List.size() > 0) {
					AcctSum1 acctSum1 = (AcctSum1) acctSum1List.get(0);
					jobBag = new JobBag();
					jobBag.setCustomer(acctDno.getCustomer());
					jobBag.setJobBagNo(jobBagNo);
					jobBag.setCycleDate(acctSum1.getCycleDate());
					jobBag.setProgNm(acctSum1.getProgNm());
					// jobBag.setCycleDate(acctSum1.getCycleDate());
					JobCode _jobCode = jobCodeService.findById(acctSum1
							.getIdfJobCodeNo());
					jobBag.setJobCode(_jobCode);
				}

			}

			HibernateSessionFactory.getSession().clear();
			HibernateSessionFactory.getSession().getTransaction().begin();

			Integer[] sum1Ids = myForm.getSum1Ids();
			Integer[] chargeItemIds = myForm.getChargeItemIds();
			Integer[] acctCustomerContractIds = myForm
					.getAcctCustomerContractIds();
			Double[] unitPrices = myForm.getUnitPrices();
			Double[] sumQties = myForm.getSumQties();

			for (int i = 0; i < acctCustomerContractIds.length; i++) {
				AcctCustomerContract acctCustomerContract = acctCustomerContractService
						.findById(acctCustomerContractIds[i]);
				// 新增處理收費項目
				if (sumQties[i].compareTo(0.0) > 0
						&& sum1Ids[i].compareTo(0) == 0) {
					AcctSum1 acctSum1 = new AcctSum1();
					acctSum1.setCustomer(acctDno.getCustomer());
					acctSum1.setAcctDno(acctDno);
					JobCode jobCode = null;
					if (null != jobBag.getJobCode().getMainJobCodeNo()
							&& jobBag.getJobCode().getMainJobCodeNo().length() > 0) {
						// 有指定合併工單
						jobCode = jobCodeService.findById(jobBag.getJobCode()
								.getMainJobCodeNo());
						acctSum1.setIdfJobCodeNo(jobCode.getJobCodeNo());

						if (null != jobBag.getJobCode().getMainJobCodeProgNm()
								&& jobBag.getJobCode().getMainJobCodeProgNm()
										.length() > 0)
							acctSum1.setProgNm(jobBag.getJobCode()
									.getMainJobCodeProgNm()); // 有指定活動名稱
						else
							acctSum1.setProgNm(jobCode.getProgNm()); // 無指定 活動名稱
					} else {
						// 無指定合併工單
						jobCode = jobBag.getJobCode();
						acctSum1.setIdfJobCodeNo(jobCode.getJobCodeNo());
						acctSum1.setProgNm(jobCode.getProgNm());
					}

					acctSum1.setIdfJobBagNo(jobBag.getJobBagNo());
					acctSum1.setCycleDate(jobBag.getCycleDate());

					if (null != jobCode && null != jobCode.getCostCenter()
							&& jobCode.getCostCenter().length() > 0){
						acctSum1.setCostCenter(jobCode.getCostCenter());
						acctSum1.setAutoCostCenter(false);
					}else {
						// 若沒設定 cost_center, 以 cycleDate 為cost_center
						String costCenter = new SimpleDateFormat("MMdd")
								.format(jobBag.getCycleDate());
						acctSum1.setCostCenter(costCenter);
						acctSum1.setAutoCostCenter(true);
					}

					acctSum1.setAcctChargeItem(acctCustomerContract
							.getAcctChargeItem());
					acctSum1.setAcctCustomerContract(acctCustomerContract);
					acctSum1.setItemName(acctCustomerContract
							.getAcctChargeItem().getItemName());
					acctSum1.setItemNameTw(acctCustomerContract
							.getAcctChargeItem().getItemNameTw());
					acctSum1.setTitle(acctCustomerContract.getAcctChargeItem()
							.getCodeByTitle().getCodeValueTw());
					acctSum1.setSubTitle(acctCustomerContract
							.getAcctChargeItem().getCodeBySubTitle()
							.getCodeValueTw());
					acctSum1.setEp1AccountCode(acctCustomerContract
							.getAcctChargeItem().getEp1AccountCode());
					acctSum1.setCalculatType(acctCustomerContract
							.getAcctChargeItem().getCalculatType());
					acctSum1.setUnitPrice(unitPrices[i]);
					acctSum1.setSumQty(sumQties[i].intValue());
					acctSum1Service.save(acctSum1);
				} else if (sumQties[i].compareTo(0.0) > 0
						&& sum1Ids[i].compareTo(0) > 0) { // 修改
					AcctSum1 acctSum1 = acctSum1Service.findById(sum1Ids[i]);
					acctSum1.setUnitPrice(unitPrices[i]);
					acctSum1.setSumQty(sumQties[i].intValue());
					acctSum1Service.save(acctSum1);
				} else if (sumQties[i].compareTo(0.0) == 0
						&& sum1Ids[i].compareTo(0) > 0) { // 刪除
					AcctSum1 acctSum1 = acctSum1Service.findById(sum1Ids[i]);
					acctSum1Service.delete(acctSum1);
				}

			}
			HibernateSessionFactory.getSession().getTransaction().commit();
			request.setAttribute("message", "修改成功");

			// 轉到編輯頁面
			List acctSum1List = acctSum1Service.findByJobBag(jobBagNo);
			if (null != acctSum1List && acctSum1List.size() > 0) {
				AcctSum1 acctSum1 = (AcctSum1) acctSum1List.get(0);

				// 找出客戶 + 今天 合約上的收費項目跟價格
				String NowTime = new SimpleDateFormat("yyyy-MM-dd")
						.format(new Date());
				List acctCustomerContractList = acctCustomerContractService
						.getAcctCustomerContractList(acctDno.getCustomer()
								.getCustNo(), NowTime);

				request.setAttribute("ACTION_MODE", "EDIT");
				request.setAttribute("acctDno", acctDno);
				request.setAttribute("jobBag", jobBag);
				request.setAttribute("acctSum1List", acctSum1List); // 工單收費相目基礎資料
				request.setAttribute("acctCustomerContractList",
						acctCustomerContractList); // 客戶合約上的收費資訊

				return mapping.findForward("step2_edit");
			}

			return mapping.findForward("step2_edit");
		} catch (Exception e) {
			log.error("", e);
			HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("popup_message");
		}
	}

	public ActionForward step2_addInit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionMessages messages = new ActionMessages();
		AcctDebitNoteForm myForm = (AcctDebitNoteForm) form;

		try {
			String debitNo = myForm.getDebitNo();
			AcctDno acctDno = acctDebitNoteService.findById(debitNo);
			request.setAttribute("acctDno", acctDno);
			request.setAttribute("ACTION_MODE", "ADD");
		} catch (Exception e) {
			log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("popup_message");
		}
		return mapping.findForward("step2_addInit");
	}

	public ActionForward step2_addSubmit(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		AcctDebitNoteForm myForm = (AcctDebitNoteForm) form;

		try {
			HibernateSessionFactory.getSession().clear();
			HibernateSessionFactory.getSession().getTransaction().begin();
			String debitNo = myForm.getDebitNo();
			AcctDno acctDno = acctDebitNoteService.findById(debitNo);
			String jobBagNo = myForm.getJobBagNo();
			JobBag jobBag = jobBagService.findById(jobBagNo);

			if (null == jobBag) {
				request.setAttribute("message", "工單號碼錯誤: " + jobBagNo);
				return mapping.findForward("popup_message");
			} else if (!jobBag.getCustomer().getCustNo()
					.equalsIgnoreCase(acctDno.getCustomer().getCustNo())) {
				request.setAttribute("message", "工單客戶編號錯誤 ");
				return mapping.findForward("popup_message");
			} else{ 
				if (jobBag.getJobBagStatus().equalsIgnoreCase("ACCOUNTING_EP1") 
						|| jobBag.getJobBagStatus().equalsIgnoreCase("ACCT_DN_GENERATED") 
						|| jobBag.getJobBagStatus().equalsIgnoreCase("ACCOUNTING_LOCKED")) {
				   request.setAttribute("message", "工單狀態錯誤, 工單狀態為" + jobBag.getJobBagStatus() + "，已被其它debit_note鎖定，不可再加入");
				   return mapping.findForward("popup_message");
			    }
			}
			
			//更新之前的狀態
			String status = jobBag.getJobBagStatus();
			//之之前的狀態
			String prevStatus = jobBag.getPrevStatus();
			// 工單狀態 壓為 ACCOUNTING_LOCKED, 會計立帳作業
			jobBag.setJobBagStatus("ACCOUNTING_LOCKED");
			
			//如果是在下列這兩個狀態時，prevstatus會變成ACCOUNTING_EP1 || ACCT_DN_GENERATED
			//unlock時狀態會錯誤，所以要先擋掉(企業 邏輯是不會發生，但需預防)
			if( "ACCOUNTING_EP1".equals(status) || "ACCT_DN_GENERATED".equals(status) || ("ACCOUNTING_LOCKED".equals(prevStatus) && "ACCOUNTING_LOCKED".equals(status))){
				//當prevstatus為下列狀態時，回復成completed_lg
				if("ACCOUNTING_EP1".equals(prevStatus) || "ACCT_DN_GENERATED".equals(prevStatus) || "ACCOUNTING_LOCKED".equals(prevStatus)){
					jobBag.setPrevStatus("COMPLETED_LG");
				}else{
					jobBag.setPrevStatus(prevStatus);
				}
			}
			
			
			jobBagService.save(jobBag);

			// 尋找每張工單的收費項目清單
			List jobCodeChargeItemList = acctDebitNoteService
					.findJobCodeChargeItemListByJobBag(jobBag);
			for (int j = 0; j < jobCodeChargeItemList.size(); j++) {
				
				Integer sumQty = 0;
				AcctJobCodeChargeItem jobCodeChargeItem = (AcctJobCodeChargeItem) jobCodeChargeItemList
						.get(j);

				// 該客戶收費項目的合約價格資訊
				AcctCustomerContract acctCustomerContract = jobCodeChargeItem
						.getAcctCustomerContract();

				// 收費項目
				AcctChargeItem acctChargeItem = jobCodeChargeItem
						.getAcctChargeItem();

				// 計算每張工單收費項目 數量
				if (acctChargeItem.getCalculatType().equalsIgnoreCase("SUM")) {
					
					if (acctChargeItem.getAccounts())
						sumQty = sumQty + jobBag.getAccounts();
					if (acctChargeItem.getPages())
						sumQty = sumQty + jobBag.getPages();
					if (acctChargeItem.getSheets())
						sumQty = sumQty + jobBag.getSheets();
					if (acctChargeItem.getFeeder2())
						sumQty = sumQty + jobBag.getFeeder2();
					if (acctChargeItem.getFeeder3())
						sumQty = sumQty + jobBag.getFeeder3();
					if (acctChargeItem.getFeeder4())
						sumQty = sumQty + jobBag.getFeeder4();
					if (acctChargeItem.getFeeder5())
						sumQty = sumQty + jobBag.getFeeder5();
					if (acctChargeItem.getTray1() != null && acctChargeItem.getTray1())
						sumQty = sumQty + jobBag.getTray1();
					if (acctChargeItem.getTray2() != null && acctChargeItem.getTray2())
						sumQty = sumQty + jobBag.getTray2();
					if (acctChargeItem.getTray3() != null && acctChargeItem.getTray3())
						sumQty = sumQty + jobBag.getTray3();
					if (acctChargeItem.getTray4() != null && acctChargeItem.getTray4())
						sumQty = sumQty + jobBag.getTray4();
					if (acctChargeItem.getTray5() != null && acctChargeItem.getTray5())
						sumQty = sumQty + (jobBag.getTray5() == null? 0 : jobBag.getTray5());
					if (acctChargeItem.getTray6() != null && acctChargeItem.getTray6())
						sumQty = sumQty + (jobBag.getTray6() == null? 0 : jobBag.getTray6());
					if (acctChargeItem.getTray7() != null && acctChargeItem.getTray7())
						sumQty = sumQty + (jobBag.getTray7() == null? 0 : jobBag.getTray7());
					if (acctChargeItem.getTray8() != null && acctChargeItem.getTray8())
						sumQty = sumQty + (jobBag.getTray8() == null? 0 : jobBag.getTray8());
					if (null != acctChargeItem.getP1accounts()
							&& acctChargeItem.getP1accounts()
							&& null != jobBag.getP1accounts())
						sumQty = sumQty + jobBag.getP1accounts();
					if (null != acctChargeItem.getP2accounts()
							&& acctChargeItem.getP2accounts()
							&& null != jobBag.getP2accounts())
						sumQty = sumQty + jobBag.getP2accounts();
					if (null != acctChargeItem.getP3accounts()
							&& acctChargeItem.getP3accounts()
							&& null != jobBag.getP3accounts())
						sumQty = sumQty + jobBag.getP3accounts();
					if (null != acctChargeItem.getP4accounts()
							&& acctChargeItem.getP4accounts()
							&& null != jobBag.getP4accounts())
						sumQty = sumQty + jobBag.getP4accounts();
					if (null != acctChargeItem.getP5accounts()
							&& acctChargeItem.getP5accounts()
							&& null != jobBag.getP5accounts())
						sumQty = sumQty + jobBag.getP5accounts();
					if (null != acctChargeItem.getP6accounts()
							&& acctChargeItem.getP6accounts()
							&& null != jobBag.getP6accounts())
						sumQty = sumQty + jobBag.getP6accounts();
					if (null != acctChargeItem.getPxaccounts()
							&& acctChargeItem.getPxaccounts()
							&& null != jobBag.getPxaccounts())
						sumQty = sumQty + jobBag.getPxaccounts();
				} else if (acctChargeItem.getCalculatType().equalsIgnoreCase(
						"EXPRESSION")) {
					
					JEP jep = new JEP();
					String expr = acctChargeItem.getExpression(); // get
																	// Expression
					jep.addVariable("$accounts", jobBag.getAccounts());
					jep.addVariable("$pages", jobBag.getPages());
					jep.addVariable("$sheets", jobBag.getSheets());
					jep.addVariable("$feeder2", jobBag.getFeeder2());
					jep.addVariable("$feeder3", jobBag.getFeeder3());
					jep.addVariable("$feeder4", jobBag.getFeeder4());
					jep.addVariable("$feeder5", jobBag.getFeeder5());
					jep.addVariable("$tray1", jobBag.getTray1() == null? 0 : jobBag.getTray1());
					jep.addVariable("$tray2", jobBag.getTray2() == null? 0 : jobBag.getTray2());
					jep.addVariable("$tray3", jobBag.getTray3() == null? 0 : jobBag.getTray3());
					jep.addVariable("$tray4", jobBag.getTray4() == null? 0 : jobBag.getTray4());
					jep.addVariable("$tray5", jobBag.getTray5() == null? 0 : jobBag.getTray5());
					jep.addVariable("$tray6", jobBag.getTray6() == null? 0 : jobBag.getTray6());
					jep.addVariable("$tray7", jobBag.getTray7() == null? 0 : jobBag.getTray7());
					jep.addVariable("$tray8", jobBag.getTray8() == null? 0 : jobBag.getTray8());
					jep.addVariable("$p1accounts", jobBag.getP1accounts());
					jep.addVariable("$p2accounts", jobBag.getP2accounts());
					jep.addVariable("$p3accounts", jobBag.getP3accounts());
					jep.addVariable("$p4accounts", jobBag.getP4accounts());
					jep.addVariable("$p5accounts", jobBag.getP5accounts());
					jep.addVariable("$p6accounts", jobBag.getP6accounts());
					jep.addVariable("$pxaccounts", jobBag.getPxaccounts());
					try {
						jep.addStandardFunctions();
						jep.parseExpression(expr);
						double value = jep.getValue();
						sumQty = (int) Math.ceil(value); // 無條件進位
					} catch (Exception e) {
						log.error("", e);
						System.out.println("An error occured: "
								+ e.getMessage());
					}

				} else if (acctChargeItem.getCalculatType().equalsIgnoreCase(
						"FIXED")) {
					sumQty = acctChargeItem.getFixedValue();
				}
				Integer sumQtyOri = sumQty;
				// 列印次數調整
				if (null != jobCodeChargeItem.getPrintTimes())
					sumQty = sumQty * jobCodeChargeItem.getPrintTimes();

				// 收費係數調整, 數量 四捨五入
				if (null != jobCodeChargeItem.getAdjustmentPercent())
					sumQty = (int) Math.round(sumQty
							* jobCodeChargeItem.getAdjustmentPercent());

				// 將結果寫入 sum1
				AcctSum1 acctSum1 = new AcctSum1();
				acctSum1.setCustomer(jobBag.getCustomer());
				acctSum1.setAcctDno(acctDno);
				JobCode jobCode = null;
				if (null != jobBag.getJobCode().getMainJobCodeNo()
						&& jobBag.getJobCode().getMainJobCodeNo().length() > 0) {
					// 有指定合併工單
					jobCode = jobCodeService.findById(jobBag.getJobCode()
							.getMainJobCodeNo());
					acctSum1.setIdfJobCodeNo(jobCode.getJobCodeNo());
					if (null != jobBag.getJobCode().getMainJobCodeProgNm())
						acctSum1.setProgNm(jobBag.getJobCode()
								.getMainJobCodeProgNm()); // 有指定活動名稱
					else
						acctSum1.setProgNm(jobCode.getProgNm()); // 無指定 活動名稱
				} else {
					// 無指定合併工單
					jobCode = jobBag.getJobCode();
					acctSum1.setIdfJobCodeNo(jobCode.getJobCodeNo());
					acctSum1.setProgNm(jobCode.getProgNm());
				}

				acctSum1.setIdfJobBagNo(jobBag.getJobBagNo());

				if (null != jobCode && null != jobCode.getCostCenter()
						&& jobCode.getCostCenter().length() > 0){
					acctSum1.setCostCenter(jobCode.getCostCenter());
					acctSum1.setAutoCostCenter(false);
				}else {
					// 若沒設定 cost_center, 以 cycleDate 為cost_center
					String costCenter = new SimpleDateFormat("MMdd")
							.format(jobBag.getCycleDate());
					acctSum1.setCostCenter(costCenter);
					acctSum1.setAutoCostCenter(true);
				}
				acctSum1.setAcctChargeItem(acctChargeItem);
				acctSum1.setAcctCustomerContract(acctCustomerContract);
				acctSum1.setItemName(acctChargeItem.getItemName());
				acctSum1.setItemNameTw(acctChargeItem.getItemNameTw());
				if (null != acctChargeItem.getCodeByTitle())
					acctSum1.setTitle(acctChargeItem.getCodeByTitle()
							.getCodeValueTw());
				if (null != acctChargeItem.getCodeBySubTitle())
					acctSum1.setSubTitle(acctChargeItem.getCodeBySubTitle()
							.getCodeValueTw());
				acctSum1.setEp1AccountCode(acctChargeItem.getEp1AccountCode());
				acctSum1.setCalculatType(acctChargeItem.getCalculatType());
				acctSum1.setUnitPrice(acctCustomerContract.getUnitPrice());
				acctSum1.setSumQty(sumQty);
				acctSum1.setSumQtyOri(sumQtyOri);
				acctSum1.setCycleDate(jobBag.getCycleDate());
				
				acctSum1Service.save(acctSum1);
			}
			HibernateSessionFactory.getSession().getTransaction().commit();


			request.setAttribute("acctDno", acctDno);
			ValueList dataList = getValueList(request, myForm,
					"acctDebitNoteStep2List");
			request.setAttribute("dataList", dataList);

			// 將dataList 放到session
			request.getSession().setAttribute("dataList", dataList);
			request.setAttribute("message", "新增" + jobBagNo + "工單成功 ");
			return mapping.findForward("step2_list");
		} catch (Exception e) {
			log.error("", e);
			HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			if(HibernateSessionFactory.getSession().isOpen())
			   HibernateSessionFactory.closeSession();
			return mapping.findForward("popup_message");			
		}
	}

	public ActionForward step2_delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionMessages messages = new ActionMessages();
		AcctDebitNoteForm myForm = (AcctDebitNoteForm) form;

		try {
			HibernateSessionFactory.getSession().clear();
			HibernateSessionFactory.getSession().getTransaction().begin();
			String jobBagNo = myForm.getJobBagNo();

			JobBag jobBag = jobBagService.findById(jobBagNo);
			if (null != jobBag) {
				String prevStatus = jobBag.getPrevStatus();
				if( "ACCOUNTING_LOCKED".equals(prevStatus) || "ACCOUNTING_EP1".equals(prevStatus) || "ACCT_DN_GENERATED".equals(prevStatus)){
				   jobBag.setJobBagStatus("COMPLETED_LG"); // RE-SET 工單狀態
				   jobBag.setPrevStatus("COMPLETED_LG"); // RE-SET 工單狀態
				}else{
				   jobBag.setJobBagStatus(prevStatus);
				   jobBag.setPrevStatus(prevStatus);
				}
				jobBagService.save(jobBag);
			}

			List acctSum1List = acctSum1Service.findByJobBag(jobBagNo);
			for (int i = 0; i < acctSum1List.size(); i++) {
				AcctSum1 acctSum1 = (AcctSum1) acctSum1List.get(i);
				acctSum1Service.delete(acctSum1);
			}
			HibernateSessionFactory.getSession().getTransaction().commit();

			String debitNo = myForm.getDebitNo();
			AcctDno acctDno = acctDebitNoteService.findById(debitNo);
			request.setAttribute("acctDno", acctDno);
			ValueList dataList = getValueList(request, myForm,
					"acctDebitNoteStep2List");
			request.setAttribute("dataList", dataList);

			// 將dataList 放到session
			request.getSession().setAttribute("dataList", dataList);

			request.setAttribute("message", "工單已刪除, 並 unlock ");

		} catch (Exception e) {
			log.error("", e);
			HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("popup_message");
		}
		return mapping.findForward("step2_list");
	}

	public ActionForward step3(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		AcctDebitNoteForm myForm = (AcctDebitNoteForm) form;

		try {
			String debitNo = myForm.getDebitNo();
			HibernateSessionFactory.getSession().clear();
			HibernateSessionFactory.getSession().getTransaction().begin();

			AcctDno acctDno = acctDebitNoteService.findById(debitNo);

			request.setAttribute("acctDno", acctDno);

		} catch (Exception e) {
			log.error("", e);
			HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("popup_message");
		}
		return mapping.findForward("step3_print");
	}

	public ActionForward step4(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionMessages messages = new ActionMessages();
		AcctDebitNoteForm myForm = (AcctDebitNoteForm) form;

		try {
			HibernateSessionFactory.getSession().clear();
			HibernateSessionFactory.getSession().getTransaction().begin();
			String debitNo = myForm.getDebitNo();

			AcctDno acctDno = acctDebitNoteService.findById(debitNo);

			// 檢查是否有工單總收費小於 最低收費
			Boolean hasMinimalCharge = acctSum1Service
					.checkMinimalCharge(acctDno);
			
			HibernateSessionFactory.getSession().flush();

			// 產生 sum2 內容
			boolean ret = acctDebitNoteService.generateSum2(acctDno);
			if (!ret) {
				request.setAttribute("message", "Step 4.計算價格作業 失敗 ");
				return mapping.findForward("popup_message");
			}

			String NowTime = new SimpleDateFormat("yyyy-MM-dd")
					.format(new Date());
			acctDno.setProcessdt2(NowTime);
			acctDno.setModifiedDate(new SimpleDateFormat("yyyy-MM-dd").format(new Date()));
			acctDebitNoteService.save(acctDno);

			HibernateSessionFactory.getSession().getTransaction().commit();
			request.setAttribute("message", "Step 4.計算價格作業 成功 ");
			return mapping.findForward("popup_message");
		} catch (Exception e) {
			log.error("", e);
			HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("popup_message");
		}

	}

	public ActionForward step5_list(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionMessages messages = new ActionMessages();
		AcctDebitNoteForm myForm = (AcctDebitNoteForm) form;

		try {
			String debitNo = myForm.getDebitNo();
			AcctDno acctDno = acctDebitNoteService.findById(debitNo);
			request.setAttribute("acctDno", acctDno);

			ValueList dataList = getValueList(request, myForm,
					"acctDebitNoteStep5List");
			request.setAttribute("dataList", dataList);

			// 將dataList 放到session
			request.getSession().setAttribute("dataList", dataList);
			String backToListURL = request.getRequestURI() + "?"
					+ request.getQueryString();
			//request.getSession().setAttribute("backToListURL", backToListURL);
			request.setAttribute("backToListURL", URLEncoder.encode(backToListURL, "UTF-8"));
		} catch (Exception e) {
			log.error("", e);
			messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
					Global.MESSAGE_SYSTEMERROR_KEY));
			this.saveMessages(request, messages);
			return mapping.findForward(Global.FORWARD_INCLUDE_MESSAGE_KEY);
		}
		return mapping.findForward("step5_list");
	}

	public ActionForward step5_addInit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionMessages messages = new ActionMessages();
		AcctDebitNoteForm myForm = (AcctDebitNoteForm) form;

		try {
			String debitNo = myForm.getDebitNo();
			AcctDno acctDno = acctDebitNoteService.findById(debitNo);
			AcctSum2 acctSum2 = new AcctSum2();
			List chargeItemList = acctChargeItemService
					.findByItemType("NON_JOB_BAG");
			Comparator<AcctChargeItem> comparator = new Comparator<AcctChargeItem>() {
				public int compare(AcctChargeItem arg0, AcctChargeItem arg1) {
					return arg0.getItemName().compareTo(arg1.getItemName());
				}
			};

			Collections.sort(chargeItemList, comparator);
			request.setAttribute("acctDno", acctDno);
			request.setAttribute("acctSum2", acctSum2);
			request.setAttribute("chargeItemList", chargeItemList);
			request.setAttribute("ACTION_MODE", "ADD");
		} catch (Exception e) {
			log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("popup_message");
		}
		return mapping.findForward("step5_edit");
	}

	public ActionForward step5_addSubmit(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		AcctDebitNoteForm myForm = (AcctDebitNoteForm) form;
		try {
			String debitNo = myForm.getDebitNo();
			Integer sum2Id = myForm.getSum2Id();
			Integer acctChargeItemId = myForm.getAcctChargeItem();
			Double calculatUnitPrice = myForm.getUnitPrice();
			Double sumQty = myForm.getSumQty();
			String costCenter = myForm.getCostCenter();
			String printCode = myForm.getPrintCode();
			HibernateSessionFactory.getSession().clear();
			HibernateSessionFactory.getSession().getTransaction().begin();

			AcctDno acctDno = acctDebitNoteService.findById(debitNo);

			AcctSum2 acctSum2 = new AcctSum2();

			acctSum2.setCustomer(customerService.findById(acctDno.getCustomer()
					.getCustNo()));
			acctSum2.setAcctDno(acctDno);
			AcctChargeItem acctChargeItem = acctChargeItemService
					.findById(acctChargeItemId);
			acctSum2.setAcctChargeItem(acctChargeItem);
			acctSum2.setItemName(acctChargeItem.getItemName());
			acctSum2.setItemNameTw(acctChargeItem.getItemNameTw());
			acctSum2.setTitle(acctChargeItem.getCodeByTitle().getCodeValueTw());
			acctSum2.setSubTitle(acctChargeItem.getCodeBySubTitle()
					.getCodeValueTw());
			acctSum2.setEp1AccountCode(acctChargeItem.getEp1AccountCode());
			acctSum2.setUnitPrice(calculatUnitPrice);
			acctSum2.setSumQty(sumQty);
			acctSum2.setTotal(calculatUnitPrice * sumQty);
			acctSum2.setCostCenter(costCenter);
			if(costCenter == null || costCenter.trim().equals("")){
				acctSum2.setAutoCostCenter(true);
			}else{
				acctSum2.setAutoCostCenter(false);
			}
			
			acctSum2.setItemType("NON_JOB_BAG");
			acctSum2.setPrintCode(printCode);
			acctSum2Service.save(acctSum2);
			HibernateSessionFactory.getSession().getTransaction().commit();

			acctDno = acctDebitNoteService.findById(debitNo);
			String purpose = "'','DISPLAY_ONLY'";
			DebitNoteFullInfo debitNoteFullInfo = acctDebitNoteService
					.getDebitNoteFullInfo(acctDno, purpose);
			
			request.setAttribute("debitNoteFullInfo", debitNoteFullInfo);
			request.setAttribute("acctDno", acctDno);
			ValueList dataList = getValueList(request, myForm,
					"acctDebitNoteStep5List");
			request.setAttribute("dataList", dataList);

			// 將dataList 放到session
			request.getSession().setAttribute("dataList", dataList);
			String backToListURL = request.getRequestURI() + "?"
					+ request.getQueryString();
			//request.getSession().setAttribute("backToListURL", backToListURL);
			request.setAttribute("backToListURL", URLEncoder.encode(backToListURL, "UTF-8"));
			request.setAttribute("message", "新增成功");

			return mapping.findForward("step5_list");
		} catch (Exception e) {
			log.error("", e);
			HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("popup_message");
		}
	}

	public ActionForward step5_editInit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionMessages messages = new ActionMessages();
		AcctDebitNoteForm myForm = (AcctDebitNoteForm) form;

		try {
			Integer sum2Id = myForm.getSum2Id();
			AcctSum2 acctSum2 = acctSum2Service.findById(sum2Id);
			String debitNo = myForm.getDebitNo();
			AcctDno acctDno = acctDebitNoteService.findById(debitNo);
			List chargeItemList = acctChargeItemService
					.findByItemType("NON_JOB_BAG");
			Comparator<AcctChargeItem> comparator = new Comparator<AcctChargeItem>() {
				public int compare(AcctChargeItem arg0, AcctChargeItem arg1) {
					return arg0.getItemName().compareTo(arg1.getItemName());
				}
			};

			Collections.sort(chargeItemList, comparator);
			request.setAttribute("acctDno", acctDno);
			request.setAttribute("acctSum2", acctSum2);
			request.setAttribute("chargeItemList", chargeItemList);
			request.setAttribute("ACTION_MODE", "EDIT");

		} catch (Exception e) {
			log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("popup_message");
		}
		return mapping.findForward("step5_edit");
	}

	public ActionForward step5_editSubmit(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		AcctDebitNoteForm myForm = (AcctDebitNoteForm) form;
		try {
			String debitNo = myForm.getDebitNo();
			Integer sum2Id = myForm.getSum2Id();
			Integer acctChargeItemId = myForm.getAcctChargeItem();
			Double calculatUnitPrice = myForm.getUnitPrice();
			Double sumQty = myForm.getSumQty();
			String costCenter = myForm.getCostCenter();
			String printCode = myForm.getPrintCode();
			HibernateSessionFactory.getSession().clear();
			HibernateSessionFactory.getSession().getTransaction().begin();

			AcctDno acctDno = acctDebitNoteService.findById(debitNo);

			AcctSum2 acctSum2 = acctSum2Service.findById(sum2Id);

			acctSum2.setCustomer(acctDno.getCustomer());
			acctSum2.setAcctDno(acctDno);
			acctSum2.setAcctChargeItem(acctChargeItemService
					.findById(acctChargeItemId));
			acctSum2.setUnitPrice(calculatUnitPrice);
			acctSum2.setSumQty(sumQty);
			acctSum2.setTotal(calculatUnitPrice * sumQty);
			acctSum2.setCostCenter(costCenter);
			if(costCenter == null || costCenter.trim().equals("")){
				acctSum2.setAutoCostCenter(true);
			}else{
				acctSum2.setAutoCostCenter(false);
			}
			acctSum2.setPrintCode(printCode);

			acctSum2Service.save(acctSum2);

			HibernateSessionFactory.getSession().getTransaction().commit();
			
			

			acctDno = acctDebitNoteService.findById(debitNo);
			String purpose = "'','DISPLAY_ONLY'";
			DebitNoteFullInfo debitNoteFullInfo = acctDebitNoteService
					.getDebitNoteFullInfo(acctDno, purpose);
			
			request.setAttribute("debitNoteFullInfo", debitNoteFullInfo);
			request.setAttribute("acctDno", acctDno);
			ValueList dataList = getValueList(request, myForm,
					"acctDebitNoteStep5List");
			request.setAttribute("dataList", dataList);

			// 將dataList 放到session
			request.getSession().setAttribute("dataList", dataList);
			String backToListURL = request.getRequestURI() + "?"
					+ request.getQueryString();
			//request.getSession().setAttribute("backToListURL", backToListURL);
			request.setAttribute("backToListURL", URLEncoder.encode(backToListURL, "UTF-8"));
			request.setAttribute("message", "新增成功");

			return mapping.findForward("step5_list");
		} catch (Exception e) {
			log.error("", e);
			HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("popup_message");
		}
	}

	public ActionForward step5_delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionMessages messages = new ActionMessages();
		AcctDebitNoteForm myForm = (AcctDebitNoteForm) form;

		try {
			HibernateSessionFactory.getSession().clear();
			HibernateSessionFactory.getSession().getTransaction().begin();

			Integer sum2Id = myForm.getSum2Id();
			AcctSum2 acctSum2 = acctSum2Service.findById(sum2Id);
			acctSum2Service.delete(acctSum2);
			HibernateSessionFactory.getSession().getTransaction().commit();
			request.setAttribute("message", "刪除成功");

		} catch (Exception e) {
			log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("popup_message");
		}
		return mapping.findForward("popup_message");
	}

	public ActionForward step6(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		AcctDebitNoteForm myForm = (AcctDebitNoteForm) form;

		try {
			String debitNo = myForm.getDebitNo();
			HibernateSessionFactory.getSession().clear();
			HibernateSessionFactory.getSession().getTransaction().begin();

			AcctDno acctDno = acctDebitNoteService.findById(debitNo);

			request.setAttribute("acctDno", acctDno);

		} catch (Exception e) {
			log.error("", e);
			HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("popup_message");
		}
		return mapping.findForward("step6_print");
	}

	public ActionForward step6_1_list_BAK(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		ActionMessages messages = new ActionMessages();
		AcctDebitNoteForm myForm = (AcctDebitNoteForm) form;

		try {
			String debitNo = myForm.getDebitNo();
			AcctDno acctDno = acctDebitNoteService.findById(debitNo);
			request.setAttribute("acctDno", acctDno);
			ValueList dataList = getValueList(request, myForm,
					"acctDebitNoteStep6_1List");
			request.setAttribute("dataList", dataList);

			// 將dataList 放到session
			request.getSession().setAttribute("dataList", dataList);
			String backToListURL = request.getRequestURI() + "?"
					+ request.getQueryString();
			//request.getSession().setAttribute("backToListURL", backToListURL);
			request.setAttribute("backToListURL", URLEncoder.encode(backToListURL, "UTF-8"));
		} catch (Exception e) {
			log.error("", e);
			messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
					Global.MESSAGE_SYSTEMERROR_KEY));
			this.saveMessages(request, messages);
			return mapping.findForward(Global.FORWARD_INCLUDE_MESSAGE_KEY);
		}
		return mapping.findForward("step6_1_list");
	}

	public ActionForward step6_1_list(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionMessages messages = new ActionMessages();
		AcctDebitNoteForm myForm = (AcctDebitNoteForm) form;

		try {
			String debitNo = myForm.getDebitNo();
			AcctDno acctDno = acctDebitNoteService.findById(debitNo);
			request.setAttribute("acctDno", acctDno);
			// ValueList dataList = getValueList(request,
			// myForm,"acctDebitNoteStep6_1List");
			List dataList = acctSInvoiceService.findByDebitNote(acctDno);
			request.setAttribute("dataList", dataList);

			// 將dataList 放到session
			request.getSession().setAttribute("dataList", dataList);
			String backToListURL = request.getRequestURI() + "?"
					+ request.getQueryString();
			//request.getSession().setAttribute("backToListURL", backToListURL);
			request.setAttribute("backToListURL", URLEncoder.encode(backToListURL, "UTF-8"));
		} catch (Exception e) {
			log.error("", e);
			messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
					Global.MESSAGE_SYSTEMERROR_KEY));
			this.saveMessages(request, messages);
			return mapping.findForward(Global.FORWARD_INCLUDE_MESSAGE_KEY);
		}
		return mapping.findForward("step6_1_list");
	}

	public ActionForward step6_1_editSubmit(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		ActionMessages messages = new ActionMessages();
		AcctDebitNoteForm myForm = (AcctDebitNoteForm) form;

		try {

			String debitNo = myForm.getDebitNo();
			Integer[] delInvoiceIds = myForm.getDelInvoiceIds();
			Integer[] invoiceIds = myForm.getInvoiceIds();
			String[] costCenters = myForm.getCostCenters();
			Double[] expenses = myForm.getExpenses();
			String[] invoicenos = myForm.getInvoicenos();
			String[] depts = myForm.getDepts();
			Integer[] taxs = myForm.getTaxs();
			String[] jobtypes = myForm.getJobtypes();
			String[] jobCodeNos = myForm.getJobCodeNos();
			String[] invoicetyps = myForm.getInvoicetyps();
			HibernateSessionFactory.getSession().clear();
			HibernateSessionFactory.getSession().getTransaction().begin();
			AcctDno acctDno = acctDebitNoteService.findById(debitNo);

			Set<AcctInvoice> thisSet = new HashSet<AcctInvoice>();
			
			
			for (int i = 0; i < invoiceIds.length; i++) {
				boolean delete = false;
				// 如果要被刪除就不用更新了
				if (delInvoiceIds != null) {
					for (Integer delId : delInvoiceIds) {
						
						if (delId.equals(invoiceIds[i]) && delId > 0) {
							delete = true;
							break;
						}
					}
				}
				if ( invoicenos[i].length() == 10
						&& !delete) {
					AcctInvoice acctInvoice = new AcctInvoice();
					
					if (invoiceIds[i] > 0)
						acctInvoice = acctInvoiceService
								.findById(invoiceIds[i]);
					else {
						acctInvoice.setAcctDno(acctDno);
						acctInvoice.setCustomer(acctDno.getCustomer());
					}
					if((costCenters[i] == null || costCenters[i].length() == 0) && "1".equals(invoicetyps[i])){
						costCenters[i] = "defaul_C";
					}
					acctInvoice.setCostCenter(costCenters[i]);
					acctInvoice.setExpense(expenses[i]);
					acctInvoice.setInvoiceno(invoicenos[i]);
					acctInvoice.setInvoicetyp(invoicetyps[i]);
					// acctInvoice.setJobCodeNo(jobCodeNo);
					// acctInvoice.setJobtype(jobtype);
					acctInvoice.setTax(new Double(taxs[i]));
					if((costCenters[i] != null && !costCenters[i].equals("")) || expenses[i] != null  || (invoicenos[i] != null && !invoicenos[i].equals(""))   )
					   acctInvoiceService.save(acctInvoice);
				}
			}
			if (delInvoiceIds != null) {
				for (Integer delId : delInvoiceIds) {
					AcctInvoice acctInvoice = null;
					if (delId > 0) {
						
						acctInvoice = acctInvoiceService.findById(delId);
						
						if (acctInvoice != null) {
							acctInvoiceService.delete(acctInvoice);
						}
					}
				}
			}
			HibernateSessionFactory.getSession().getTransaction().commit();
			request.setAttribute("message", "Step 6.1. 編輯發票號碼 成功 ");
			return mapping.findForward("popup_message");
		} catch (Exception e) {
			log.error("", e);
			HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("popup_message");
		}

	}

	public ActionForward step7(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionMessages messages = new ActionMessages();
		AcctDebitNoteForm myForm = (AcctDebitNoteForm) form;

		try {
			HibernateSessionFactory.getSession().clear();
			HibernateSessionFactory.getSession().getTransaction().begin();
			String debitNo = myForm.getDebitNo();

			AcctDno acctDno = acctDebitNoteService.findById(debitNo);
			

			// 產生 sum3 內容
			boolean ret = acctDebitNoteService.generateSum3(acctDno);
			// 清空Debit Note 中 稅額 欄位, 這樣系統才會重算稅額
			acctDno.setTax(0.0);

			String NowTime = new SimpleDateFormat("yyyy-MM-dd")
					.format(new Date());
			acctDno.setProcessdt3(NowTime);
			acctDno.setModifiedDate(new SimpleDateFormat("yyyy-MM-dd").format(new Date()));
			acctDebitNoteService.save(acctDno);

			HibernateSessionFactory.getSession().getTransaction().commit();
			
			// 引到至編輯頁面
			String purpose = "'','DISPLAY_ONLY'";
			DebitNoteFullInfo debitNoteFullInfo = acctDebitNoteService
					.getDebitNoteFullInfo(acctDno, purpose);
			List<JobBag> list = acctDebitNoteService.findJobBagListByDebitNote(acctDno);
			
			JobBagService jobBagService = JobBagService.getInstance();
			HibernateSessionFactory.getSession().getTransaction().begin();
			
			for(JobBag jobBag : list){
				String prevStatus = jobBag.getPrevStatus(); //保留進入會計作業前的狀態
				jobBag.setJobBagStatus("ACCT_DN_GENERATED");
				if( "ACCOUNTING_LOCKED".equals(prevStatus) || "ACCOUNTING_EP1".equals(prevStatus) || "ACCT_DN_GENERATED".equals(prevStatus))
					jobBag.setPrevStatus("COMPLETED_LG");
				else
				    jobBag.setPrevStatus(prevStatus);
				//記錄此job bag被本debit notes鎖定了
				jobBag.setNotes("Locked by:" + debitNo);
				jobBagService.save(jobBag);
			}
			HibernateSessionFactory.getSession().getTransaction().commit();
			
			request.setAttribute("debitNoteFullInfo", debitNoteFullInfo);
			request.setAttribute("message", "Step 7. 產生Debit Note 成功 ");
			return mapping.findForward("popup_message");
		} catch (Exception e) {
			log.error("", e);
			HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("popup_message");
		}finally{
			if(HibernateSessionFactory.getSession().isOpen())
				HibernateSessionFactory.closeSession();
		}

	}

	public ActionForward step8_list(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionMessages messages = new ActionMessages();
		AcctDebitNoteForm myForm = (AcctDebitNoteForm) form;

		try {
			String debitNo = myForm.getDebitNo();
			AcctDno acctDno = acctDebitNoteService.findById(debitNo);
			AcctSectionReceiverMapping acctSectionReceiverMapping = sectionReceiverMappingService
					.findByDebitNo(acctDno);

			request.setAttribute("acctDno", acctDno);
			request.setAttribute("acctSectionReceiverMapping",
					acctSectionReceiverMapping);
			String purpose="'','DISPLAY_ONLY', 'MERGE_REPORT', 'ADJUSTED_SUM3'";
			List dataList = acctSum3Service.findByDebitNote(acctDno, purpose);
			// ValueList dataList = getValueList(request,
			// myForm,"acctDebitNoteStep8List");
			request.setAttribute("dataList", dataList);

		} catch (Exception e) {
			log.error("", e);
			messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage(
					Global.MESSAGE_SYSTEMERROR_KEY));
			this.saveMessages(request, messages);
			return mapping.findForward(Global.FORWARD_INCLUDE_MESSAGE_KEY);
		}
		return mapping.findForward("step8_list");
	}

	public ActionForward step8_editSubmit(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		ActionMessages messages = new ActionMessages();
		AcctDebitNoteForm myForm = (AcctDebitNoteForm) form;

		try {
			String debitNo = myForm.getDebitNo();
			Integer[] sum3Ids = myForm.getSum3Ids();
			String[] titles = myForm.getTitles();
			String[] subtitles = myForm.getSubtitles();
			Double[] unitPrices = myForm.getUnitPrices();
			Double[] sumQties = myForm.getSumQties();
			Double[] totals = myForm.getTotals();
			String[] purposes = myForm.getPurposes();
			String[] printCodes = myForm.getPrintCodes();
			HibernateSessionFactory.getSession().clear();
			HibernateSessionFactory.getSession().getTransaction().begin();

			AcctDno acctDno = acctDebitNoteService.findById(debitNo);
			for (int i = 0; i < sum3Ids.length; i++) {
				AcctSum3 accSum3 = new AcctSum3();
				if (titles[i].length() > 0) {
					if (sum3Ids[i] > 0)
						accSum3 = acctSum3Service.findById(sum3Ids[i]);
					else {
						accSum3.setAcctDno(acctDno);
						accSum3.setCustomer(acctDno.getCustomer());
					}

					accSum3.setTitle(titles[i]);
					accSum3.setSubtitle(subtitles[i]);
					Double _qty = new Double(sumQties[i]);
					accSum3.setSumQty(_qty);
					accSum3.setUnitPrice(unitPrices[i]);
					accSum3.setTotal(totals[i]);
					accSum3.setPurpose(purposes[i]);
					if(printCodes != null && i < printCodes.length )
					   accSum3.setPrintCode(printCodes[i]);
					acctSum3Service.save(accSum3);
				}
			}
			String purpose = "'','DISPLAY_ONLY','ADJUSTED_SUM3'";
			
			
			DebitNoteFullInfo debitNoteFullInfo = acctDebitNoteService
					.getDebitNoteFullInfo(acctDno, purpose);
			request.setAttribute("debitNoteFullInfo", debitNoteFullInfo);
			
			HibernateSessionFactory.getSession().getTransaction().commit();
			request.setAttribute("message", "Step 8. 編輯Debit Note 成功 ");
			return mapping.findForward("popup_message");
		} catch (Exception e) {
			log.error("", e);
			HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("popup_message");
		}

	}

	public ActionForward step9(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		AcctDebitNoteForm myForm = (AcctDebitNoteForm) form;

		int digitsLen = (myForm.getDigitsLen() == null || myForm.getDigitsLen()
				.equals("")) ? 0 : myForm.getDigitsLen();

		try {
			String debitNo = myForm.getDebitNo();
			HibernateSessionFactory.getSession().clear();
			HibernateSessionFactory.getSession().getTransaction().begin();

			AcctDno acctDno = acctDebitNoteService.findById(debitNo);
			acctDno.setDigitsLen(digitsLen);

			Set acctSectionReceiverMappings = acctDno.getCustomer()
					.getAcctSectionReceiverMappings();
			Iterator iterator = acctSectionReceiverMappings.iterator();
			while (iterator.hasNext()) {
				AcctSectionReceiverMapping acctSectionReceiverMapping = (AcctSectionReceiverMapping) iterator
						.next();
				if (acctSectionReceiverMapping.getSection().equalsIgnoreCase(
						acctDno.getSection())) {
					request.setAttribute("customerReceiver",
							acctSectionReceiverMapping.getCustomerReceiver());
				}
			}

			request.setAttribute("acctDno", acctDno);

		} catch (Exception e) {
			log.error("", e);
			HibernateSessionFactory.getSession().getTransaction().rollback();
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("popup_message");
		}
		return mapping.findForward("step9_print");
	}

	public ActionForward unlock(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		AcctDebitNoteForm myForm = (AcctDebitNoteForm) form;

		try {
			String custNo = myForm.getCustNo();
			String debitNo = myForm.getDebitNo();

			boolean ret = false;
			if (!"CT".equals(custNo)) {
				HibernateSessionFactory.getSession().clear();
				ret = acctDebitNoteService.unlockJobBagStatus(debitNo);
				if (ret) {
					request.setAttribute("message",
							"該Debit Note 全部的工單 狀態還原為之前的狀態!!並刪除所有report");
				} else {
					request.setAttribute("message", "系統失敗 ");
				}
			} else {
				String message = acctDebitNoteService
						.ctUnlockJobBagStatus(debitNo);
				request.setAttribute("message", "該Debit Note 全部的工單 狀態"
						+ message + "並刪除所有report");
			}
			acctDebitNoteService.deleteAllReport(debitNo);
						
		} catch (Exception e) {
			log.error("", e);
			request.setAttribute("message", "系統失敗 ");
			return mapping.findForward("popup_message");
		}
		return mapping.findForward("popup_message");
	}

	private ValueList getValueList(HttpServletRequest request,
			AcctDebitNoteForm myForm, String entryKey) {
		Map param = new HashMap();

		String cust_no = myForm.getCustNo();
		if (cust_no != null)
			param.put("cust_no", cust_no);

		String debit_no = myForm.getDebitNo();
		if (debit_no != null)
			param.put("debit_no",  debit_no );

		ValueList valueList = valueListService.getValueList(request, entryKey,
				param);
		return valueList;
	}
	
	private ValueList getValueListLike(HttpServletRequest request,
			AcctDebitNoteForm myForm, String entryKey) {
		Map param = new HashMap();

		String cust_no = myForm.getCustNo();
		if (cust_no != null)
			param.put("cust_no", cust_no);

		String debit_no = myForm.getDebitNo();
		if (debit_no != null)
			param.put("debit_no",  "%" + debit_no + "%" );

		ValueList valueList = valueListService.getValueList(request, entryKey,
				param);
		return valueList;
	}
}